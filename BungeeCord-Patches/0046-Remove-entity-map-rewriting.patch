From 9c4c226889214f77280c4036fb463527bc295b05 Mon Sep 17 00:00:00 2001
From: DoNotSpamPls <7570108+DoNotSpamPls@users.noreply.github.com>
Date: Sun, 18 Nov 2018 21:27:51 +0200
Subject: [PATCH] Remove entity map rewriting


diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 9c872a1c..d07d81bd 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -41,7 +41,6 @@ import net.md_5.bungee.api.event.ServerConnectEvent;
 import net.md_5.bungee.api.score.Scoreboard;
 import net.md_5.bungee.chat.ComponentSerializer;
 import net.md_5.bungee.connection.InitialHandler;
-import net.md_5.bungee.entitymap.EntityMap;
 import net.md_5.bungee.forge.ForgeClientHandler;
 import net.md_5.bungee.forge.ForgeConstants;
 import net.md_5.bungee.forge.ForgeServerHandler;
@@ -134,8 +133,6 @@ public final class UserConnection implements ProxiedPlayer
     /*========================================================================*/
     @Getter
     private String displayName;
-    @Getter
-    private EntityMap entityRewrite;
     private Locale locale;
     /*========================================================================*/
     @Getter
@@ -156,8 +153,6 @@ public final class UserConnection implements ProxiedPlayer
 
     public void init()
     {
-        this.entityRewrite = EntityMap.getEntityMap( getPendingConnection().getVersion() );
-
         this.displayName = name;
 
         tabListHandler = new ServerUnique( this );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 76dc13aa..746c11c6 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -119,7 +119,6 @@ public class DownstreamBridge extends PacketHandler
     @Override
     public void handle(PacketWrapper packet) throws Exception
     {
-        con.getEntityRewrite().rewriteClientbound( packet.buf, con.getServerEntityId(), con.getClientEntityId(), con.getPendingConnection().getVersion() );
         con.sendPacket( packet );
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index e1be7cce..02c109fe 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -112,7 +112,6 @@ public class UpstreamBridge extends PacketHandler
     {
         if ( con.getServer() != null )
         {
-            con.getEntityRewrite().rewriteServerbound( packet.buf, con.getClientEntityId(), con.getServerEntityId(), con.getPendingConnection().getVersion() );
             con.getServer().getCh().write( packet );
         }
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
deleted file mode 100644
index 7c19c6fb..00000000
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
+++ /dev/null
@@ -1,291 +0,0 @@
-package net.md_5.bungee.entitymap;
-
-import com.flowpowered.nbt.stream.NBTInputStream;
-import com.google.common.base.Throwables;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.ByteBufInputStream;
-import java.io.IOException;
-import lombok.AccessLevel;
-import lombok.NoArgsConstructor;
-import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
-
-/**
- * Class to rewrite integers within packets.
- */
-@NoArgsConstructor(access = AccessLevel.PACKAGE)
-public abstract class EntityMap
-{
-
-    private final boolean[] clientboundInts = new boolean[ 256 ];
-    private final boolean[] clientboundVarInts = new boolean[ 256 ];
-
-    private final boolean[] serverboundInts = new boolean[ 256 ];
-    private final boolean[] serverboundVarInts = new boolean[ 256 ];
-
-    // Returns the correct entity map for the protocol version
-    public static EntityMap getEntityMap(int version)
-    {
-        switch ( version )
-        {
-            case ProtocolConstants.MINECRAFT_1_8:
-                return EntityMap_1_8.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_9:
-            case ProtocolConstants.MINECRAFT_1_9_1:
-            case ProtocolConstants.MINECRAFT_1_9_2:
-                return EntityMap_1_9.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_9_4:
-                return EntityMap_1_9_4.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_10:
-                return EntityMap_1_10.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_11:
-            case ProtocolConstants.MINECRAFT_1_11_1:
-                return EntityMap_1_11.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_12:
-                return EntityMap_1_12.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_12_1:
-            case ProtocolConstants.MINECRAFT_1_12_2:
-                return EntityMap_1_12_1.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_13:
-            case ProtocolConstants.MINECRAFT_1_13_1:
-            case ProtocolConstants.MINECRAFT_1_13_2:
-                return EntityMap_1_13.INSTANCE;
-        }
-        throw new RuntimeException( "Version " + version + " has no entity map" );
-    }
-
-    protected void addRewrite(int id, ProtocolConstants.Direction direction, boolean varint)
-    {
-        if ( direction == ProtocolConstants.Direction.TO_CLIENT )
-        {
-            if ( varint )
-            {
-                clientboundVarInts[id] = true;
-            } else
-            {
-                clientboundInts[id] = true;
-            }
-        } else if ( varint )
-        {
-            serverboundVarInts[id] = true;
-        } else
-        {
-            serverboundInts[id] = true;
-        }
-    }
-
-    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
-    {
-        rewrite( packet, oldId, newId, serverboundInts, serverboundVarInts );
-    }
-
-    public void rewriteServerbound(ByteBuf packet, int oldId, int newId, int protocolVersion)
-    {
-        rewriteServerbound( packet, oldId, newId );
-    }
-
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId)
-    {
-        rewrite( packet, oldId, newId, clientboundInts, clientboundVarInts );
-    }
-
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId, int protocolVersion)
-    {
-        rewriteClientbound( packet, oldId, newId );
-    }
-
-    protected static void rewriteInt(ByteBuf packet, int oldId, int newId, int offset)
-    {
-        int readId = packet.getInt( offset );
-        if ( readId == oldId )
-        {
-            packet.setInt( offset, newId );
-        } else if ( readId == newId )
-        {
-            packet.setInt( offset, oldId );
-        }
-    }
-
-    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
-    protected static void rewriteVarInt(ByteBuf packet, int oldId, int newId, int offset)
-    {
-        // Need to rewrite the packet because VarInts are variable length
-        int readId = DefinedPacket.readVarInt( packet );
-        int readIdLength = packet.readerIndex() - offset;
-        if ( readId == oldId || readId == newId )
-        {
-            ByteBuf data = packet.copy();
-            packet.readerIndex( offset );
-            packet.writerIndex( offset );
-            DefinedPacket.writeVarInt( readId == oldId ? newId : oldId, packet );
-            packet.writeBytes( data );
-            data.release();
-        }
-    }
-
-    protected static void rewriteMetaVarInt(ByteBuf packet, int oldId, int newId, int metaIndex)
-    {
-        rewriteMetaVarInt( packet, oldId, newId, metaIndex, -1 );
-    }
-
-    protected static void rewriteMetaVarInt(ByteBuf packet, int oldId, int newId, int metaIndex, int protocolVersion)
-    {
-        int readerIndex = packet.readerIndex();
-
-        short index;
-        while ( ( index = packet.readUnsignedByte() ) != 0xFF )
-        {
-            int type = DefinedPacket.readVarInt( packet );
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
-            {
-                switch ( type )
-                {
-                    case 5: // optional chat
-                        if ( packet.readBoolean() )
-                        {
-                            DefinedPacket.readString( packet );
-                        }
-                        continue;
-                    case 15: // particle
-                        int particleId = DefinedPacket.readVarInt( packet );
-                        switch ( particleId )
-                        {
-                            case 3:
-                            case 20:
-                                DefinedPacket.readVarInt( packet ); // block state
-                                break;
-                            case 11: // dust
-                                packet.skipBytes( 16 ); // float, float, float, flat
-                                break;
-                            case 27: // item
-                                readSkipSlot( packet, protocolVersion );
-                                break;
-                        }
-                        continue;
-                    default:
-                        if ( type >= 6 )
-                        {
-                            type--;
-                        }
-                        break;
-                }
-            }
-
-            switch ( type )
-            {
-                case 0:
-                    packet.skipBytes( 1 ); // byte
-                    break;
-                case 1:
-                    if ( index == metaIndex )
-                    {
-                        int position = packet.readerIndex();
-                        rewriteVarInt( packet, oldId, newId, position );
-                        packet.readerIndex( position );
-                    }
-                    DefinedPacket.readVarInt( packet );
-                    break;
-                case 2:
-                    packet.skipBytes( 4 ); // float
-                    break;
-                case 3:
-                case 4:
-                    DefinedPacket.readString( packet );
-                    break;
-                case 5:
-                    readSkipSlot( packet, protocolVersion );
-                    break;
-                case 6:
-                    packet.skipBytes( 1 ); // boolean
-                    break;
-                case 7:
-                    packet.skipBytes( 12 ); // float, float, float
-                    break;
-                case 8:
-                    packet.readLong();
-                    break;
-                case 9:
-                    if ( packet.readBoolean() )
-                    {
-                        packet.skipBytes( 8 ); // long
-                    }
-                    break;
-                case 10:
-                    DefinedPacket.readVarInt( packet );
-                    break;
-                case 11:
-                    if ( packet.readBoolean() )
-                    {
-                        packet.skipBytes( 16 ); // long, long
-                    }
-                    break;
-                case 12:
-                    DefinedPacket.readVarInt( packet );
-                    break;
-                case 13:
-                    try
-                    {
-                        new NBTInputStream( new ByteBufInputStream( packet ), false ).readTag();
-                    } catch ( IOException ex )
-                    {
-                        throw Throwables.propagate( ex );
-                    }
-                    break;
-                default:
-                    throw new IllegalArgumentException( "Unknown meta type " + type );
-            }
-        }
-
-        packet.readerIndex( readerIndex );
-    }
-
-    private static void readSkipSlot(ByteBuf packet, int protocolVersion)
-    {
-        if ( (protocolVersion >= ProtocolConstants.MINECRAFT_1_13_2) ? packet.readBoolean() : packet.readShort() != -1 )
-        {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13_2 )
-            {
-                DefinedPacket.readVarInt( packet );
-            }
-            packet.skipBytes( ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 ) ? 1 : 3 ); // byte vs byte, short
-
-            int position = packet.readerIndex();
-            if ( packet.readByte() != 0 )
-            {
-                packet.readerIndex( position );
-
-                try
-                {
-                    new NBTInputStream( new ByteBufInputStream( packet ), false ).readTag();
-                } catch ( IOException ex )
-                {
-                    throw Throwables.propagate( ex );
-                }
-            }
-        }
-    }
-
-    // Handles simple packets
-    private static void rewrite(ByteBuf packet, int oldId, int newId, boolean[] ints, boolean[] varints)
-    {
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-
-        if (packetId < 0 || packetId > ints.length || packetId > varints.length) { // Invalid packet id
-            // Ignore these invalid packets for compatibility reasons
-            packet.readerIndex( readerIndex );
-            return;
-        }
-
-        if ( ints[packetId] )
-        {
-            rewriteInt( packet, oldId, newId, readerIndex + packetIdLength );
-        } else if ( varints[packetId] )
-        {
-            rewriteVarInt( packet, oldId, newId, readerIndex + packetIdLength );
-        }
-        packet.readerIndex( readerIndex );
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_10.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_10.java
deleted file mode 100644
index 1232e833..00000000
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_10.java
+++ /dev/null
@@ -1,182 +0,0 @@
-package net.md_5.bungee.entitymap;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.buffer.ByteBuf;
-import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
-
-import java.util.UUID;
-
-class EntityMap_1_10 extends EntityMap
-{
-
-    static final EntityMap_1_10 INSTANCE = new EntityMap_1_10();
-
-    EntityMap_1_10()
-    {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x2F, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x31, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x34, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3A, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x40, ProtocolConstants.Direction.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
-        addRewrite( 0x48, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x49, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
-
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x14, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
-    }
-
-    @Override
-    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteClientbound( packet, oldId, newId );
-
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-        int jumpIndex = packet.readerIndex();
-        switch ( packetId )
-        {
-            case 0x3A /* Attach Entity : PacketPlayOutAttachEntity */:
-                rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
-                break;
-            case 0x48 /* Collect Item : PacketPlayOutCollect */:
-                DefinedPacket.readVarInt( packet );
-                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                break;
-            case 0x40 /* Attach Entity : PacketPlayOutMount */:
-                DefinedPacket.readVarInt( packet );
-                jumpIndex = packet.readerIndex();
-            // Fall through on purpose to int array of IDs
-            case 0x30 /* Destroy Entities : PacketPlayOutEntityDestroy */:
-                int count = DefinedPacket.readVarInt( packet );
-                int[] ids = new int[ count ];
-                for ( int i = 0; i < count; i++ )
-                {
-                    ids[i] = DefinedPacket.readVarInt( packet );
-                }
-                packet.readerIndex( jumpIndex );
-                packet.writerIndex( jumpIndex );
-                DefinedPacket.writeVarInt( count, packet );
-                for ( int id : ids )
-                {
-                    if ( id == oldId )
-                    {
-                        id = newId;
-                    } else if ( id == newId )
-                    {
-                        id = oldId;
-                    }
-                    DefinedPacket.writeVarInt( id, packet );
-                }
-                break;
-            case 0x00 /* Spawn Object : PacketPlayOutSpawnEntity */:
-                DefinedPacket.readVarInt( packet );
-                DefinedPacket.readUUID( packet );
-                int type = packet.readUnsignedByte();
-
-                if ( type == 60 || type == 90 || type == 91 )
-                {
-                    if ( type == 60 || type == 91 )
-                    {
-                        oldId = oldId + 1;
-                        newId = newId + 1;
-                    }
-
-                    packet.skipBytes( 26 ); // double, double, double, byte, byte
-                    int position = packet.readerIndex();
-                    int readId = packet.readInt();
-                    if ( readId == oldId )
-                    {
-                        packet.setInt( position, newId );
-                    } else if ( readId == newId )
-                    {
-                        packet.setInt( position, oldId );
-                    }
-                }
-                break;
-            case 0x05 /* Spawn Player : PacketPlayOutNamedEntitySpawn */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                int idLength = packet.readerIndex() - readerIndex - packetIdLength;
-                UUID uuid = DefinedPacket.readUUID( packet );
-                ProxiedPlayer player;
-                if ( ( player = BungeeCord.getInstance().getPlayerByOfflineUUID( uuid ) ) != null )
-                {
-                    int previous = packet.writerIndex();
-                    packet.readerIndex( readerIndex );
-                    packet.writerIndex( readerIndex + packetIdLength + idLength );
-                    DefinedPacket.writeUUID( player.getUniqueId(), packet );
-                    packet.writerIndex( previous );
-                }
-                break;
-            case 0x2C /* Combat Event : PacketPlayOutCombatEvent */:
-                int event = packet.readUnsignedByte();
-                if ( event == 1 /* End Combat*/ )
-                {
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                } else if ( event == 2 /* Entity Dead */ )
-                {
-                    int position = packet.readerIndex();
-                    rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                    packet.readerIndex( position );
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                }
-                break;
-            case 0x39 /* EntityMetadata : PacketPlayOutEntityMetadata */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                rewriteMetaVarInt( packet, oldId + 1, newId + 1, 6 ); // fishing hook
-                break;
-        }
-        packet.readerIndex( readerIndex );
-    }
-
-    @Override
-    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteServerbound( packet, oldId, newId );
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-
-        if ( packetId == 0x1B /* Spectate : PacketPlayInSpectate */ && !BungeeCord.getInstance().getConfig().isIpForward() )
-        {
-            UUID uuid = DefinedPacket.readUUID( packet );
-            ProxiedPlayer player;
-            if ( ( player = BungeeCord.getInstance().getPlayer( uuid ) ) != null )
-            {
-                int previous = packet.writerIndex();
-                packet.readerIndex( readerIndex );
-                packet.writerIndex( readerIndex + packetIdLength );
-                DefinedPacket.writeUUID( ( (UserConnection) player ).getPendingConnection().getOfflineId(), packet );
-                packet.writerIndex( previous );
-            }
-        }
-        packet.readerIndex( readerIndex );
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_11.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_11.java
deleted file mode 100644
index 7048b01c..00000000
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_11.java
+++ /dev/null
@@ -1,183 +0,0 @@
-package net.md_5.bungee.entitymap;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.buffer.ByteBuf;
-import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
-
-import java.util.UUID;
-
-class EntityMap_1_11 extends EntityMap
-{
-
-    static final EntityMap_1_11 INSTANCE = new EntityMap_1_11();
-
-    EntityMap_1_11()
-    {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x2F, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x31, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x34, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3A, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x40, ProtocolConstants.Direction.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
-        addRewrite( 0x48, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x49, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
-
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x14, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
-    }
-
-    @Override
-    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteClientbound( packet, oldId, newId );
-
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-        int jumpIndex = packet.readerIndex();
-        switch ( packetId )
-        {
-            case 0x3A /* Attach Entity : PacketPlayOutAttachEntity */:
-                rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
-                break;
-            case 0x48 /* Collect Item : PacketPlayOutCollect */:
-                DefinedPacket.readVarInt( packet );
-                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                break;
-            case 0x40 /* Attach Entity : PacketPlayOutMount */:
-                DefinedPacket.readVarInt( packet );
-                jumpIndex = packet.readerIndex();
-            // Fall through on purpose to int array of IDs
-            case 0x30 /* Destroy Entities : PacketPlayOutEntityDestroy */:
-                int count = DefinedPacket.readVarInt( packet );
-                int[] ids = new int[ count ];
-                for ( int i = 0; i < count; i++ )
-                {
-                    ids[i] = DefinedPacket.readVarInt( packet );
-                }
-                packet.readerIndex( jumpIndex );
-                packet.writerIndex( jumpIndex );
-                DefinedPacket.writeVarInt( count, packet );
-                for ( int id : ids )
-                {
-                    if ( id == oldId )
-                    {
-                        id = newId;
-                    } else if ( id == newId )
-                    {
-                        id = oldId;
-                    }
-                    DefinedPacket.writeVarInt( id, packet );
-                }
-                break;
-            case 0x00 /* Spawn Object : PacketPlayOutSpawnEntity */:
-                DefinedPacket.readVarInt( packet );
-                DefinedPacket.readUUID( packet );
-                int type = packet.readUnsignedByte();
-
-                if ( type == 60 || type == 90 || type == 91 )
-                {
-                    if ( type == 60 || type == 91 )
-                    {
-                        oldId = oldId + 1;
-                        newId = newId + 1;
-                    }
-
-                    packet.skipBytes( 26 ); // double, double, double, byte, byte
-                    int position = packet.readerIndex();
-                    int readId = packet.readInt();
-                    if ( readId == oldId )
-                    {
-                        packet.setInt( position, newId );
-                    } else if ( readId == newId )
-                    {
-                        packet.setInt( position, oldId );
-                    }
-                }
-                break;
-            case 0x05 /* Spawn Player : PacketPlayOutNamedEntitySpawn */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                int idLength = packet.readerIndex() - readerIndex - packetIdLength;
-                UUID uuid = DefinedPacket.readUUID( packet );
-                ProxiedPlayer player;
-                if ( ( player = BungeeCord.getInstance().getPlayerByOfflineUUID( uuid ) ) != null )
-                {
-                    int previous = packet.writerIndex();
-                    packet.readerIndex( readerIndex );
-                    packet.writerIndex( readerIndex + packetIdLength + idLength );
-                    DefinedPacket.writeUUID( player.getUniqueId(), packet );
-                    packet.writerIndex( previous );
-                }
-                break;
-            case 0x2C /* Combat Event : PacketPlayOutCombatEvent */:
-                int event = packet.readUnsignedByte();
-                if ( event == 1 /* End Combat*/ )
-                {
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                } else if ( event == 2 /* Entity Dead */ )
-                {
-                    int position = packet.readerIndex();
-                    rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                    packet.readerIndex( position );
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                }
-                break;
-            case 0x39 /* EntityMetadata : PacketPlayOutEntityMetadata */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                rewriteMetaVarInt( packet, oldId + 1, newId + 1, 6 ); // fishing hook
-                rewriteMetaVarInt( packet, oldId, newId, 7 ); // fireworks (et al)
-                break;
-        }
-        packet.readerIndex( readerIndex );
-    }
-
-    @Override
-    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteServerbound( packet, oldId, newId );
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-
-        if ( packetId == 0x1B /* Spectate : PacketPlayInSpectate */ && !BungeeCord.getInstance().getConfig().isIpForward() )
-        {
-            UUID uuid = DefinedPacket.readUUID( packet );
-            ProxiedPlayer player;
-            if ( ( player = BungeeCord.getInstance().getPlayer( uuid ) ) != null )
-            {
-                int previous = packet.writerIndex();
-                packet.readerIndex( readerIndex );
-                packet.writerIndex( readerIndex + packetIdLength );
-                DefinedPacket.writeUUID( ( (UserConnection) player ).getPendingConnection().getOfflineId(), packet );
-                packet.writerIndex( previous );
-            }
-        }
-        packet.readerIndex( readerIndex );
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12.java
deleted file mode 100644
index 2152f94c..00000000
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12.java
+++ /dev/null
@@ -1,183 +0,0 @@
-package net.md_5.bungee.entitymap;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.buffer.ByteBuf;
-import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
-
-import java.util.UUID;
-
-class EntityMap_1_12 extends EntityMap
-{
-
-    static final EntityMap_1_12 INSTANCE = new EntityMap_1_12();
-
-    EntityMap_1_12()
-    {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x2F, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x32, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x35, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x38, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3D, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3E, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x42, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
-        addRewrite( 0x4A, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4D, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4E, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
-
-        addRewrite( 0x0B, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x15, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
-    }
-
-    @Override
-    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteClientbound( packet, oldId, newId );
-
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-        int jumpIndex = packet.readerIndex();
-        switch ( packetId )
-        {
-            case 0x3C /* Attach Entity : PacketPlayOutAttachEntity */:
-                rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
-                break;
-            case 0x4A /* Collect Item : PacketPlayOutCollect */:
-                DefinedPacket.readVarInt( packet );
-                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                break;
-            case 0x42 /* Attach Entity : PacketPlayOutMount */:
-                DefinedPacket.readVarInt( packet );
-                jumpIndex = packet.readerIndex();
-            // Fall through on purpose to int array of IDs
-            case 0x31 /* Destroy Entities : PacketPlayOutEntityDestroy */:
-                int count = DefinedPacket.readVarInt( packet );
-                int[] ids = new int[ count ];
-                for ( int i = 0; i < count; i++ )
-                {
-                    ids[i] = DefinedPacket.readVarInt( packet );
-                }
-                packet.readerIndex( jumpIndex );
-                packet.writerIndex( jumpIndex );
-                DefinedPacket.writeVarInt( count, packet );
-                for ( int id : ids )
-                {
-                    if ( id == oldId )
-                    {
-                        id = newId;
-                    } else if ( id == newId )
-                    {
-                        id = oldId;
-                    }
-                    DefinedPacket.writeVarInt( id, packet );
-                }
-                break;
-            case 0x00 /* Spawn Object : PacketPlayOutSpawnEntity */:
-                DefinedPacket.readVarInt( packet );
-                DefinedPacket.readUUID( packet );
-                int type = packet.readUnsignedByte();
-
-                if ( type == 60 || type == 90 || type == 91 )
-                {
-                    if ( type == 60 || type == 91 )
-                    {
-                        oldId = oldId + 1;
-                        newId = newId + 1;
-                    }
-
-                    packet.skipBytes( 26 ); // double, double, double, byte, byte
-                    int position = packet.readerIndex();
-                    int readId = packet.readInt();
-                    if ( readId == oldId )
-                    {
-                        packet.setInt( position, newId );
-                    } else if ( readId == newId )
-                    {
-                        packet.setInt( position, oldId );
-                    }
-                }
-                break;
-            case 0x05 /* Spawn Player : PacketPlayOutNamedEntitySpawn */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                int idLength = packet.readerIndex() - readerIndex - packetIdLength;
-                UUID uuid = DefinedPacket.readUUID( packet );
-                ProxiedPlayer player;
-                if ( ( player = BungeeCord.getInstance().getPlayerByOfflineUUID( uuid ) ) != null )
-                {
-                    int previous = packet.writerIndex();
-                    packet.readerIndex( readerIndex );
-                    packet.writerIndex( readerIndex + packetIdLength + idLength );
-                    DefinedPacket.writeUUID( player.getUniqueId(), packet );
-                    packet.writerIndex( previous );
-                }
-                break;
-            case 0x2C /* Combat Event : PacketPlayOutCombatEvent */:
-                int event = packet.readUnsignedByte();
-                if ( event == 1 /* End Combat*/ )
-                {
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                } else if ( event == 2 /* Entity Dead */ )
-                {
-                    int position = packet.readerIndex();
-                    rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                    packet.readerIndex( position );
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                }
-                break;
-            case 0x3B /* EntityMetadata : PacketPlayOutEntityMetadata */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                rewriteMetaVarInt( packet, oldId + 1, newId + 1, 6 ); // fishing hook
-                rewriteMetaVarInt( packet, oldId, newId, 7 ); // fireworks (et al)
-                break;
-        }
-        packet.readerIndex( readerIndex );
-    }
-
-    @Override
-    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteServerbound( packet, oldId, newId );
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-
-        if ( packetId == 0x1E /* Spectate : PacketPlayInSpectate */ && !BungeeCord.getInstance().getConfig().isIpForward() )
-        {
-            UUID uuid = DefinedPacket.readUUID( packet );
-            ProxiedPlayer player;
-            if ( ( player = BungeeCord.getInstance().getPlayer( uuid ) ) != null )
-            {
-                int previous = packet.writerIndex();
-                packet.readerIndex( readerIndex );
-                packet.writerIndex( readerIndex + packetIdLength );
-                DefinedPacket.writeUUID( ( (UserConnection) player ).getPendingConnection().getOfflineId(), packet );
-                packet.writerIndex( previous );
-            }
-        }
-        packet.readerIndex( readerIndex );
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12_1.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12_1.java
deleted file mode 100644
index d8901eb7..00000000
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12_1.java
+++ /dev/null
@@ -1,183 +0,0 @@
-package net.md_5.bungee.entitymap;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.buffer.ByteBuf;
-import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
-
-import java.util.UUID;
-
-class EntityMap_1_12_1 extends EntityMap
-{
-
-    static final EntityMap_1_12_1 INSTANCE = new EntityMap_1_12_1();
-
-    EntityMap_1_12_1()
-    {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x30, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x33, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3D, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3E, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3F, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x43, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x4C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4E, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4F, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
-
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x15, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
-    }
-
-    @Override
-    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteClientbound( packet, oldId, newId );
-
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-        int jumpIndex = packet.readerIndex();
-        switch ( packetId )
-        {
-            case 0x3D /* Attach Entity : PacketPlayOutAttachEntity */:
-                rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
-                break;
-            case 0x4B /* Collect Item : PacketPlayOutCollect */:
-                DefinedPacket.readVarInt( packet );
-                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                break;
-            case 0x43 /* Attach Entity : PacketPlayOutMount */:
-                DefinedPacket.readVarInt( packet );
-                jumpIndex = packet.readerIndex();
-            // Fall through on purpose to int array of IDs
-            case 0x32 /* Destroy Entities : PacketPlayOutEntityDestroy */:
-                int count = DefinedPacket.readVarInt( packet );
-                int[] ids = new int[ count ];
-                for ( int i = 0; i < count; i++ )
-                {
-                    ids[i] = DefinedPacket.readVarInt( packet );
-                }
-                packet.readerIndex( jumpIndex );
-                packet.writerIndex( jumpIndex );
-                DefinedPacket.writeVarInt( count, packet );
-                for ( int id : ids )
-                {
-                    if ( id == oldId )
-                    {
-                        id = newId;
-                    } else if ( id == newId )
-                    {
-                        id = oldId;
-                    }
-                    DefinedPacket.writeVarInt( id, packet );
-                }
-                break;
-            case 0x00 /* Spawn Object : PacketPlayOutSpawnEntity */:
-                DefinedPacket.readVarInt( packet );
-                DefinedPacket.readUUID( packet );
-                int type = packet.readUnsignedByte();
-
-                if ( type == 60 || type == 90 || type == 91 )
-                {
-                    if ( type == 60 || type == 91 )
-                    {
-                        oldId = oldId + 1;
-                        newId = newId + 1;
-                    }
-
-                    packet.skipBytes( 26 ); // double, double, double, byte, byte
-                    int position = packet.readerIndex();
-                    int readId = packet.readInt();
-                    if ( readId == oldId )
-                    {
-                        packet.setInt( position, newId );
-                    } else if ( readId == newId )
-                    {
-                        packet.setInt( position, oldId );
-                    }
-                }
-                break;
-            case 0x05 /* Spawn Player : PacketPlayOutNamedEntitySpawn */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                int idLength = packet.readerIndex() - readerIndex - packetIdLength;
-                UUID uuid = DefinedPacket.readUUID( packet );
-                ProxiedPlayer player;
-                if ( ( player = BungeeCord.getInstance().getPlayerByOfflineUUID( uuid ) ) != null )
-                {
-                    int previous = packet.writerIndex();
-                    packet.readerIndex( readerIndex );
-                    packet.writerIndex( readerIndex + packetIdLength + idLength );
-                    DefinedPacket.writeUUID( player.getUniqueId(), packet );
-                    packet.writerIndex( previous );
-                }
-                break;
-            case 0x2D /* Combat Event : PacketPlayOutCombatEvent */:
-                int event = packet.readUnsignedByte();
-                if ( event == 1 /* End Combat*/ )
-                {
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                } else if ( event == 2 /* Entity Dead */ )
-                {
-                    int position = packet.readerIndex();
-                    rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                    packet.readerIndex( position );
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                }
-                break;
-            case 0x3C /* EntityMetadata : PacketPlayOutEntityMetadata */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                rewriteMetaVarInt( packet, oldId + 1, newId + 1, 6 ); // fishing hook
-                rewriteMetaVarInt( packet, oldId, newId, 7 ); // fireworks (et al)
-                break;
-        }
-        packet.readerIndex( readerIndex );
-    }
-
-    @Override
-    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteServerbound( packet, oldId, newId );
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-
-        if ( packetId == 0x1E /* Spectate : PacketPlayInSpectate */ && !BungeeCord.getInstance().getConfig().isIpForward() )
-        {
-            UUID uuid = DefinedPacket.readUUID( packet );
-            ProxiedPlayer player;
-            if ( ( player = BungeeCord.getInstance().getPlayer( uuid ) ) != null )
-            {
-                int previous = packet.writerIndex();
-                packet.readerIndex( readerIndex );
-                packet.writerIndex( readerIndex + packetIdLength );
-                DefinedPacket.writeUUID( ( (UserConnection) player ).getPendingConnection().getOfflineId(), packet );
-                packet.writerIndex( previous );
-            }
-        }
-        packet.readerIndex( readerIndex );
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_13.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_13.java
deleted file mode 100644
index 3d474dbb..00000000
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_13.java
+++ /dev/null
@@ -1,183 +0,0 @@
-package net.md_5.bungee.entitymap;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.buffer.ByteBuf;
-import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
-
-import java.util.UUID;
-
-class EntityMap_1_13 extends EntityMap
-{
-
-    static final EntityMap_1_13 INSTANCE = new EntityMap_1_13();
-
-    EntityMap_1_13()
-    {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1C, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x29, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x2A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x33, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x3F, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x40, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x41, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x42, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x46, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
-        addRewrite( 0x4F, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x50, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x52, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x53, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
-
-        addRewrite( 0x0D, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x19, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
-    }
-
-    @Override
-    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId, int protocolVersion)
-    {
-        super.rewriteClientbound( packet, oldId, newId );
-
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-        int jumpIndex = packet.readerIndex();
-        switch ( packetId )
-        {
-            case 0x40 /* Attach Entity : PacketPlayOutAttachEntity */:
-                rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
-                break;
-            case 0x4F /* Collect Item : PacketPlayOutCollect */:
-                DefinedPacket.readVarInt( packet );
-                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                break;
-            case 0x46 /* Set Passengers : PacketPlayOutMount */:
-                DefinedPacket.readVarInt( packet );
-                jumpIndex = packet.readerIndex();
-            // Fall through on purpose to int array of IDs
-            case 0x35 /* Destroy Entities : PacketPlayOutEntityDestroy */:
-                int count = DefinedPacket.readVarInt( packet );
-                int[] ids = new int[ count ];
-                for ( int i = 0; i < count; i++ )
-                {
-                    ids[i] = DefinedPacket.readVarInt( packet );
-                }
-                packet.readerIndex( jumpIndex );
-                packet.writerIndex( jumpIndex );
-                DefinedPacket.writeVarInt( count, packet );
-                for ( int id : ids )
-                {
-                    if ( id == oldId )
-                    {
-                        id = newId;
-                    } else if ( id == newId )
-                    {
-                        id = oldId;
-                    }
-                    DefinedPacket.writeVarInt( id, packet );
-                }
-                break;
-            case 0x00 /* Spawn Object : PacketPlayOutSpawnEntity */:
-                DefinedPacket.readVarInt( packet );
-                DefinedPacket.readUUID( packet );
-                int type = packet.readUnsignedByte();
-
-                if ( type == 60 || type == 90 || type == 91 )
-                {
-                    if ( type == 60 || type == 91 )
-                    {
-                        oldId = oldId + 1;
-                        newId = newId + 1;
-                    }
-
-                    packet.skipBytes( 26 ); // double, double, double, byte, byte
-                    int position = packet.readerIndex();
-                    int readId = packet.readInt();
-                    if ( readId == oldId )
-                    {
-                        packet.setInt( position, newId );
-                    } else if ( readId == newId )
-                    {
-                        packet.setInt( position, oldId );
-                    }
-                }
-                break;
-            case 0x05 /* Spawn Player : PacketPlayOutNamedEntitySpawn */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                int idLength = packet.readerIndex() - readerIndex - packetIdLength;
-                UUID uuid = DefinedPacket.readUUID( packet );
-                ProxiedPlayer player;
-                if ( ( player = BungeeCord.getInstance().getPlayerByOfflineUUID( uuid ) ) != null )
-                {
-                    int previous = packet.writerIndex();
-                    packet.readerIndex( readerIndex );
-                    packet.writerIndex( readerIndex + packetIdLength + idLength );
-                    DefinedPacket.writeUUID( player.getUniqueId(), packet );
-                    packet.writerIndex( previous );
-                }
-                break;
-            case 0x2F /* Combat Event : PacketPlayOutCombatEvent */:
-                int event = packet.readUnsignedByte();
-                if ( event == 1 /* End Combat*/ )
-                {
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                } else if ( event == 2 /* Entity Dead */ )
-                {
-                    int position = packet.readerIndex();
-                    rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                    packet.readerIndex( position );
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                }
-                break;
-            case 0x3F /* EntityMetadata : PacketPlayOutEntityMetadata */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                rewriteMetaVarInt( packet, oldId + 1, newId + 1, 6, protocolVersion ); // fishing hook
-                rewriteMetaVarInt( packet, oldId, newId, 7, protocolVersion ); // fireworks (et al)
-                break;
-        }
-        packet.readerIndex( readerIndex );
-    }
-
-    @Override
-    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteServerbound( packet, oldId, newId );
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-
-        if ( packetId == 0x28 /* Spectate : PacketPlayInSpectate */ && !BungeeCord.getInstance().getConfig().isIpForward() )
-        {
-            UUID uuid = DefinedPacket.readUUID( packet );
-            ProxiedPlayer player;
-            if ( ( player = BungeeCord.getInstance().getPlayer( uuid ) ) != null )
-            {
-                int previous = packet.writerIndex();
-                packet.readerIndex( readerIndex );
-                packet.writerIndex( readerIndex + packetIdLength );
-                DefinedPacket.writeUUID( ( (UserConnection) player ).getPendingConnection().getOfflineId(), packet );
-                packet.writerIndex( previous );
-            }
-        }
-        packet.readerIndex( readerIndex );
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_8.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_8.java
deleted file mode 100644
index 4229fefa..00000000
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_8.java
+++ /dev/null
@@ -1,176 +0,0 @@
-package net.md_5.bungee.entitymap;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.buffer.ByteBuf;
-import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
-import java.util.UUID;
-
-class EntityMap_1_8 extends EntityMap
-{
-
-    static final EntityMap_1_8 INSTANCE = new EntityMap_1_8();
-
-    EntityMap_1_8()
-    {
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed
-        addRewrite( 0x0B, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation
-        addRewrite( 0x0C, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player
-        addRewrite( 0x0D, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item
-        addRewrite( 0x0E, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object
-        addRewrite( 0x0F, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob
-        addRewrite( 0x10, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting
-        addRewrite( 0x11, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb
-        addRewrite( 0x12, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity
-        addRewrite( 0x14, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity
-        addRewrite( 0x15, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move
-        addRewrite( 0x16, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look
-        addRewrite( 0x17, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move
-        addRewrite( 0x18, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport
-        addRewrite( 0x19, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look
-        addRewrite( 0x1A, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity
-        addRewrite( 0x1C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata
-        addRewrite( 0x1D, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect
-        addRewrite( 0x1E, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect
-        addRewrite( 0x20, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation
-        addRewrite( 0x2C, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Global Entity
-        addRewrite( 0x43, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera
-        addRewrite( 0x49, ProtocolConstants.Direction.TO_CLIENT, true ); // Update Entity NBT
-
-        addRewrite( 0x02, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity
-        addRewrite( 0x0B, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action
-    }
-
-    @Override
-    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteClientbound( packet, oldId, newId );
-
-        //Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-        if ( packetId == 0x0D /* Collect Item */ )
-        {
-            DefinedPacket.readVarInt( packet );
-            rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-        } else if ( packetId == 0x1B /* Attach Entity */ )
-        {
-            rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
-        } else if ( packetId == 0x13 /* Destroy Entities */ )
-        {
-            int count = DefinedPacket.readVarInt( packet );
-            int[] ids = new int[ count ];
-            for ( int i = 0; i < count; i++ )
-            {
-                ids[i] = DefinedPacket.readVarInt( packet );
-            }
-            packet.readerIndex( readerIndex + packetIdLength );
-            packet.writerIndex( readerIndex + packetIdLength );
-            DefinedPacket.writeVarInt( count, packet );
-            for ( int id : ids )
-            {
-                if ( id == oldId )
-                {
-                    id = newId;
-                } else if ( id == newId )
-                {
-                    id = oldId;
-                }
-                DefinedPacket.writeVarInt( id, packet );
-            }
-        } else if ( packetId == 0x0E /* Spawn Object */ )
-        {
-
-            DefinedPacket.readVarInt( packet );
-            int type = packet.readUnsignedByte();
-
-            if ( type == 60 || type == 90 )
-            {
-                packet.skipBytes( 14 );
-                int position = packet.readerIndex();
-                int readId = packet.readInt();
-                int changedId = readId;
-
-                if ( readId == oldId )
-                {
-                    packet.setInt( position, changedId = newId );
-                } else if ( readId == newId )
-                {
-                    packet.setInt( position, changedId = oldId );
-                }
-
-                if ( readId > 0 && changedId <= 0 )
-                {
-                    packet.writerIndex( packet.writerIndex() - 6 );
-                } else if ( changedId > 0 && readId <= 0 )
-                {
-                    packet.ensureWritable( 6 );
-                    packet.writerIndex( packet.writerIndex() + 6 );
-                }
-            }
-        } else if ( packetId == 0x0C /* Spawn Player */ )
-        {
-            DefinedPacket.readVarInt( packet ); // Entity ID
-            int idLength = packet.readerIndex() - readerIndex - packetIdLength;
-            UUID uuid = DefinedPacket.readUUID( packet );
-            ProxiedPlayer player;
-            if ( ( player = BungeeCord.getInstance().getPlayerByOfflineUUID( uuid ) ) != null )
-            {
-                int previous = packet.writerIndex();
-                packet.readerIndex( readerIndex );
-                packet.writerIndex( readerIndex + packetIdLength + idLength );
-                DefinedPacket.writeUUID( player.getUniqueId(), packet );
-                packet.writerIndex( previous );
-            }
-        } else if ( packetId == 0x42 /* Combat Event */ )
-        {
-            int event = packet.readUnsignedByte();
-            if ( event == 1 /* End Combat*/ )
-            {
-                DefinedPacket.readVarInt( packet );
-                rewriteInt( packet, oldId, newId, packet.readerIndex() );
-            } else if ( event == 2 /* Entity Dead */ )
-            {
-                int position = packet.readerIndex();
-                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                packet.readerIndex( position );
-                DefinedPacket.readVarInt( packet );
-                rewriteInt( packet, oldId, newId, packet.readerIndex() );
-            }
-        }
-        packet.readerIndex( readerIndex );
-    }
-
-    @Override
-    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteServerbound( packet, oldId, newId );
-        //Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-
-        if ( packetId == 0x18 /* Spectate */ && !BungeeCord.getInstance().getConfig().isIpForward() )
-        {
-            UUID uuid = DefinedPacket.readUUID( packet );
-            ProxiedPlayer player;
-            if ( ( player = BungeeCord.getInstance().getPlayer( uuid ) ) != null )
-            {
-                int previous = packet.writerIndex();
-                packet.readerIndex( readerIndex );
-                packet.writerIndex( readerIndex + packetIdLength );
-                DefinedPacket.writeUUID( ( (UserConnection) player ).getPendingConnection().getOfflineId(), packet );
-                packet.writerIndex( previous );
-            }
-        }
-        packet.readerIndex( readerIndex );
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9.java
deleted file mode 100644
index 55b65774..00000000
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9.java
+++ /dev/null
@@ -1,182 +0,0 @@
-package net.md_5.bungee.entitymap;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.buffer.ByteBuf;
-import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
-
-import java.util.UUID;
-
-class EntityMap_1_9 extends EntityMap
-{
-
-    static final EntityMap_1_9 INSTANCE = new EntityMap_1_9();
-
-    EntityMap_1_9()
-    {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x2F, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x31, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x34, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3A, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x40, ProtocolConstants.Direction.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
-        addRewrite( 0x49, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x4A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
-
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x14, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
-    }
-
-    @Override
-    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteClientbound( packet, oldId, newId );
-
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-        int jumpIndex = packet.readerIndex();
-        switch ( packetId )
-        {
-            case 0x3A /* Attach Entity : PacketPlayOutAttachEntity */:
-                rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
-                break;
-            case 0x49 /* Collect Item : PacketPlayOutCollect */:
-                DefinedPacket.readVarInt( packet );
-                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                break;
-            case 0x40 /* Attach Entity : PacketPlayOutMount */:
-                DefinedPacket.readVarInt( packet );
-                jumpIndex = packet.readerIndex();
-            // Fall through on purpose to int array of IDs
-            case 0x30 /* Destroy Entities : PacketPlayOutEntityDestroy */:
-                int count = DefinedPacket.readVarInt( packet );
-                int[] ids = new int[ count ];
-                for ( int i = 0; i < count; i++ )
-                {
-                    ids[i] = DefinedPacket.readVarInt( packet );
-                }
-                packet.readerIndex( jumpIndex );
-                packet.writerIndex( jumpIndex );
-                DefinedPacket.writeVarInt( count, packet );
-                for ( int id : ids )
-                {
-                    if ( id == oldId )
-                    {
-                        id = newId;
-                    } else if ( id == newId )
-                    {
-                        id = oldId;
-                    }
-                    DefinedPacket.writeVarInt( id, packet );
-                }
-                break;
-            case 0x00 /* Spawn Object : PacketPlayOutSpawnEntity */:
-                DefinedPacket.readVarInt( packet );
-                DefinedPacket.readUUID( packet );
-                int type = packet.readUnsignedByte();
-
-                if ( type == 60 || type == 90 || type == 91 )
-                {
-                    if ( type == 60 || type == 91 )
-                    {
-                        oldId = oldId + 1;
-                        newId = newId + 1;
-                    }
-
-                    packet.skipBytes( 26 ); // double, double, double, byte, byte
-                    int position = packet.readerIndex();
-                    int readId = packet.readInt();
-                    if ( readId == oldId )
-                    {
-                        packet.setInt( position, newId );
-                    } else if ( readId == newId )
-                    {
-                        packet.setInt( position, oldId );
-                    }
-                }
-                break;
-            case 0x05 /* Spawn Player : PacketPlayOutNamedEntitySpawn */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                int idLength = packet.readerIndex() - readerIndex - packetIdLength;
-                UUID uuid = DefinedPacket.readUUID( packet );
-                ProxiedPlayer player;
-                if ( ( player = BungeeCord.getInstance().getPlayerByOfflineUUID( uuid ) ) != null )
-                {
-                    int previous = packet.writerIndex();
-                    packet.readerIndex( readerIndex );
-                    packet.writerIndex( readerIndex + packetIdLength + idLength );
-                    DefinedPacket.writeUUID( player.getUniqueId(), packet );
-                    packet.writerIndex( previous );
-                }
-                break;
-            case 0x2C /* Combat Event : PacketPlayOutCombatEvent */:
-                int event = packet.readUnsignedByte();
-                if ( event == 1 /* End Combat*/ )
-                {
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                } else if ( event == 2 /* Entity Dead */ )
-                {
-                    int position = packet.readerIndex();
-                    rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                    packet.readerIndex( position );
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                }
-                break;
-            case 0x39 /* EntityMetadata : PacketPlayOutEntityMetadata */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                rewriteMetaVarInt( packet, oldId + 1, newId + 1, 5 ); // fishing hook
-                break;
-        }
-        packet.readerIndex( readerIndex );
-    }
-
-    @Override
-    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteServerbound( packet, oldId, newId );
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-
-        if ( packetId == 0x1B /* Spectate : PacketPlayInSpectate */ && !BungeeCord.getInstance().getConfig().isIpForward() )
-        {
-            UUID uuid = DefinedPacket.readUUID( packet );
-            ProxiedPlayer player;
-            if ( ( player = BungeeCord.getInstance().getPlayer( uuid ) ) != null )
-            {
-                int previous = packet.writerIndex();
-                packet.readerIndex( readerIndex );
-                packet.writerIndex( readerIndex + packetIdLength );
-                DefinedPacket.writeUUID( ( (UserConnection) player ).getPendingConnection().getOfflineId(), packet );
-                packet.writerIndex( previous );
-            }
-        }
-        packet.readerIndex( readerIndex );
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9_4.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9_4.java
deleted file mode 100644
index 3d41025f..00000000
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9_4.java
+++ /dev/null
@@ -1,182 +0,0 @@
-package net.md_5.bungee.entitymap;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.buffer.ByteBuf;
-import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
-
-import java.util.UUID;
-
-class EntityMap_1_9_4 extends EntityMap
-{
-
-    static final EntityMap_1_9_4 INSTANCE = new EntityMap_1_9_4();
-
-    EntityMap_1_9_4()
-    {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x2F, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x31, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x34, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3A, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x40, ProtocolConstants.Direction.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
-        addRewrite( 0x48, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x49, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
-
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x14, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
-    }
-
-    @Override
-    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteClientbound( packet, oldId, newId );
-
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-        int jumpIndex = packet.readerIndex();
-        switch ( packetId )
-        {
-            case 0x3A /* Attach Entity : PacketPlayOutAttachEntity */:
-                rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
-                break;
-            case 0x48 /* Collect Item : PacketPlayOutCollect */:
-                DefinedPacket.readVarInt( packet );
-                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                break;
-            case 0x40 /* Attach Entity : PacketPlayOutMount */:
-                DefinedPacket.readVarInt( packet );
-                jumpIndex = packet.readerIndex();
-            // Fall through on purpose to int array of IDs
-            case 0x30 /* Destroy Entities : PacketPlayOutEntityDestroy */:
-                int count = DefinedPacket.readVarInt( packet );
-                int[] ids = new int[ count ];
-                for ( int i = 0; i < count; i++ )
-                {
-                    ids[i] = DefinedPacket.readVarInt( packet );
-                }
-                packet.readerIndex( jumpIndex );
-                packet.writerIndex( jumpIndex );
-                DefinedPacket.writeVarInt( count, packet );
-                for ( int id : ids )
-                {
-                    if ( id == oldId )
-                    {
-                        id = newId;
-                    } else if ( id == newId )
-                    {
-                        id = oldId;
-                    }
-                    DefinedPacket.writeVarInt( id, packet );
-                }
-                break;
-            case 0x00 /* Spawn Object : PacketPlayOutSpawnEntity */:
-                DefinedPacket.readVarInt( packet );
-                DefinedPacket.readUUID( packet );
-                int type = packet.readUnsignedByte();
-
-                if ( type == 60 || type == 90 || type == 91 )
-                {
-                    if ( type == 60 || type == 91 )
-                    {
-                        oldId = oldId + 1;
-                        newId = newId + 1;
-                    }
-
-                    packet.skipBytes( 26 ); // double, double, double, byte, byte
-                    int position = packet.readerIndex();
-                    int readId = packet.readInt();
-                    if ( readId == oldId )
-                    {
-                        packet.setInt( position, newId );
-                    } else if ( readId == newId )
-                    {
-                        packet.setInt( position, oldId );
-                    }
-                }
-                break;
-            case 0x05 /* Spawn Player : PacketPlayOutNamedEntitySpawn */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                int idLength = packet.readerIndex() - readerIndex - packetIdLength;
-                UUID uuid = DefinedPacket.readUUID( packet );
-                ProxiedPlayer player;
-                if ( ( player = BungeeCord.getInstance().getPlayerByOfflineUUID( uuid ) ) != null )
-                {
-                    int previous = packet.writerIndex();
-                    packet.readerIndex( readerIndex );
-                    packet.writerIndex( readerIndex + packetIdLength + idLength );
-                    DefinedPacket.writeUUID( player.getUniqueId(), packet );
-                    packet.writerIndex( previous );
-                }
-                break;
-            case 0x2C /* Combat Event : PacketPlayOutCombatEvent */:
-                int event = packet.readUnsignedByte();
-                if ( event == 1 /* End Combat*/ )
-                {
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                } else if ( event == 2 /* Entity Dead */ )
-                {
-                    int position = packet.readerIndex();
-                    rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
-                    packet.readerIndex( position );
-                    DefinedPacket.readVarInt( packet );
-                    rewriteInt( packet, oldId, newId, packet.readerIndex() );
-                }
-                break;
-            case 0x39 /* EntityMetadata : PacketPlayOutEntityMetadata */:
-                DefinedPacket.readVarInt( packet ); // Entity ID
-                rewriteMetaVarInt( packet, oldId + 1, newId + 1, 5 ); // fishing hook
-                break;
-        }
-        packet.readerIndex( readerIndex );
-    }
-
-    @Override
-    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteServerbound( packet, oldId, newId );
-        // Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-
-        if ( packetId == 0x1B /* Spectate : PacketPlayInSpectate */ && !BungeeCord.getInstance().getConfig().isIpForward() )
-        {
-            UUID uuid = DefinedPacket.readUUID( packet );
-            ProxiedPlayer player;
-            if ( ( player = BungeeCord.getInstance().getPlayer( uuid ) ) != null )
-            {
-                int previous = packet.writerIndex();
-                packet.readerIndex( readerIndex );
-                packet.writerIndex( readerIndex + packetIdLength );
-                DefinedPacket.writeUUID( ( (UserConnection) player ).getPendingConnection().getOfflineId(), packet );
-                packet.writerIndex( previous );
-            }
-        }
-        packet.readerIndex( readerIndex );
-    }
-}
-- 
2.19.1.windows.1

