From 321fa344d87ea259c18703dda0ed2f894c6ee783 Mon Sep 17 00:00:00 2001
From: Callum Seabrook <callum.seabrook@prevarinite.com>
Date: Wed, 28 Apr 2021 17:02:18 +0100
Subject: [PATCH] Adventure


diff --git a/api/pom.xml b/api/pom.xml
index ca1ed881..c53ad692 100644
--- a/api/pom.xml
+++ b/api/pom.xml
@@ -18,6 +18,28 @@
     <name>Waterfall-API</name>
     <description>API implemented by the Elastic Portal Suite</description>
 
+    <!-- Waterfall start - add snapshot repository for Adventure's BungeeCord serializer and add BOM -->
+    <repositories>
+        <!-- Waterfall - Add repository required for Adventure's BungeeCord serializer -->
+        <repository>
+            <id>sonatype-oss-snapshots</id>
+            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
+        </repository>
+    </repositories>
+
+    <dependencyManagement>
+        <dependencies>
+            <dependency>
+                <groupId>net.kyori</groupId>
+                <artifactId>adventure-bom</artifactId>
+                <version>4.7.0</version>
+                <type>pom</type>
+                <scope>import</scope>
+            </dependency>
+        </dependencies>
+    </dependencyManagement>
+    <!-- Waterfall end -->
+
     <dependencies>
         <dependency>
             <groupId>io.github.waterfallmc</groupId>
@@ -82,5 +104,24 @@
             <artifactId>slf4j-api</artifactId>
             <version>1.7.25</version>
         </dependency>
+        <!-- Waterfall start - Add Adventure -->
+        <dependency>
+            <groupId>net.kyori</groupId>
+            <artifactId>adventure-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>net.kyori</groupId>
+            <artifactId>adventure-text-serializer-gson</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>net.kyori</groupId>
+            <artifactId>adventure-text-serializer-legacy</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>net.kyori</groupId>
+            <artifactId>adventure-text-serializer-bungeecord</artifactId>
+            <version>4.0.0-SNAPSHOT</version>
+        </dependency>
+        <!-- Waterfall end -->
     </dependencies>
 </project>
diff --git a/api/src/main/java/net/md_5/bungee/api/CommandSender.java b/api/src/main/java/net/md_5/bungee/api/CommandSender.java
index d5888311..d03dae0c 100644
--- a/api/src/main/java/net/md_5/bungee/api/CommandSender.java
+++ b/api/src/main/java/net/md_5/bungee/api/CommandSender.java
@@ -3,7 +3,7 @@ package net.md_5.bungee.api;
 import java.util.Collection;
 import net.md_5.bungee.api.chat.BaseComponent;
 
-public interface CommandSender
+public interface CommandSender extends net.kyori.adventure.audience.Audience // Waterfall - we're going on an adventure!
 {
 
     /**
@@ -34,14 +34,18 @@ public interface CommandSender
      * Send a message to this sender.
      *
      * @param message the message to send
+     * @deprecated in favour of {@link net.kyori.adventure.audience.Audience#sendMessage(net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     public void sendMessage(BaseComponent... message);
 
     /**
      * Send a message to this sender.
      *
      * @param message the message to send
+     * @deprecated in favour of {@link net.kyori.adventure.audience.Audience#sendMessage(net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     public void sendMessage(BaseComponent message);
 
     /**
diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index a4011335..e26ca56d 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -17,7 +17,7 @@ import net.md_5.bungee.api.plugin.Plugin;
 import net.md_5.bungee.api.plugin.PluginManager;
 import net.md_5.bungee.api.scheduler.TaskScheduler;
 
-public abstract class ProxyServer
+public abstract class ProxyServer implements net.kyori.adventure.audience.ForwardingAudience // Waterfall - We're going on an adventure!
 {
 
     @Getter
@@ -170,9 +170,20 @@ public abstract class ProxyServer
      * Gracefully mark this instance for shutdown.
      *
      * @param reason the reason for stopping. This will be shown to players.
+     * @deprecated in favour of {@link #stop(net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     public abstract void stop(String reason);
 
+    // Waterfall start - we're going on an adventure!
+    /**
+     * Gracefully mark this instance for shutdown.
+     *
+     * @param reason the reason for stopping. This will be shown to players.
+     */
+    public abstract void stop(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component reason);
+    // Waterfall end
+
     /**
      * Register a channel for use with plugin messages. This is required by some
      * server / client implementations.
@@ -220,9 +231,25 @@ public abstract class ProxyServer
      * @param motd the motd when used as a forced server
      * @param restricted whether the server info restricted property will be set
      * @return the constructed instance
+     * @deprecated in favour of {@link #constructServerInfo(String, InetSocketAddress, net.kyori.adventure.text.Component, boolean)}
      */
+    @Deprecated // Waterfall
     public abstract ServerInfo constructServerInfo(String name, InetSocketAddress address, String motd, boolean restricted);
 
+    // Waterfall start - we're going on an adventure!
+    /**
+     * Factory method to construct an implementation specific server info
+     * instance.
+     *
+     * @param name the name of the server
+     * @param address the address that can be used to connect to the server
+     * @param motd the motd when used as a forced host
+     * @param restricted whether the server will be restricted or not
+     * @return the constructed instance
+     */
+    public abstract @org.checkerframework.checker.nullness.qual.NonNull ServerInfo constructServerInfo(final @org.checkerframework.checker.nullness.qual.NonNull String name, final @org.checkerframework.checker.nullness.qual.NonNull InetSocketAddress address, final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component motd, final boolean restricted);
+    // Waterfall end
+
     /**
      * Factory method to construct an implementation specific server info
      * instance.
@@ -232,9 +259,25 @@ public abstract class ProxyServer
      * @param motd the motd when used as a forced server
      * @param restricted whether the server info restricted property will be set
      * @return the constructed instance
+     * @deprecated in favour of {@link #constructServerInfo(String, SocketAddress, net.kyori.adventure.text.Component, boolean)}
      */
+    @Deprecated // Waterfall
     public abstract ServerInfo constructServerInfo(String name, SocketAddress address, String motd, boolean restricted);
 
+    // Waterfall start - we're going on an adventure!
+    /**
+     * Factory method to construct an implementation specific server info
+     * instance.
+     *
+     * @param name the name of the server
+     * @param address the address that can be used to connect to the server
+     * @param motd the motd when used as a forced host
+     * @param restricted whether the server will be restricted or not
+     * @return the constructed instance
+     */
+    public abstract @org.checkerframework.checker.nullness.qual.NonNull ServerInfo constructServerInfo(final @org.checkerframework.checker.nullness.qual.NonNull String name, final @org.checkerframework.checker.nullness.qual.NonNull SocketAddress address, final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component motd, final boolean restricted);
+    // Waterfall end
+
     /**
      * Returns the console overlord for this proxy. Being the console, this
      * command server cannot have permissions or groups, and will be able to
@@ -279,14 +322,18 @@ public abstract class ProxyServer
      * Send the specified message to the console and all connected players.
      *
      * @param message the message to broadcast
+     * @deprecated in favor of {@link net.kyori.adventure.audience.Audience#sendMessage(net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     public abstract void broadcast(BaseComponent... message);
 
     /**
      * Send the specified message to the console and all connected players.
      *
      * @param message the message to broadcast
+     * @deprecated in favour of {@link net.kyori.adventure.audience.Audience#sendMessage(net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     public abstract void broadcast(BaseComponent message);
 
     /**
@@ -324,7 +371,9 @@ public abstract class ProxyServer
      *
      * @return A new empty title configuration.
      * @see Title
+     * @deprecated in favour of {@link net.kyori.adventure.audience.Audience#showTitle(net.kyori.adventure.title.Title)}
      */
+    @Deprecated // Waterfall
     public abstract Title createTitle();
 
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/ServerPing.java b/api/src/main/java/net/md_5/bungee/api/ServerPing.java
index fc92a7b5..77ff4541 100644
--- a/api/src/main/java/net/md_5/bungee/api/ServerPing.java
+++ b/api/src/main/java/net/md_5/bungee/api/ServerPing.java
@@ -78,7 +78,10 @@ public class ServerPing
         }
     }
 
-    private BaseComponent description;
+    // Waterfall start - we're going on an adventure!
+//    private BaseComponent description;
+    private net.kyori.adventure.text.Component description;
+    // Waterfall end
     private Favicon favicon;
 
     @Data
@@ -114,6 +117,18 @@ public class ServerPing
         this( version, players, new TextComponent( TextComponent.fromLegacyText( description ) ), favicon );
     }
 
+    // Waterfall start - write out the previously Lombok-generated constructor - we're going on an adventure!
+    @Deprecated
+    public ServerPing(
+        final @org.checkerframework.checker.nullness.qual.NonNull Protocol version,
+        final @org.checkerframework.checker.nullness.qual.NonNull Players players,
+        final @org.checkerframework.checker.nullness.qual.NonNull BaseComponent description,
+        final @org.checkerframework.checker.nullness.qual.NonNull Favicon favicon
+    ) {
+        this(version, players, net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().deserialize(new BaseComponent[]{description}), favicon);
+    }
+    // Waterfall end
+
     @Deprecated
     public String getFavicon()
     {
@@ -139,22 +154,50 @@ public class ServerPing
     @Deprecated
     public void setDescription(String description)
     {
-        this.description = new TextComponent( TextComponent.fromLegacyText( description ) );
+        // Waterfall start - we're going on an adventure!
+//        this.description = TextComponent.fromLegacyText( description );
+        this.description = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(description);
+        // Waterfall end
     }
 
     @Deprecated
     public String getDescription()
     {
-        return BaseComponent.toLegacyText( description );
+        // Waterfall start - we're going on an adventure!
+        // return BaseComponent.toLegacyText( description );
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(description);
+        // Waterfall end
     }
 
+    @Deprecated // Waterfall
     public void setDescriptionComponent(BaseComponent description)
     {
-        this.description = description;
+        // Waterfall start - we're going on an adventure!
+        // this.description = description;
+        this.description = net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().deserialize(new BaseComponent[]{description});
+        // Waterfall end
     }
 
+    @Deprecated // Waterfall
     public BaseComponent getDescriptionComponent()
     {
+        // Waterfall start - rewrite component return to return the first element if not empty, or null if is - we're going on an adventure!
+        final BaseComponent[] result = net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().serialize(description);
+        if (result.length > 0) {
+            return result[0];
+        }
+        return null;
+//        return description;
+        // Waterfall end
+    }
+
+    // Waterfall start - we're going on an adventure!
+    public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component description() {
         return description;
     }
+
+    public void description(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component description) {
+        this.description = description;
+    }
+    // Waterfall end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/Title.java b/api/src/main/java/net/md_5/bungee/api/Title.java
index 4717f40d..a7b861bf 100644
--- a/api/src/main/java/net/md_5/bungee/api/Title.java
+++ b/api/src/main/java/net/md_5/bungee/api/Title.java
@@ -12,7 +12,10 @@ import net.md_5.bungee.api.connection.ProxiedPlayer;
  * <p>
  * You can create a new configuration by calling
  * {@link ProxyServer#createTitle()}.
+ *
+ * @deprecated in favour of Adventure's {@link net.kyori.adventure.title.Title}
  */
+@Deprecated // Waterfall - we're going on an adventure!
 public interface Title
 {
 
diff --git a/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java b/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java
index 71abdc87..b95d793b 100644
--- a/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java
+++ b/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java
@@ -23,7 +23,10 @@ public class ListenerInfo
     /**
      * Displayed MOTD.
      */
-    private final String motd;
+    // Waterfall start - we're going on an adventure!
+//    private final String motd;
+    private final net.kyori.adventure.text.Component motd;
+    // Waterfall end
     /**
      * Max amount of slots displayed on the ping page.
      */
@@ -76,9 +79,33 @@ public class ListenerInfo
     @Deprecated
     public ListenerInfo(InetSocketAddress host, String motd, int maxPlayers, int tabListSize, List<String> serverPriority, boolean forceDefault, Map<String, String> forcedHosts, String tabListType, boolean setLocalAddress, boolean pingPassthrough, int queryPort, boolean queryEnabled)
     {
-        this( host, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forcedHosts, tabListType, setLocalAddress, pingPassthrough, queryPort, queryEnabled, false );
+        // Waterfall start - we're going on an adventure!
+//        this( host, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forcedHosts, tabListType, setLocalAddress, pingPassthrough, queryPort, queryEnabled, false );
+        this(host, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(motd), maxPlayers, tabListSize, serverPriority, forceDefault, forcedHosts, tabListType, setLocalAddress, pingPassthrough, queryPort, queryEnabled, false);
+        // Waterfall end
     }
 
+    // Waterfall start - rewrite previously Lombok-generated constructor - we're going on an adventure!
+    @Deprecated
+    public ListenerInfo(
+        final @org.checkerframework.checker.nullness.qual.NonNull InetSocketAddress host,
+        final @org.checkerframework.checker.nullness.qual.NonNull String motd,
+        final int maxPlayers,
+        final int tabListSize,
+        final @org.checkerframework.checker.nullness.qual.NonNull List<String> serverPriority,
+        final boolean forceDefault,
+        final @org.checkerframework.checker.nullness.qual.NonNull Map<String, String> forcedHosts,
+        final @org.checkerframework.checker.nullness.qual.NonNull String tabListType,
+        final boolean setLocalAddress,
+        final boolean pingPassthrough,
+        final int queryPort,
+        final boolean queryEnabled,
+        final boolean proxyProtocol
+    ) {
+        this(host, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(motd), maxPlayers, tabListSize, serverPriority, forceDefault, forcedHosts, tabListType, setLocalAddress, pingPassthrough, queryPort, queryEnabled, proxyProtocol);
+    }
+    // Waterfall end
+
     /**
      * Gets the highest priority server to join.
      *
@@ -115,4 +142,16 @@ public class ListenerInfo
     {
         return (InetSocketAddress) socketAddress;
     }
+
+    // Waterfall start - add previously Lombok-generated getter - we're going on an adventure!
+    public @org.checkerframework.checker.nullness.qual.NonNull String getMotd() {
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(motd);
+    }
+    // Waterfall end
+
+    // Waterfall start - we're going on an adventure!
+    public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component motd() {
+        return motd;
+    }
+    // Waterfall end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java b/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java
index b0fc000a..ba9f77f0 100644
--- a/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java
+++ b/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java
@@ -51,9 +51,20 @@ public interface ServerInfo
      * Returns the MOTD which should be used when this server is a forced host.
      *
      * @return the motd
+     * @deprecated in favour of {@link #motd()}
      */
+    @Deprecated // Waterfall
     String getMotd();
 
+    // Waterfall start - we're going on an adventure!
+    /**
+     * Returns the MOTD of the server, which should be used when this server is a forced host.
+     *
+     * @return the motd
+     */
+    net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component motd();
+    // Waterfall end
+
     /**
      * Whether this server is restricted and therefore only players with the
      * given permission can access it.
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/Connection.java b/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
index f59b49c7..e9b418fa 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
@@ -47,7 +47,9 @@ public interface Connection
      *
      * @param reason the reason shown to the player / sent to the server on
      * disconnect
+     * @deprecated in favour of {@link #disconnect(net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     void disconnect(BaseComponent... reason);
 
     /**
@@ -57,9 +59,23 @@ public interface Connection
      *
      * @param reason the reason shown to the player / sent to the server on
      * disconnect
+     * @deprecated in favour of {@link #disconnect(net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     void disconnect(BaseComponent reason);
 
+    // Waterfall start - we're going on an adventure!
+    /**
+     * Disconnects this end of the connection for the specified reason. If this
+     * is a {@link ProxiedPlayer} the respective server connection will be
+     * closed too.
+     *
+     * @param reason the reason shown to the player / sent to the server on
+     * disconnect
+     */
+    void disconnect(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component reason);
+    // Waterfall end
+
     /**
      * Gets whether this connection is currently open, ie: not disconnected, and
      * able to send / receive data.
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index 3dc32801..88944e26 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -18,7 +18,7 @@ import net.md_5.bungee.api.score.Scoreboard;
  * Represents a player who's connection is being connected to somewhere else,
  * whether it be a remote or embedded server.
  */
-public interface ProxiedPlayer extends Connection, CommandSender
+public interface ProxiedPlayer extends Connection, CommandSender, net.kyori.adventure.audience.Audience, net.kyori.adventure.identity.Identified // Waterfall - we're going on an adventure!
 {
 
     /**
@@ -53,22 +53,44 @@ public interface ProxiedPlayer extends Connection, CommandSender
      * Gets this player's display name.
      *
      * @return the players current display name
+     * @deprecated in favour of {@link #displayName()}
      */
+    @Deprecated // Waterfall
     String getDisplayName();
 
     /**
      * Sets this players display name to be used by bungeecord commands and plugins.
      *
      * @param name the name to set
+     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     void setDisplayName(String name);
 
+    // Waterfall start - we're going on an adventure!
+    /**
+     * Gets this player's display name.
+     *
+     * @return the player's current display name
+     */
+    net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component displayName();
+
+    /**
+     * Sets this player's display name to be used by BungeeCord commands and plugins.
+     *
+     * @param name the new name to set the display name to
+     */
+    void displayName(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component name);
+    // Waterfall end
+
     /**
      * Send a message to the specified screen position of this player.
      *
      * @param position the screen position
      * @param message the message to send
+     * @deprecated in favour of {@link net.kyori.adventure.audience.Audience#sendMessage(net.kyori.adventure.text.Component, net.kyori.adventure.audience.MessageType)}
      */
+    @Deprecated // Waterfall
     public void sendMessage(ChatMessageType position, BaseComponent... message);
 
     /**
@@ -76,7 +98,9 @@ public interface ProxiedPlayer extends Connection, CommandSender
      *
      * @param position the screen position
      * @param message the message to send
+     * @deprecated in favour of {@link net.kyori.adventure.audience.Audience#sendMessage(net.kyori.adventure.text.Component, net.kyori.adventure.audience.MessageType)}
      */
+    @Deprecated // Waterfall
     public void sendMessage(ChatMessageType position, BaseComponent message);
 
     /**
@@ -84,7 +108,9 @@ public interface ProxiedPlayer extends Connection, CommandSender
      *
      * @param sender the sender of the message
      * @param message the message to send
+     * @deprecated in favour of {@link net.kyori.adventure.audience.Audience#sendMessage(net.kyori.adventure.identity.Identity, net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     public void sendMessage(UUID sender, BaseComponent... message);
 
     /**
@@ -92,7 +118,9 @@ public interface ProxiedPlayer extends Connection, CommandSender
      *
      * @param sender the sender of the message
      * @param message the message to send
+     * @deprecated in favour of {@link net.kyori.adventure.audience.Audience#sendMessage(net.kyori.adventure.identity.Identity, net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     public void sendMessage(UUID sender, BaseComponent message);
 
     /**
@@ -236,9 +264,20 @@ public interface ProxiedPlayer extends Connection, CommandSender
      * Make this player chat (say something), to the server he is currently on.
      *
      * @param message the message to say
+     * @deprecated in favour of {@link #chat(net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     void chat(String message);
 
+    // Waterfall start - we're going on an adventure!
+    /**
+     * Make this player chat (say something) on the server they are currently on.
+     *
+     * @param message the message to make this player say
+     */
+    void chat(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component message);
+    // Waterfall end
+
     /**
      * Get the server which this player will be sent to next time the log in.
      *
@@ -316,7 +355,9 @@ public interface ProxiedPlayer extends Connection, CommandSender
      *
      * @param header The header for the tab player list, null to clear it.
      * @param footer The footer for the tab player list, null to clear it.
+     * @deprecated in favour of {@link net.kyori.adventure.audience.Audience#sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     void setTabHeader(BaseComponent header, BaseComponent footer);
 
     /**
@@ -324,12 +365,17 @@ public interface ProxiedPlayer extends Connection, CommandSender
      *
      * @param header The header for the tab player list, null to clear it.
      * @param footer The footer for the tab player list, null to clear it.
+     * @deprecated in favour of {@link net.kyori.adventure.audience.Audience#sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     void setTabHeader(BaseComponent[] header, BaseComponent[] footer);
 
     /**
      * Clears the header and footer displayed in the tab player list.
+     *
+     * @deprecated in favour of using empty components with {@link net.kyori.adventure.audience.Audience#sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}
      */
+    @Deprecated // Waterfall
     void resetTabHeader();
 
     /**
@@ -338,7 +384,9 @@ public interface ProxiedPlayer extends Connection, CommandSender
      *
      * @param title The title to send to the player.
      * @see Title
+     * @deprecated in favour of {@link net.kyori.adventure.audience.Audience#showTitle(net.kyori.adventure.title.Title)}
      */
+    @Deprecated // Waterfall
     void sendTitle(Title title);
 
     /**
@@ -387,4 +435,11 @@ public interface ProxiedPlayer extends Connection, CommandSender
      * @return this player's {@link Scoreboard}
      */
     Scoreboard getScoreboard();
+
+    // Waterfall start - we're going on an adventure!
+    @Override
+    default net.kyori.adventure.identity.@org.checkerframework.checker.nullness.qual.NonNull Identity identity() {
+        return net.kyori.adventure.identity.Identity.identity(getUniqueId());
+    }
+    // Waterfall end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/event/LoginEvent.java b/api/src/main/java/net/md_5/bungee/api/event/LoginEvent.java
index a13eba79..566756a2 100644
--- a/api/src/main/java/net/md_5/bungee/api/event/LoginEvent.java
+++ b/api/src/main/java/net/md_5/bungee/api/event/LoginEvent.java
@@ -29,7 +29,10 @@ public class LoginEvent extends AsyncEvent<LoginEvent> implements Cancellable
      * Message to use when kicking if this event is canceled.
      */
     @Setter(AccessLevel.NONE)
-    private BaseComponent[] cancelReasonComponents;
+    // Waterfall start - we're going on an adventure!
+//    private BaseComponent[] cancelReasonComponents;
+    private net.kyori.adventure.text.Component cancelReason = net.kyori.adventure.text.Component.empty();
+    // Waterfall end
 
     // Waterfall start - adding the LoginResult variable to provide access to it, when calling the login event
     /**
@@ -65,8 +68,17 @@ public class LoginEvent extends AsyncEvent<LoginEvent> implements Cancellable
     @Deprecated
     public String getCancelReason()
     {
-        return BaseComponent.toLegacyText( getCancelReasonComponents() );
+        // Waterfall start - we're going on an adventure!
+//        return BaseComponent.toLegacyText( getCancelReasonComponents() );
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(cancelReason);
+        // Waterfall end
+    }
+
+    // Waterfall start - add previously Lombok-generated getter - we're going on an adventure!
+    public BaseComponent@org.checkerframework.checker.nullness.qual.NonNull[] getCancelReasonComponents() {
+        return net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().serialize(cancelReason);
     }
+    // Waterfall end
 
     /**
      * @param cancelReason reason to be displayed
@@ -77,11 +89,42 @@ public class LoginEvent extends AsyncEvent<LoginEvent> implements Cancellable
     @Deprecated
     public void setCancelReason(String cancelReason)
     {
-        setCancelReason( TextComponent.fromLegacyText( cancelReason ) );
+        // Waterfall start - we're going on an adventure!
+//        setCancelReason( TextComponent.fromLegacyText( cancelReason ) );
+        cancelReason(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(cancelReason));
+        // Waterfall end
     }
 
+    /**
+     * @param cancelReason reason to be displayed
+     * @deprecated in favour of {@link #cancelReason(net.kyori.adventure.text.Component)}
+     */
+    @Deprecated // Waterfall
     public void setCancelReason(BaseComponent... cancelReason)
     {
-        this.cancelReasonComponents = cancelReason;
+        // Waterfall start - we're going on an adventure!
+//        this.cancelReasonComponents = cancelReason;
+        this.cancelReason = net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().deserialize(cancelReason);
+        // Waterfall end
+    }
+
+    // Waterfall start - we're going on an adventure!
+    /**
+     * Gets the reason why this event was cancelled. May be empty.
+     *
+     * @return the reason why this event was cancelled
+     */
+    public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component cancelReason() {
+        return cancelReason;
+    }
+
+    /**
+     * Sets the reason why this event was cancelled to the specified reason.
+     *
+     * @param cancelReason the new reason why this event was cancelled
+     */
+    public void cancelReason(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component cancelReason) {
+        this.cancelReason = cancelReason;
     }
+    // Waterfall end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/event/PreLoginEvent.java b/api/src/main/java/net/md_5/bungee/api/event/PreLoginEvent.java
index 87040d30..d139c674 100644
--- a/api/src/main/java/net/md_5/bungee/api/event/PreLoginEvent.java
+++ b/api/src/main/java/net/md_5/bungee/api/event/PreLoginEvent.java
@@ -33,7 +33,10 @@ public class PreLoginEvent extends AsyncEvent<PreLoginEvent> implements Cancella
      * Message to use when kicking if this event is canceled.
      */
     @Setter(AccessLevel.NONE)
-    private BaseComponent[] cancelReasonComponents;
+    // Waterfall start - we're going on an adventure!
+//    private BaseComponent[] cancelReasonComponents;
+    private net.kyori.adventure.text.Component cancelReason = net.kyori.adventure.text.Component.empty();
+    // Waterfall end
     /**
      * Connection attempting to login.
      */
@@ -52,9 +55,18 @@ public class PreLoginEvent extends AsyncEvent<PreLoginEvent> implements Cancella
     @Deprecated
     public String getCancelReason()
     {
-        return BaseComponent.toLegacyText( getCancelReasonComponents() );
+        // Waterfall start - we're going on an adventure!
+//        return BaseComponent.toLegacyText( getCancelReasonComponents() );
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(cancelReason);
+        // Waterfall end
     }
 
+    // Waterfall start - add previously Lombok-generated getter - we're going on an adventure!
+    public BaseComponent@org.checkerframework.checker.nullness.qual.NonNull[] getCancelReasonComponents() {
+        return net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().serialize(cancelReason);
+    }
+    // Waterfall end
+
     /**
      * @param cancelReason reason to be displayed
      * @deprecated Use
@@ -64,11 +76,42 @@ public class PreLoginEvent extends AsyncEvent<PreLoginEvent> implements Cancella
     @Deprecated
     public void setCancelReason(String cancelReason)
     {
-        setCancelReason( TextComponent.fromLegacyText( cancelReason ) );
+        // Waterfall start - we're going on an adventure!
+//        setCancelReason( TextComponent.fromLegacyText( cancelReason ) );
+        cancelReason(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(cancelReason));
+        // Waterfall end
     }
 
+    /**
+     * @param cancelReason reason to be displayed
+     * @deprecated in favour of {@link #cancelReason(net.kyori.adventure.text.Component)}
+     */
+    @Deprecated // Waterfall
     public void setCancelReason(BaseComponent... cancelReason)
     {
-        this.cancelReasonComponents = cancelReason;
+        // Waterfall start - we're going on an adventure!
+//        this.cancelReasonComponents = cancelReason;
+        this.cancelReason = net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().deserialize(cancelReason);
+        // Waterfall end
+    }
+
+    // Waterfall start - we're going on an adventure!
+    /**
+     * Gets the reason why this event was cancelled. May be empty.
+     *
+     * @return the reason why this event was cancelled
+     */
+    public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component cancelReason() {
+        return cancelReason;
+    }
+
+    /**
+     * Sets the reason why this event was cancelled to the specified reason.
+     *
+     * @param cancelReason the new reason why this event was cancelled
+     */
+    public void cancelReason(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component cancelReason) {
+        this.cancelReason = cancelReason;
     }
+    // Waterfall end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/event/ServerKickEvent.java b/api/src/main/java/net/md_5/bungee/api/event/ServerKickEvent.java
index ee63732d..aa0b78f7 100644
--- a/api/src/main/java/net/md_5/bungee/api/event/ServerKickEvent.java
+++ b/api/src/main/java/net/md_5/bungee/api/event/ServerKickEvent.java
@@ -35,7 +35,10 @@ public class ServerKickEvent extends Event implements Cancellable
     /**
      * Kick reason.
      */
-    private BaseComponent[] kickReasonComponent;
+    // Waterfall start - we're going on an adventure!
+//    private BaseComponent[] kickReasonComponent;
+    private net.kyori.adventure.text.Component kickReason;
+    // Waterfall end
     /**
      * Server to send player to if this event is cancelled.
      */
@@ -84,11 +87,15 @@ public class ServerKickEvent extends Event implements Cancellable
         this( player, kickedFrom, kickReasonComponent, cancelServer, state, Cause.UNKNOWN );
     }
 
+    @Deprecated // Waterfall
     public ServerKickEvent(ProxiedPlayer player, ServerInfo kickedFrom, BaseComponent[] kickReasonComponent, ServerInfo cancelServer, State state, Cause cause)
     {
         this.player = player;
         this.kickedFrom = kickedFrom;
-        this.kickReasonComponent = kickReasonComponent;
+        // Waterfall start - we're going on an adventure!
+//        this.kickReasonComponent = kickReasonComponent;
+        this.kickReason = net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().deserialize(kickReasonComponent);
+        // Waterfall end
         this.cancelServer = cancelServer;
         this.state = state;
         this.cause = cause;
@@ -98,12 +105,38 @@ public class ServerKickEvent extends Event implements Cancellable
     @Deprecated
     public String getKickReason()
     {
-        return BaseComponent.toLegacyText( kickReasonComponent );
+        // Waterfall start - we're going on an adventure!
+//        return BaseComponent.toLegacyText( kickReasonComponent );
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(kickReason);
+        // Waterfall end
     }
 
     @Deprecated
     public void setKickReason(String reason)
     {
-        kickReasonComponent = TextComponent.fromLegacyText( reason );
+        // Waterfall start - we're going on an adventure!
+//        kickReasonComponent = TextComponent.fromLegacyText( reason );
+        kickReason = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(reason);
+        // Waterfall end
+    }
+
+    // Waterfall start - add previously Lombok-generated getters/setters - we're going on an adventure!
+    public BaseComponent@org.checkerframework.checker.nullness.qual.NonNull[] getKickReasonComponent() {
+        return net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().serialize(kickReason);
     }
+
+    public void setKickReasonComponent(final BaseComponent@org.checkerframework.checker.nullness.qual.NonNull[] kickReasonComponent) {
+        this.kickReason = net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().deserialize(kickReasonComponent);
+    }
+    // Waterfall end
+
+    // Waterfall start - we're going on an adventure!
+    public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component kickReason() {
+        return kickReason;
+    }
+
+    public void kickReason(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component kickReason) {
+        this.kickReason = kickReason;
+    }
+    // Waterfall end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/Command.java b/api/src/main/java/net/md_5/bungee/api/plugin/Command.java
index b4566327..cb00f1f0 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/Command.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/Command.java
@@ -18,8 +18,11 @@ public abstract class Command
     private final String name;
     private final String permission;
     private final String[] aliases;
-    @Setter(AccessLevel.PROTECTED)
-    private String permissionMessage;
+    // Waterfall start - we're going on an adventure!
+//    @Setter(AccessLevel.PROTECTED)
+//    private String permissionMessage;
+    private net.kyori.adventure.text.Component permissionMessage;
+    // Waterfall end
 
     /**
      * Construct a new command with no permissions or aliases.
@@ -66,4 +69,26 @@ public abstract class Command
     {
         return permission == null || permission.isEmpty() || sender.hasPermission( permission );
     }
+
+    // Waterfall start - add previously Lombok-generated getters/setters - we're going on an adventure!
+    @Deprecated
+    public @org.checkerframework.checker.nullness.qual.Nullable String getPermissionMessage() {
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(permissionMessage);
+    }
+
+    @Deprecated
+    protected void setPermissionMessage(final @org.checkerframework.checker.nullness.qual.Nullable String permissionMessage) {
+        this.permissionMessage = permissionMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(permissionMessage) : null;
+    }
+    // Waterfall end
+
+    // Waterfall start - we're going on an adventure!
+    public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.Nullable Component permissionMessage() {
+        return permissionMessage;
+    }
+
+    protected void permissionMessage(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.Nullable Component permissionMessage) {
+        this.permissionMessage = permissionMessage;
+    }
+    // Waterfall end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index 90031156..beccceda 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -11,18 +11,7 @@ import java.io.File;
 import java.io.InputStream;
 import java.lang.reflect.Method;
 import java.net.URLClassLoader;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
-import java.util.Stack;
+import java.util.*;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.logging.Level;
@@ -193,7 +182,10 @@ public final class PluginManager
         {
             if ( tabResults == null )
             {
-                sender.sendMessage( ( command.getPermissionMessage() == null ) ? proxy.getTranslation( "no_permission" ) : command.getPermissionMessage() );
+                // Waterfall start - we're going on an adventure!
+//                sender.sendMessage( ( command.getPermissionMessage() == null ) ? proxy.getTranslation( "no_permission" ) : command.getPermissionMessage() );
+                sender.sendMessage(command.permissionMessage() == null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(proxy.getTranslation("no_permission")) : Objects.requireNonNull(command.permissionMessage()));
+                // Waterfall end
             }
             return true;
         }
diff --git a/api/src/main/java/net/md_5/bungee/api/score/Objective.java b/api/src/main/java/net/md_5/bungee/api/score/Objective.java
index 0dd25646..5db935ed 100644
--- a/api/src/main/java/net/md_5/bungee/api/score/Objective.java
+++ b/api/src/main/java/net/md_5/bungee/api/score/Objective.java
@@ -15,6 +15,12 @@ public class Objective
      * Name of the objective.
      */
     private final String name;
+    // Waterfall start - we're going on an adventure!
+    /**
+     * Display name of the objective.
+     */
+    private final net.kyori.adventure.text.Component displayName;
+    // Waterfall end
     /**
      * Value of the objective.
      */
@@ -23,4 +29,14 @@ public class Objective
      * Type; integer or hearts
      */
     private String type;
+
+    // Waterfall start - write previously Lombok-generated constructor - we're going on an adventure!
+    public Objective(
+        final @org.checkerframework.checker.nullness.qual.NonNull String name,
+        final @org.checkerframework.checker.nullness.qual.NonNull String value,
+        final @org.checkerframework.checker.nullness.qual.NonNull String type
+    ) {
+        this(name, net.kyori.adventure.text.Component.empty(), value, type);
+    }
+    // Waterfall end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/score/Team.java b/api/src/main/java/net/md_5/bungee/api/score/Team.java
index 849ba1cf..7e93e275 100644
--- a/api/src/main/java/net/md_5/bungee/api/score/Team.java
+++ b/api/src/main/java/net/md_5/bungee/api/score/Team.java
@@ -13,9 +13,14 @@ public class Team
 
     @NonNull
     private final String name;
-    private String displayName;
-    private String prefix;
-    private String suffix;
+    // Waterfall start - we're going on an adventure!
+//    private String displayName;
+    private net.kyori.adventure.text.Component displayName = net.kyori.adventure.text.Component.empty();
+//    private String prefix;
+    private net.kyori.adventure.text.Component prefix = net.kyori.adventure.text.Component.empty();
+//    private String suffix;
+    private net.kyori.adventure.text.Component suffix = net.kyori.adventure.text.Component.empty();
+    // Waterfall end
     private byte friendlyFire;
     private String nameTagVisibility;
     private String collisionRule;
@@ -36,4 +41,62 @@ public class Team
     {
         players.remove( name );
     }
+
+    // Waterfall start - add previously Lombok-generated getters/setters - we're going on an adventure!
+    @Deprecated
+    public @org.checkerframework.checker.nullness.qual.NonNull String getDisplayName() {
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(displayName);
+    }
+
+    @Deprecated
+    public void setDisplayName(final @org.checkerframework.checker.nullness.qual.NonNull String displayName) {
+        this.displayName = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(displayName);
+    }
+
+    @Deprecated
+    public @org.checkerframework.checker.nullness.qual.NonNull String getPrefix() {
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(prefix);
+    }
+
+    @Deprecated
+    public void setPrefix(final @org.checkerframework.checker.nullness.qual.NonNull String prefix) {
+        this.prefix = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(prefix);
+    }
+
+    @Deprecated
+    public @org.checkerframework.checker.nullness.qual.NonNull String getSuffix() {
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(suffix);
+    }
+
+    @Deprecated
+    public void setSuffix(final @org.checkerframework.checker.nullness.qual.NonNull String suffix) {
+        this.suffix = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(suffix);
+    }
+    // Waterfall end
+
+    // Waterfall start - we're going on an adventure!
+    public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component displayName() {
+        return displayName;
+    }
+
+    public void displayName(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component displayName) {
+        this.displayName = displayName;
+    }
+
+    public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component prefix() {
+        return prefix;
+    }
+
+    public void prefix(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component prefix) {
+        this.prefix = prefix;
+    }
+
+    public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component suffix() {
+        return suffix;
+    }
+
+    public void suffix(final net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component suffix) {
+        this.suffix = suffix;
+    }
+    // Waterfall end
 }
diff --git a/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java b/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
index aefe026e..a5ccc04e 100644
--- a/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
+++ b/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
@@ -43,6 +43,13 @@ public class ServerConnectRequestTest
             return null;
         }
 
+        // Waterfall start - we're going on an adventure!
+        @Override
+        public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component motd() {
+            return net.kyori.adventure.text.Component.empty();
+        }
+        // Waterfall end
+
         @Override
         public boolean isRestricted()
         {
diff --git a/proxy/src/main/java/io/github/waterfallmc/waterfall/adventure/WaterfallAdventure.java b/proxy/src/main/java/io/github/waterfallmc/waterfall/adventure/WaterfallAdventure.java
new file mode 100644
index 00000000..8b6e2e32
--- /dev/null
+++ b/proxy/src/main/java/io/github/waterfallmc/waterfall/adventure/WaterfallAdventure.java
@@ -0,0 +1,40 @@
+package io.github.waterfallmc.waterfall.adventure;
+
+import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
+import net.kyori.adventure.title.Title;
+import net.md_5.bungee.api.connection.Connection;
+import net.md_5.bungee.protocol.packet.Title.Action;
+import org.checkerframework.checker.nullness.qual.NonNull;
+
+import java.util.Objects;
+
+public final class WaterfallAdventure {
+
+    public static void send(final Connection connection, final Title title) {
+        connection.unsafe().sendPacket(createPacket(Action.TITLE, title));
+        connection.unsafe().sendPacket(createPacket(Action.SUBTITLE, title));
+        if (title.times() != null) connection.unsafe().sendPacket(createPacket(Action.TIMES, title));
+    }
+
+    private static net.md_5.bungee.protocol.packet.@NonNull Title createPacket(final Action action, final Title title) {
+        final net.md_5.bungee.protocol.packet.Title packet = new net.md_5.bungee.protocol.packet.Title();
+        packet.setAction(action);
+
+        switch (action) {
+            case TITLE:
+                packet.setText(GsonComponentSerializer.gson().serialize(title.title()));
+                break;
+            case SUBTITLE:
+                packet.setText(GsonComponentSerializer.gson().serialize(title.subtitle()));
+                break;
+            case TIMES:
+                packet.setFadeIn((int) Objects.requireNonNull(title.times()).fadeIn().toMillis() / 50);
+                packet.setStay((int) Objects.requireNonNull(title.times()).stay().toMillis() / 50);
+                packet.setFadeOut((int) Objects.requireNonNull(title.times()).fadeOut().toMillis() / 50);
+                break;
+            default: break;
+        }
+
+        return packet;
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 2938f2f1..df02d624 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -169,7 +169,14 @@ public class BungeeCord extends ProxyServer
             .registerTypeAdapter( ScoreComponent.class, new ScoreComponentSerializer() )
             .registerTypeAdapter( SelectorComponent.class, new SelectorComponentSerializer() )
             .registerTypeAdapter( ServerPing.PlayerInfo.class, new PlayerInfoSerializer() )
-            .registerTypeAdapter( Favicon.class, Favicon.getFaviconTypeAdapter() ).create();
+            // Waterfall start - we're going on an adventure!
+            // we have to register all these type adapters so Gson recognises that they are all the same
+            .registerTypeAdapter( Favicon.class, Favicon.getFaviconTypeAdapter() )
+            .registerTypeAdapter(net.kyori.adventure.text.Component.class, net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serializer().getAdapter(net.kyori.adventure.text.Component.class))
+            .registerTypeAdapter(net.kyori.adventure.text.TextComponent.class, net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serializer().getAdapter(net.kyori.adventure.text.TextComponent.class))
+            .registerTypeAdapter(net.kyori.adventure.text.TranslatableComponent.class, net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serializer().getAdapter(net.kyori.adventure.text.TranslatableComponent.class))
+            .create();
+            // Waterfall end
     @Getter
     private ConnectionThrottle connectionThrottle;
     private final ModuleManager moduleManager = new ModuleManager();
@@ -312,7 +319,10 @@ public class BungeeCord extends ProxyServer
             @Override
             public void run()
             {
-                independentThreadStop( getTranslation( "restart" ), false );
+                // Waterfall start - we're going on an adventure!
+//                independentThreadStop( getTranslation( "restart" ), false );
+                independentThreadStop(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(getTranslation("restart")), false);
+                // Waterfall end
             }
         } );
     }
@@ -399,26 +409,39 @@ public class BungeeCord extends ProxyServer
     @Override
     public void stop()
     {
-        stop( getTranslation( "restart" ) );
+        // Waterfall start - we're going on an adventure!
+//        stop( getTranslation( "restart" ) );
+        stop(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(getTranslation("restart")));
+        // Waterfall end
     }
 
     @Override
     public void stop(final String reason)
     {
-        new Thread( "Shutdown Thread" )
-        {
-            @Override
-            public void run()
-            {
-                independentThreadStop( reason, true );
-            }
-        }.start();
+        // Waterfall start - move this down to the component stop - we're going on an adventure!
+//        new Thread( "Shutdown Thread" )
+//        {
+//            @Override
+//            public void run()
+//            {
+//                independentThreadStop( reason, true );
+//            }
+//        }.start();
+        stop(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(reason));
+        // Waterfall end
+    }
+
+    @Override
+    public void stop(net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component reason) {
+        new Thread(() -> {
+            independentThreadStop(reason, true);
+        }, "Shutdown Thread");
     }
 
     // This must be run on a separate thread to avoid deadlock!
     @SuppressFBWarnings("DM_EXIT")
     @SuppressWarnings("TooBroadCatch")
-    private void independentThreadStop(final String reason, boolean callSystemExit)
+    private void independentThreadStop(final net.kyori.adventure.text.Component reason, boolean callSystemExit) // Waterfall - we're going on an adventure!
     {
         // Acquire the shutdown lock
         // This needs to actually block here, otherwise running 'end' and then ctrl+c will cause the thread to terminate prematurely
@@ -704,11 +727,24 @@ public class BungeeCord extends ProxyServer
         return constructServerInfo( name, (SocketAddress) address, motd, restricted );
     }
 
+    // Waterfall start - we're going on an adventure!
+    @Override
+    public @org.checkerframework.checker.nullness.qual.NonNull ServerInfo constructServerInfo(@org.checkerframework.checker.nullness.qual.NonNull String name, @org.checkerframework.checker.nullness.qual.NonNull InetSocketAddress address, net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component motd, boolean restricted) {
+        return constructServerInfo(name, (SocketAddress) address, motd, restricted);
+    }
+
     @Override
     public ServerInfo constructServerInfo(String name, SocketAddress address, String motd, boolean restricted)
     {
-        return new BungeeServerInfo( name, address, motd, restricted );
+//        return new BungeeServerInfo( name, address, motd, restricted );
+        return constructServerInfo(name, address, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(motd), restricted);
+    }
+
+    @Override
+    public @org.checkerframework.checker.nullness.qual.NonNull ServerInfo constructServerInfo(@org.checkerframework.checker.nullness.qual.NonNull String name, @org.checkerframework.checker.nullness.qual.NonNull SocketAddress address, net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component motd, boolean restricted) {
+        return new BungeeServerInfo(name, address, motd, restricted);
     }
+    // Waterfall end
 
     @Override
     public CommandSender getConsole()
@@ -807,4 +843,9 @@ public class BungeeCord extends ProxyServer
     {
         return new BungeeTitle();
     }
+
+    @Override
+    public @org.checkerframework.checker.nullness.qual.NonNull Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {
+        return Iterables.concat(Collections.singleton(getConsole()), getPlayers());
+    }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
index 7b002089..1b1e5350 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
@@ -46,8 +46,11 @@ public class BungeeServerInfo implements ServerInfo
     @Getter
     private final SocketAddress socketAddress;
     private final Collection<ProxiedPlayer> players = new ArrayList<>();
-    @Getter
-    private final String motd;
+    // Waterfall start - we're going on an adventure!
+//    @Getter
+//    private final String motd;
+    private final net.kyori.adventure.text.Component motd;
+    // Waterfall end
     @Getter
     private final boolean restricted;
     @Getter
@@ -78,6 +81,18 @@ public class BungeeServerInfo implements ServerInfo
         return "bungeecord.server." + name;
     }
 
+    // Waterfall start - we're going on an adventure!
+    @Override
+    public String getMotd() {
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(motd);
+    }
+
+    @Override
+    public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component motd() {
+        return motd;
+    }
+    // Waterfall end
+
     @Override
     public boolean canAccess(CommandSender player)
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
index 5e452780..4d72f94c 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
@@ -60,6 +60,14 @@ public class ServerConnection implements Server
         ch.close();
     }
 
+    // Waterfall - we're going on an adventure!
+    @Override
+    public void disconnect(net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component reason) {
+        Preconditions.checkArgument(reason == net.kyori.adventure.text.Component.empty(), "Server cannot have disconnect reason");
+        ch.close();
+    }
+    // Waterfall end
+
     @Override
     public void disconnect(BaseComponent reason)
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 7ec119ea..a03f4ba8 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -131,8 +131,11 @@ public final class UserConnection implements ProxiedPlayer
     private final Multimap<Integer, Integer> potions = HashMultimap.create();
     // Waterfall end
     /*========================================================================*/
-    @Getter
-    private String displayName;
+    // Waterfall start - we're going on an adventure!
+//    @Getter
+//    private String displayName;
+    private net.kyori.adventure.text.Component displayName;
+    // Waterfall end
     @Getter
     private EntityMap entityRewrite;
     private Locale locale;
@@ -157,7 +160,10 @@ public final class UserConnection implements ProxiedPlayer
     {
         this.entityRewrite = EntityMap.getEntityMap( getPendingConnection().getVersion() );
 
-        this.displayName = name;
+        // Waterfall start - we're going on an adventure!
+//        this.displayName = name;
+        this.displayName = net.kyori.adventure.text.Component.text(name);
+        // Waterfall end
 
         tabListHandler = new ServerUnique( this );
 
@@ -193,7 +199,10 @@ public final class UserConnection implements ProxiedPlayer
     public void setDisplayName(String name)
     {
         Preconditions.checkNotNull( name, "displayName" );
-        displayName = name;
+        // Waterfall start - we're going on an adventure!
+//        displayName = name;
+        displayName = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(name);
+        // Waterfall end
     }
 
     @Override
@@ -395,38 +404,70 @@ public final class UserConnection implements ProxiedPlayer
     @Override
     public void disconnect(String reason)
     {
-        disconnect0( TextComponent.fromLegacyText( reason ) );
+        // Waterfall start - we're going on an adventure!
+//        disconnect0( TextComponent.fromLegacyText( reason ) );
+        disconnect0(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(reason));
+        // Waterfall end
     }
 
     @Override
     public void disconnect(BaseComponent... reason)
     {
-        disconnect0( reason );
+        // Waterfall start - we're going on an adventure!
+//        disconnect0( reason );
+        disconnect0(net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().deserialize(reason));
+        // Waterfall end
     }
 
     @Override
     public void disconnect(BaseComponent reason)
     {
-        disconnect0( reason );
+        // Waterfall start - we're going on an adventure!
+//        disconnect0( reason );
+        disconnect0(net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().deserialize(new BaseComponent[]{reason}));
+        // Waterfall end
     }
 
-    public void disconnect0(final BaseComponent... reason)
-    {
-        if ( !ch.isClosing() )
-        {
-            bungee.getLogger().log( Level.INFO, "[{0}] disconnected with: {1}", new Object[]
-            {
-                getName(), BaseComponent.toLegacyText( reason )
-            } );
-
-            ch.close( new Kick( ComponentSerializer.toString( reason ) ) );
+    // Waterfall start - we're going on an adventure!
+    @Override
+    public void disconnect(net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component reason) {
+        disconnect0(reason);
+    }
+    // Waterfall end
 
-            if ( server != null )
-            {
-                server.setObsolete( true );
-                server.disconnect( "Quitting" );
-            }
+    // Waterfall start - replace disconnect0 with one that uses Adventure component - we're going on an adventure!
+//    public void disconnect0(final BaseComponent... reason)
+//    {
+//        if ( !ch.isClosing() )
+//        {
+//            bungee.getLogger().log( Level.INFO, "[{0}] disconnected with: {1}", new Object[]
+//            {
+//                getName(), BaseComponent.toLegacyText( reason )
+//            } );
+//
+//            ch.close( new Kick( ComponentSerializer.toString( reason ) ) );
+//
+//            if ( server != null )
+//            {
+//                server.setObsolete( true );
+//                server.disconnect( "Quitting" );
+//            }
+//        }
+//    }
+
+    public void disconnect0(final net.kyori.adventure.text.Component reason) {
+        if (ch.isClosing()) return;
+        bungee.getLogger().log(Level.INFO, "[{0}] disconnected with: {1}", new Object[]{
+            getName(),
+            net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(reason)
+        });
+
+        ch.close(new Kick(net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serialize(reason)));
+        if (server != null) {
+            server.setObsolete(true);
+            server.disconnect("Quitting");
         }
+        // Waterfall end
     }
 
     @Override
@@ -436,6 +477,14 @@ public final class UserConnection implements ProxiedPlayer
         server.getCh().write( new Chat( message ) );
     }
 
+    // Waterfall start - we're going on an adventure!
+    @Override
+    public void chat(net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component message) {
+        Preconditions.checkState(server != null, "Not connected to server!");
+        server.getCh().write(new Chat(net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serialize(message)));
+    }
+    // Waterfall end
+
     @Override
     public void sendMessage(String message)
     {
@@ -517,6 +566,13 @@ public final class UserConnection implements ProxiedPlayer
         }
     }
 
+    // Waterfall start - we're going on an adventure!
+    @Override
+    public void sendMessage(net.kyori.adventure.identity.@org.checkerframework.checker.nullness.qual.NonNull Identity source, net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component message, net.kyori.adventure.audience.@org.checkerframework.checker.nullness.qual.NonNull MessageType type) {
+        unsafe().sendPacket(new Chat(net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serialize(message), (byte) type.ordinal(), source.uuid()));
+    }
+    // Waterfall end
+
     @Override
     public void sendData(String channel, byte[] data)
     {
@@ -714,6 +770,16 @@ public final class UserConnection implements ProxiedPlayer
         ) );
     }
 
+    // Waterfall start - we're going on an adventure!
+    @Override
+    public void sendPlayerListHeaderAndFooter(net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component header, net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component footer) {
+        unsafe().sendPacket(new PlayerListHeaderFooter(
+            net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serialize(header),
+            net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serialize(footer)
+        ));
+    }
+    // Waterfall end
+
     @Override
     public void resetTabHeader()
     {
@@ -727,6 +793,35 @@ public final class UserConnection implements ProxiedPlayer
         title.send( this );
     }
 
+    // Waterfall start - we're going on an adventure!
+    @Override
+    public void sendActionBar(net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component message) {
+        net.md_5.bungee.protocol.packet.Title packet = new net.md_5.bungee.protocol.packet.Title();
+        packet.setAction(net.md_5.bungee.protocol.packet.Title.Action.ACTIONBAR);
+        packet.setText(net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serialize(message));
+        unsafe().sendPacket(packet);
+    }
+
+    @Override
+    public void showTitle(net.kyori.adventure.title.@org.checkerframework.checker.nullness.qual.NonNull Title title) {
+        io.github.waterfallmc.waterfall.adventure.WaterfallAdventure.send(this, title);
+    }
+
+    @Override
+    public void clearTitle() {
+        final net.md_5.bungee.protocol.packet.Title title = new net.md_5.bungee.protocol.packet.Title();
+        title.setAction(net.md_5.bungee.protocol.packet.Title.Action.CLEAR);
+        unsafe().sendPacket(title);
+    }
+
+    @Override
+    public void resetTitle() {
+        final net.md_5.bungee.protocol.packet.Title title = new net.md_5.bungee.protocol.packet.Title();
+        title.setAction(net.md_5.bungee.protocol.packet.Title.Action.RESET);
+        unsafe().sendPacket(title);
+    }
+    // Waterfall end
+
     public String getExtraDataInHandshake()
     {
         return this.getPendingConnection().getExtraDataInHandshake();
@@ -759,4 +854,22 @@ public final class UserConnection implements ProxiedPlayer
         return entityRewrite == net.md_5.bungee.entitymap.EntityMap_Dummy.INSTANCE;
     }
     // Waterfall end
+
+    // Waterfall start - add previously Lombok-generated getter - we're going on an adventure!
+    public String getDisplayName() {
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(displayName);
+    }
+    // Waterfall end
+
+    // Waterfall start - we're going on an adventure!
+    @Override
+    public net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component displayName() {
+        return displayName;
+    }
+
+    @Override
+    public void displayName(net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component name) {
+        this.displayName = name;
+    }
+    // Waterfall end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandSender.java b/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandSender.java
index 33d7e5bb..bdea3d28 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandSender.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandSender.java
@@ -46,6 +46,13 @@ public final class ConsoleCommandSender implements CommandSender
         sendMessage( message.toLegacyText() );
     }
 
+    // Waterfall start - we're going on an adventure!
+    @Override
+    public void sendMessage(net.kyori.adventure.identity.@org.checkerframework.checker.nullness.qual.NonNull Identity source, net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component message, net.kyori.adventure.audience.@org.checkerframework.checker.nullness.qual.NonNull MessageType type) {
+        sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));
+    }
+    // Waterfall end
+
     @Override
     public String getName()
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
index 65121ba2..2128ea38 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
@@ -253,8 +253,11 @@ public class YamlConfig implements ConfigurationAdapter
 
         for ( Map<String, Object> val : base )
         {
-            String motd = get( "motd", "&1Another Bungee server", val );
-            motd = ChatColor.translateAlternateColorCodes( '&', motd );
+            // Waterfall start - we're going on an adventure!
+//            String motd = get( "motd", "&1Another Bungee server", val );
+//            motd = ChatColor.translateAlternateColorCodes( '&', motd );
+            final net.kyori.adventure.text.Component motd = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacyAmpersand().deserialize(get("motd", "&1Another Bungee server", val));
+            // Waterfall end
 
             int maxPlayers = get( "max_players", 1, val );
             boolean forceDefault = get( "force_default_server", false, val );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 9e180c30..1c758f41 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -96,7 +96,10 @@ public class DownstreamBridge extends PacketHandler
         }
         else
         {
-            con.disconnect0( event.getKickReasonComponent() );
+            // Waterfall start - we're going on an adventure!
+//            con.disconnect0( event.getKickReasonComponent() );
+            con.disconnect0(event.kickReason());
+            // Waterfall end
         }
         // Waterfall end
     }
@@ -123,7 +126,10 @@ public class DownstreamBridge extends PacketHandler
             }
             else
             {
-                con.disconnect0( event.getKickReasonComponent() );
+                // Waterfall start - we're going on an adventure!
+//                con.disconnect0( event.getKickReasonComponent() );
+                con.disconnect0(event.kickReason());
+                // Waterfall end
             }
             // Waterfall end
         }
@@ -575,7 +581,10 @@ public class DownstreamBridge extends PacketHandler
             con.connectNow( event.getCancelServer(), ServerConnectEvent.Reason.KICK_REDIRECT );
         } else
         {
-            con.disconnect0( event.getKickReasonComponent() ); // TODO: Prefix our own stuff.
+            // Waterfall start - we're going on an adventure!
+//            con.disconnect0( event.getKickReasonComponent() );
+            con.disconnect0(event.kickReason()); // TODO: Prefix our own stuff.
+            // Waterfall end
         }
         server.setObsolete( true );
         throw CancelSendSignal.INSTANCE;
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index b7ecd828..81fe654f 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -223,7 +223,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         return pos == -1 ? str : str.substring( 0, pos );
     }
 
-    private ServerPing getPingInfo(String motd, int protocol)
+    private ServerPing getPingInfo(net.kyori.adventure.text.Component motd, int protocol) // Waterfall - we're going on an adventure!
     {
         return new ServerPing(
                 new ServerPing.Protocol( bungee.getName() + " " + bungee.getGameVersion(), protocol ),
@@ -238,7 +238,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         Preconditions.checkState( thisState == State.STATUS, "Not expecting STATUS" );
 
         ServerInfo forced = AbstractReconnectHandler.getForcedHost( this );
-        final String motd = ( forced != null ) ? forced.getMotd() : listener.getMotd();
+        // Waterfall start - we're going on an adventure!
+//        final String motd = ( forced != null ) ? forced.getMotd() : listener.getMotd();
+        final net.kyori.adventure.text.Component motd = forced != null ? forced.motd() : listener.motd();
+        // Waterfall end
         final int protocol = ( ProtocolConstants.SUPPORTED_VERSION_IDS.contains( handshake.getProtocolVersion() ) ) ? handshake.getProtocolVersion() : bungee.getProtocolVersion();
 
         Callback<ServerPing> pingBack = new Callback<ServerPing>()
@@ -248,7 +251,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             {
                 if ( error != null )
                 {
-                    result = getPingInfo( bungee.getTranslation( "ping_cannot_connect" ), protocol );
+                    // Waterfall start - we're going on an adventure!
+//                    result = getPingInfo( bungee.getTranslation( "ping_cannot_connect" ), protocol );
+                    result = getPingInfo(net.kyori.adventure.text.Component.text(bungee.getTranslation("ping_cannot_connect")), protocol);
+                    // Waterfall end
                     bungee.getLogger().log( Level.WARNING, "Error pinging remote server", error );
                 }
 
@@ -400,7 +406,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             {
                 if ( result.isCancelled() )
                 {
-                    disconnect( result.getCancelReasonComponents() );
+                    // Waterfall start - we're going on an adventure!
+//                    disconnect( result.getCancelReasonComponents() );
+                    disconnect(result.cancelReason());
+                    // Waterfall end
                     return;
                 }
                 if ( ch.isClosed() )
@@ -529,7 +538,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             {
                 if ( result.isCancelled() )
                 {
-                    disconnect( result.getCancelReasonComponents() );
+                    // Waterfall start - we're going on an adventure!
+//                    disconnect( result.getCancelReasonComponents() );
+                    disconnect(result.cancelReason());
+                    // Waterfall end
                     return;
                 }
                 if ( ch.isClosed() )
@@ -590,7 +602,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         if ( canSendKickMessage() )
         {
-            disconnect( TextComponent.fromLegacyText( reason ) );
+            // Waterfall start - we're going on an adventure!
+//            disconnect( TextComponent.fromLegacyText( reason ) );
+            disconnect(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(reason));
+            // Waterfall end
         } else
         {
             ch.close();
@@ -600,13 +615,16 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     @Override
     public void disconnect(final BaseComponent... reason)
     {
-        if ( canSendKickMessage() )
-        {
-            ch.delayedClose( new Kick( ComponentSerializer.toString( reason ) ) );
-        } else
-        {
-            ch.close();
-        }
+        // Waterfall start - we're going on an adventure!
+//        if ( canSendKickMessage() )
+//        {
+//            ch.delayedClose( new Kick( ComponentSerializer.toString( reason ) ) );
+//        } else
+//        {
+//            ch.close();
+//        }
+        disconnect(net.kyori.adventure.text.serializer.bungeecord.BungeeComponentSerializer.get().deserialize(reason));
+        // Waterfall end
     }
 
     @Override
@@ -618,6 +636,17 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         } );
     }
 
+    // Waterfall start - we're going on an adventure!
+    @Override
+    public void disconnect(net.kyori.adventure.text.@org.checkerframework.checker.nullness.qual.NonNull Component reason) {
+        if (canSendKickMessage()) {
+            ch.delayedClose(new Kick(net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serialize(reason)));
+        } else {
+            ch.close();
+        }
+    }
+    // Waterfall end
+
     @Override
     public String getName()
     {
-- 
2.31.1

