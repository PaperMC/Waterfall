From 3c091217e7879943cb5d7e3458fec93e9d74f29a Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Fri, 8 May 2020 21:39:39 +0300
Subject: [PATCH] Save memory on scoreboard teams


diff --git a/api/src/main/java/net/md_5/bungee/api/score/Team.java b/api/src/main/java/net/md_5/bungee/api/score/Team.java
index 39f81fd1..9b762778 100644
--- a/api/src/main/java/net/md_5/bungee/api/score/Team.java
+++ b/api/src/main/java/net/md_5/bungee/api/score/Team.java
@@ -17,8 +17,8 @@ public class Team
     private String prefix;
     private String suffix;
     private byte friendlyFire;
-    private String nameTagVisibility;
-    private String collisionRule;
+    private NametagVisibility nameTagVisibility; // Waterfall - save memory on scoreboard teams
+    private CollisionRule collisionRule; // Waterfall - save memory on scoreboard teams
     private int color;
     private Set<String> players = new HashSet<>();
 
@@ -32,6 +32,92 @@ public class Team
         players.add(name.intern());
     }
 
+    // Waterfall start - save memory on scoreboard teams
+    @Deprecated
+    public String getNameTagVisibility() {
+        if (nameTagVisibility == null) {
+            return null;
+        }
+        return nameTagVisibility.getValue();
+    }
+
+    @Deprecated
+    public void setNameTagVisibility(String value) {
+        if (value == null) {
+            nameTagVisibility = null;
+            return;
+        }
+
+        if ((nameTagVisibility = NametagVisibility.VALUES.get(value)) == null) {
+            throw new IllegalStateException("Unknown team nametag visibility value '" + value + "'");
+        }
+    }
+
+    @Deprecated
+    public String getCollisionRule() {
+        if (collisionRule == null) {
+            return null;
+        }
+        return collisionRule.getValue();
+    }
+
+    @Deprecated
+    public void setCollisionRule(String value) {
+        if (value == null) {
+            collisionRule = null;
+            return;
+        }
+
+        if ((collisionRule = CollisionRule.VALUES.get(value)) == null) {
+            throw new IllegalStateException("Unknown team collision rule '" + value + "'");
+        }
+    }
+
+    @lombok.RequiredArgsConstructor
+    public enum CollisionRule {
+        ALWAYS("always"),
+        PUSH_OTHER_TEAMS("pushOtherTeams"),
+        PUSH_OWN_TEAM("pushOwnTeam"),
+        NEVER("never"),
+        ;
+
+        @lombok.Getter
+        private final String value;
+
+        public static final java.util.Map<String, CollisionRule> VALUES;
+
+        static {
+            com.google.common.collect.ImmutableMap.Builder<String, CollisionRule> valuesBuilder = com.google.common.collect.ImmutableMap.builder();
+            for (CollisionRule value : values()) {
+                valuesBuilder.put(value.getValue(), value);
+            }
+            VALUES = valuesBuilder.build();
+        }
+    }
+
+    @lombok.RequiredArgsConstructor
+    public enum NametagVisibility {
+        ALWAYS("always"),
+        HIDE_FOR_OTHER_TEAMS("hideForOtherTeams"),
+        HIDE_FOR_OWN_TEAM("hideForOwnTeam"),
+        NEVER("never"),
+        ;
+
+        @lombok.Getter
+        private final String value;
+
+        public static final java.util.Map<String, NametagVisibility> VALUES;
+
+        static {
+            com.google.common.collect.ImmutableMap.Builder<String, NametagVisibility> valuesBuilder = com.google.common.collect.ImmutableMap.builder();
+            for (NametagVisibility value : values()) {
+                valuesBuilder.put(value.getValue(), value);
+            }
+            VALUES = valuesBuilder.build();
+        }
+    }
+    // Waterfall end
+
     public void removePlayer(String name)
     {
         players.remove( name );
-- 
2.25.1

