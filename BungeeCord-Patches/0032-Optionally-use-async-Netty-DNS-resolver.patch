From ac1fa1e01c4ba26714449b8f8bc37393dbeed551 Mon Sep 17 00:00:00 2001
From: Tux <write@imaginarycode.com>
Date: Wed, 21 Dec 2016 03:13:03 -0500
Subject: [PATCH] Optionally use async Netty DNS resolver

We no longer need to cache the address for the session server now.

diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index 749059ab..9e8ce94b 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -220,6 +220,13 @@ public interface ProxyConfig
      * @return the supported versions
      */
     String getGameVersion();
+    
+    /**
+     * Whether Netty's async DNS resolver is used for account authentication.
+     *
+     * @return whether Netty's async DNS resolver is used for account authentication.
+     */
+    boolean isUseNettyDnsResolver();
 
     // Throttling options
 
diff --git a/proxy/pom.xml b/proxy/pom.xml
index 233c6aae..54061ec5 100644
--- a/proxy/pom.xml
+++ b/proxy/pom.xml
@@ -34,6 +34,18 @@
             <artifactId>netty-codec-http</artifactId>
             <scope>compile</scope>
         </dependency>
+        <!-- Waterfall Start - add Netty DNS resolver -->
+        <dependency>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-resolver-dns</artifactId>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-resolver-dns-native-macos</artifactId>
+            <classifier>osx-x86_64</classifier>
+        </dependency>
+        <!-- Waterfall End -->
         <dependency>
             <groupId>io.netty</groupId>
             <artifactId>netty-handler</artifactId>
diff --git a/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java b/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
index 111404fb..3ef11596 100644
--- a/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
+++ b/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
@@ -15,6 +15,13 @@ public class WaterfallConfiguration extends Configuration {
      */
     private String gameVersion;
 
+    /**
+     * Whether we use Netty's async DNS resolver for the HttpClient.
+     * <p>Default is true (use Netty's async DNS resolver)</p>
+     */
+    private boolean useNettyDnsResolver = true;
+
+    
     /*
      * Throttling options
      * Helps prevent players from overloading the servers behind us
@@ -35,6 +42,7 @@ public class WaterfallConfiguration extends Configuration {
         YamlConfig config = new YamlConfig(new File("waterfall.yml"));
         config.load(false); // Load, but no permissions
         gameVersion = config.getString("game_version", "").isEmpty() ? Joiner.on(", ").join(ProtocolConstants.SUPPORTED_VERSIONS) : config.getString("game_version", "");
+        useNettyDnsResolver = config.getBoolean("use_netty_dns_resolver", useNettyDnsResolver);
         // Throttling options
         tabThrottle = config.getInt("throttling.tab_complete", tabThrottle);
         disableModernTabLimiter = config.getBoolean("disable_modern_tab_limiter", disableModernTabLimiter);
@@ -45,6 +53,11 @@ public class WaterfallConfiguration extends Configuration {
         return gameVersion;
     }
 
+    @Override
+    public boolean isUseNettyDnsResolver() {
+        return useNettyDnsResolver;
+    }
+
     @Override
     public int getTabThrottle() {
         return tabThrottle;
diff --git a/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java b/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
index e0c52f21..1e9ae05e 100644
--- a/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
+++ b/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
@@ -28,6 +28,10 @@ public class HttpClient
 
     public static final int TIMEOUT = 5000;
     private static final Cache<String, InetAddress> addressCache = CacheBuilder.newBuilder().expireAfterWrite( 1, TimeUnit.MINUTES ).build();
+    // Waterfall Start - optionally use async resolver from Netty
+    private static final io.netty.resolver.dns.DnsAddressResolverGroup dnsResolverGroup =
+            new io.netty.resolver.dns.DnsAddressResolverGroup(PipelineUtils.getDatagramChannel(), io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider.INSTANCE);
+    // Waterfall End
 
     @SuppressWarnings("UnusedAssignment")
     public static void get(String url, EventLoop eventLoop, final Callback<String> callback)
@@ -56,20 +60,8 @@ public class HttpClient
                     throw new IllegalArgumentException( "Unknown scheme " + uri.getScheme() );
             }
         }
-
-        InetAddress inetHost = addressCache.getIfPresent( uri.getHost() );
-        if ( inetHost == null )
-        {
-            try
-            {
-                inetHost = InetAddress.getByName( uri.getHost() );
-            } catch ( UnknownHostException ex )
-            {
-                callback.done( null, ex );
-                return;
-            }
-            addressCache.put( uri.getHost(), inetHost );
-        }
+        
+        // Waterfall - Move address creation to implementation method
 
         ChannelFutureListener future = new ChannelFutureListener()
         {
@@ -92,7 +84,39 @@ public class HttpClient
             }
         };
 
+        // Waterfall Start - Optionally use Netty's async DNS Resolver
+        if (net.md_5.bungee.api.ProxyServer.getInstance().getConfig().isUseNettyDnsResolver()) {
+            getWithNettyResolver(eventLoop, uri, port, future, callback, ssl);
+        } else {
+            getWithDefaultResolver(eventLoop, uri, port, future, callback, ssl);
+        }
+        //new Bootstrap().channel( PipelineUtils.getChannel() ).group( eventLoop ).handler( new HttpInitializer( callback, ssl, uri.getHost(), port ) ).
+        //        option( ChannelOption.CONNECT_TIMEOUT_MILLIS, TIMEOUT ).remoteAddress( inetHost, port ).connect().addListener( future );
+    }
+
+    private static void getWithNettyResolver(EventLoop eventLoop, URI uri, int port, ChannelFutureListener future, Callback<String> callback, boolean ssl) {
+        java.net.InetSocketAddress address = java.net.InetSocketAddress.createUnresolved(uri.getHost(), port);
         new Bootstrap().channel( PipelineUtils.getChannel( null ) ).group( eventLoop ).handler( new HttpInitializer( callback, ssl, uri.getHost(), port ) ).
-                option( ChannelOption.CONNECT_TIMEOUT_MILLIS, TIMEOUT ).remoteAddress( inetHost, port ).connect().addListener( future );
+                option( ChannelOption.CONNECT_TIMEOUT_MILLIS, TIMEOUT ).resolver(dnsResolverGroup).remoteAddress( address ).connect().addListener( future );
     }
+
+    private static void getWithDefaultResolver(EventLoop eventLoop, URI uri, int port, ChannelFutureListener future, Callback<String> callback, boolean ssl) {
+        // This is identical to the Bungee implementation of #get other than the absence of the ChannelFutureListener creation
+        InetAddress inetHost = addressCache.getIfPresent( uri.getHost() );
+        if ( inetHost == null )
+        {
+            try
+            {
+                inetHost = InetAddress.getByName( uri.getHost() );
+            } catch ( UnknownHostException ex )
+            {
+                callback.done( null, ex );
+                return;
+            }
+            addressCache.put( uri.getHost(), inetHost );
+        }
+        new Bootstrap().channel( PipelineUtils.getChannel( null ) ).group( eventLoop ).handler( new HttpInitializer( callback, ssl, uri.getHost(), port ) ).
+                option( ChannelOption.CONNECT_TIMEOUT_MILLIS, TIMEOUT ).remoteAddress( inetHost, port ).connect().addListener( future );
+    }    
+    // Waterfall End
 }
-- 
2.37.3.windows.1

