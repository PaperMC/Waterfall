From 812f4f17431150febe8af3f63cb3d6c9e94671f4 Mon Sep 17 00:00:00 2001
From: Minecrell <minecrell@minecrell.net>
Date: Fri, 22 Sep 2017 12:46:47 +0200
Subject: [PATCH] Use Log4j2 for logging and TerminalConsoleAppender for
 console


diff --git a/bootstrap/pom.xml b/bootstrap/pom.xml
index cf7ef042..688f1b99 100644
--- a/bootstrap/pom.xml
+++ b/bootstrap/pom.xml
@@ -49,6 +49,9 @@
                             <Main-Class>net.md_5.bungee.Bootstrap</Main-Class>
                             <Implementation-Version>${describe}</Implementation-Version>
                             <Specification-Version>${maven.build.timestamp}</Specification-Version>
+
+                            <!-- Log4j includes custom classes for Java 9+ (#293) -->
+                            <Multi-Release>true</Multi-Release>
                         </manifestEntries>
                     </archive>
                 </configuration>
@@ -76,7 +79,17 @@
                             </excludes>
                         </filter>
                     </filters>
+                    <transformers>
+                        <transformer implementation="com.github.edwgiz.maven_shade_plugin.log4j2_cache_transformer.PluginsCacheFileTransformer" />
+                    </transformers>
                 </configuration>
+                <dependencies>
+                    <dependency>
+                        <groupId>com.github.edwgiz</groupId>
+                        <artifactId>maven-shade-plugin.log4j2-cachefile-transformer</artifactId>
+                        <version>2.13.2</version>
+                    </dependency>
+                </dependencies>
             </plugin>
         </plugins>
     </build>
diff --git a/log4j/pom.xml b/log4j/pom.xml
new file mode 100644
index 00000000..44bf7f91
--- /dev/null
+++ b/log4j/pom.xml
@@ -0,0 +1,48 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>io.github.waterfallmc</groupId>
+        <artifactId>waterfall-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>
+
+    <groupId>io.github.waterfallmc</groupId>
+    <artifactId>waterfall-log4j</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
+    <packaging>jar</packaging>
+
+    <name>Waterfall-Log</name>
+    <description>Simplistic and performant Log4j2 based logger and console API designed for use with Waterfall and Minecraft related applications.</description>
+
+    <properties>
+        <log4j2.version>2.17.2</log4j2.version>
+    </properties>
+
+    <dependencies>
+        <!-- Log4j -->
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-core</artifactId>
+            <version>${log4j2.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-iostreams</artifactId>
+            <version>${log4j2.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-jul</artifactId>
+            <version>${log4j2.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>com.lmax</groupId>
+            <artifactId>disruptor</artifactId>
+            <version>3.4.4</version>
+            <scope>runtime</scope>
+        </dependency>
+    </dependencies>
+</project>
diff --git a/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/Log4JLogHandler.java b/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/Log4JLogHandler.java
new file mode 100644
index 00000000..63f66d3c
--- /dev/null
+++ b/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/Log4JLogHandler.java
@@ -0,0 +1,59 @@
+package io.github.waterfallmc.waterfall.log4j;
+
+import com.google.common.base.Strings;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.jul.LevelTranslator;
+import org.apache.logging.log4j.message.MessageFormatMessage;
+
+import java.util.Map;
+import java.util.MissingResourceException;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.logging.Handler;
+import java.util.logging.LogRecord;
+
+/**
+ * A {@link Handler} that forwards all log messages to the Log4J logger.
+ *
+ * <p>We don't use Log4J's custom JUL LogManager currently, because it breaks
+ * adding custom handlers to JUL loggers. Some plugins may depend on that
+ * functionality...</p>
+ */
+class Log4JLogHandler extends Handler {
+
+    private final Map<String, Logger> cache = new ConcurrentHashMap<>();
+
+    @Override
+    public void publish(LogRecord record) {
+        if (!isLoggable(record)) {
+            return;
+        }
+
+        Logger logger = cache.computeIfAbsent(Strings.nullToEmpty(record.getLoggerName()), LogManager::getLogger);
+
+        String message = record.getMessage();
+        if (record.getResourceBundle() != null) {
+            try {
+                message = record.getResourceBundle().getString(message);
+            } catch (MissingResourceException ignored) {
+            }
+        }
+
+        final Level level = LevelTranslator.toLevel(record.getLevel());
+        if (record.getParameters() != null && record.getParameters().length > 0) {
+            logger.log(level, new MessageFormatMessage(message, record.getParameters()), record.getThrown());
+        } else {
+            logger.log(level, message, record.getThrown());
+        }
+    }
+
+    @Override
+    public void flush() {
+    }
+
+    @Override
+    public void close() {
+    }
+
+}
diff --git a/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.java b/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.java
new file mode 100644
index 00000000..e046897a
--- /dev/null
+++ b/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.java
@@ -0,0 +1,34 @@
+package io.github.waterfallmc.waterfall.log4j;
+
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.io.IoBuilder;
+import java.util.logging.Handler;
+import java.util.logging.Logger;
+
+public final class WaterfallLogger {
+
+    private WaterfallLogger() {
+    }
+
+    public static Logger create() {
+        org.apache.logging.log4j.Logger redirect = LogManager.getRootLogger();
+        System.setOut(IoBuilder.forLogger(redirect).setLevel(Level.INFO).buildPrintStream());
+        System.setErr(IoBuilder.forLogger(redirect).setLevel(Level.ERROR).buildPrintStream());
+
+        Logger root = Logger.getLogger("");
+        root.setUseParentHandlers(false);
+
+        // Remove existing handlers
+        for (Handler handler : root.getHandlers()) {
+            root.removeHandler(handler);
+        }
+
+        // Setup forward log handler
+        root.setLevel(java.util.logging.Level.ALL); // Log4j will handle filtering the log
+        root.addHandler(new Log4JLogHandler());
+
+        return Logger.getLogger("BungeeCord");
+    }
+
+}
diff --git a/log4j/src/main/resources/log4j2.component.properties b/log4j/src/main/resources/log4j2.component.properties
new file mode 100644
index 00000000..e43f5dac
--- /dev/null
+++ b/log4j/src/main/resources/log4j2.component.properties
@@ -0,0 +1,2 @@
+log4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
+log4j.skipJansi=true
diff --git a/log4j/src/main/resources/log4j2.xml b/log4j/src/main/resources/log4j2.xml
new file mode 100644
index 00000000..e32dd7b5
--- /dev/null
+++ b/log4j/src/main/resources/log4j2.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="warn" shutdownHook="disable">
+    <Appenders>
+        <TerminalConsole name="TerminalConsole">
+            <PatternLayout pattern="%highlightError{[%d{HH:mm:ss} %level]: %minecraftFormatting{%msg}%n%xEx}" />
+        </TerminalConsole>
+        <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz" immediateFlush="false">
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %minecraftFormatting{%msg}{strip}%n" />
+            <Policies>
+                <TimeBasedTriggeringPolicy />
+                <OnStartupTriggeringPolicy />
+            </Policies>
+        </RollingRandomAccessFile>
+    </Appenders>
+
+    <Loggers>
+        <Root level="info">
+            <AppenderRef ref="TerminalConsole" />
+            <AppenderRef ref="File" />
+        </Root>
+    </Loggers>
+</Configuration>
+io/github/waterfallmc/waterfall/log4j/WaterfallLogger.class
+io/github/waterfallmc/waterfall/log4j/Log4JLogHandler.class
diff --git a/log4j/target/waterfall-log4j-1.19-R0.1-SNAPSHOT.jar b/log4j/target/waterfall-log4j-1.19-R0.1-SNAPSHOT.jar
new file mode 100644
index 0000000000000000000000000000000000000000..766ef1f04a262f140d935f70c9b7879cce847640
GIT binary patch
literal 6609
zcmbtZ1yqz<v_=6z>25??V1^iCBvcw^7$l_>q(N$i6bT8XgaIT4MCo#nE@7ku=|%-9
zhYm$rQFwz~;a=me``$Zi{jt{UZ|{Bnv(MgVf1?4##XEy@Fbd;ab-us+bvuoH!W4C6
z0jlasf*OB`5#pe*VpGc$l{c|J-@#tge;0$vs;ep~YU==DO6#!B4mBtM*hc~d@O5|g
zlxhhLf+lC21t8t81fT#pLW1ectFg5F^_;h=Q|@a~LAA79AMv56nTaT4Kw323R2^FD
z)Zv=~8*13!As`n>eTnDiPzG|}utGhEc<&h(8C)58W1uk*=Z9~<P5~F|o2}E4^S=rl
z%p5CVZR={|X7(>~wEvLvFm<(bwlcN1cQF4K4BH<uNBDn1bN>gly_2=*%_ALz-&c_7
zss$7ANgN!_Q#d#Wv->V10=(s5-=zz48Wke0o701z^iIaCh~v43RoFzy50Kcp^WE+h
z7@^H4lYfwGA-lIr&jVWz1q7c2-H@j|zZU&bRsETjVFSOUAgb-n>ko9NY@GQs&x5vH
zL_%H^7x?njm1jp;Vs5crTJ;ZZv9@o2WI9>EO(-QMZ)YOHojLb{y2O`YUiH}$W5ko4
zCC}&LvN>5(VF9-b$cbMk76<BXq0`1T0)zd!->p|WG@?=E6Qd;x+n3YCQzLVQ$cFvv
z10?wD<3Y5#B~PjArn)aI(O!wxCk~cDd5sI6)7lAJWJqNnQu6*FtFz8Hro!0CBG_0j
z2`kQ(zpt|E%<$00UBaluTmw*a1wo8Qno@qEiUK~6Ncm}4^28D~Yqp4v4(%W*(S<<p
zMJhY(rjX#;0J;?G<#jL7Q=5uhdoHF?Df1rA6;lMwT-J%u7~B>QHS+@M272x1Ptn~j
z8@_Cn5Cakh>J1;8xk1IpysW*!z=+q`fH73u;^P6TNTp)(4)6p1R>#lD{)3G7GP`hx
zcKFQk_4aUIR<<@nEYDS6LlB)!c^dk7U)5!f|M`>D$mo$8(gF)$-(wY_Xhx?hWnqMK
zT&Q39_<9T+o!nY~-DdHHCsk@jimkKKX!5Se+iD>xsgX6WoIrgCqhw**GhVsFmE`6E
zey?QEhLL`(EBa@PEzVYwII&eG_FH`H>HYZi#E&g=7&Er|S%M<im?_7`48>8*0L<JR
ztt~ANLubNnREXTS#{@yO<B%uuMxNIlG5~Pxb>(PFRXTgur=olzIC@&#;MM+kX$&_a
zrQTN~u|cVS;i8Yn_5$;DK<r)RGIe^E(rvnr^iR~)_*_{_oz@X|>I;MF=3y_$Jh=B)
zaVaxE(R%S-Yd9uwGFs?)$`5^g%nh%omEyW7oWfzUNzy!`@c9DDFFtb5ZB4;FJ~L)p
z%_yrT)?TXX30#Y@HV(60Bg`nuB<PyE61z>Ikd<<Q{l{Lg&&+tnkcYP|-$aF&`x!oE
zuPYj(k3g}Bx6IGI4A<*-N-(FTW*6kF+lwi0DGYFR^YY3Y%yO~YVO8-~_^d(3*i1kO
zF;0I(7!f-2@GMgSVVFqqnb?lk{-p3?tLqRFlmohf5#zt4E_WWZ%IPgDD{CuEb)UPG
zr?`Sbt?J5|ozRZNy0Hvl-hF}k2_m9Ks%p|6?%iCQsfYQBQ<~*uYT6uJ#fe%a;Wg@%
zu8soke0jmdB45TO*87uQt_6q~5TT97<2;>C<Kd=JX9r};#K-ZQ#UmDswaxdl^WxU8
z#wIg<)ocI4#8n>P$s*$rAT(HuS3^bM-3RIcl%uL?HdUKZZ|kI0t+{=tLZsBBp0gO3
ziTkzXQV}AgJbgD191(`YL0{H8wJV#w--c|0%3BmW=edP6Qj`K|9jQ~RiAQG{SzTX`
z`^#Nll8ly4l6$E(-^pyZhi?|fu(|(qG+4^tU0U2@Eu`|3Ag4!4deP<!`mNNT0&KaL
zv^y4?i~|X9aHRfoV$=JPX4Ramtu38_=Juv8E{}At>rpAw`v%$TQw9YP;!~3=j(Tg*
z(v)-2(s0sTBZP@wU3twZWgibT=qX9d+5W~=x8Sg(I9)ckgZoAA_U(y+5s!FSu?*sq
z=mj3o$4=>w>%P*U&nwSNj8Ez-a73_jy4o<SZio=CgyEW2rQ0%PjTAm5Ag+^mluac7
z;uLv%lhH?ILB(Yw5Y%}a?GR#}J{}dc^tM7C%t+@!GEgd^sQsqjn!d<VW2@G0Sk6m4
zMhxTUnj6(3ML#Iqj5yOooG^ZC{8PA_Q`SsXyz`@xPhUy9lx7v;6T!yYMk=Ow8It2O
z^iANVjpT3bxC<gSOGYm#o7B{B7H=fZFd$14E#^lPWbsTQ?@QyM9VWwWBw?7Xax2Bk
zt5&4Co>1;+EenTh@-!l;=F3R}uGc?B-e*o&9e<&t`PuPO)ZOJQ8z|sG>#gj9V0+ym
zfu?9(d}v`@M^?#N(p;i8kjA%bdsnE(Pm~sJ&`N_W(C17@Yq~mFwVye>U>lY>_^?O0
zQyGD;;7FJ5T62RaY+ACF#QT+y+%nnrOvS1tsEQ{kp8uQAO{3Y+2RkR@!Dp)4dat;)
zjt)Fr9surT;GSy`X$8FFZrgS4k&5bz4`{*BMO`h*#{gRy!v^Dls?6s(5UrvN+%=XA
zr*EFvj(sxB!2KMdw3fG6)dP=6vXYX`&;_As{5L%AE`1n^oNG<6L<IV#-x_#xS&qU1
z5vx;TYiiJEeD)%jSJqHj*0oJ<sPYWTmep-pJ+NH2=K*nG_CTx=sxE2cY)BH6zbRXf
z&QW&<S(2d$umKNdGR^Lr@kenkWxl(d-}v%Xh^&)q&291QJl8ZI+Y7!sL8+HMai#D0
z+-7I!Zq_8zIjOmCr7cb5GOTG0_6V?M;mZJzX*KZ~cRcGz&sYSnJ#O#h=LBY`?Ncuf
z$eVn5hSP*wQrNE|LErX{sOWLiO0b56A<Kv0Q%Jt9oxXF@jn<;stMpgc3GT4TcKeOV
z&u_Z~)89f4IH;8gyM?SPZ|$;3NqlWMM+|ywgE2%$M2gQD19=MVGDZf;=pQi+6$)^z
zQ?-d-+%q=6g#IG4&+IX>!@18d&icadZOiPc_|zTt3I+NZX+=U}tyuXD{YQ<8DN0DI
zQ!?v{;Z2#v;i_ToXJ}>8`C=FvY0tmU*-2UJD+&}`<wDKDnM|ha+96S5L8*HBa$3r;
z)&SD`ntONpML7KU9(<GdXEpJxAC|s|kAuTZ{J+`k*gY-^!QNC%9WCsSHv3frZ6;;%
zy%xfj5Vv~dX>PP&RC6&BV?-L-Kn}-q50?vAVa~9OqP_aOo%N0S`*+({UdbDOTh4E`
zj^n@Lt1`or^<ZQ9jDJ*=mhYRf3pKk-do?*8dtc{1Y2)y$x-c8{Hc|}qhKUD_a}~31
z)Jp)yoYy=Dx|d=ajf*lndfms%V0Z4OaYd(K-n92tayx)4D5?s}e0-jYq);218pgh#
zw6Rqt5JfsL8eisVQXS}9&o&`+{sNnVdT8oj?bB!C-=Tuu4jNCG*F~fckt@lHxLOSt
zon~j@SsxW!uD?%=7~qJjePzITi!C}YBDCTeqzOUS-)4t!#c&~6NuKw16g~GBZK|l<
zh;vxz4q-Q#c&MT@3y=*cMMKx7I~<p%-V~Ug-2yFxQqogBQfj$Ev(5U7H&a$E3`Wf7
zi*P&IB{44_+(}k}4H`bhEeTxn&}cfx%&n!6XA!-)r|TrQO@}+W3X@CbCF^Gahh0Sa
zlAPu|pU8J6RC}$EddK<ZC%Nv74dHOq_KdTmDx+`BIk}RnspfvtF7IlA5IzqYLw*Ks
zab3zFQQ`vP=1`37f+xG+(3&vGvq^B1yCIrSh6he^fic(l#v5%K_$DxG3QyfRr5|pX
zW%}AGfOy41GCd9>(3Iv@o0zKHQE&!RNo=6y&)3?|*o_ejLgjN$hn3~t%Kw@-7&*e}
zVcg2ZOeY#{7H$gHR*FB#uhmx5xFs+prL+Ccqn&=C2A@Ta6O=q~Z7Yol!^pjArPHo=
z7iy`djLa{Rimo*l^wM_Kmk=`wU&~Bb7n`b5ERL^Lt<CxZ2|A~lle_eUYc4hz#0bPd
zV&m-_+#E-UWpoJu*L3HSA(HnB7_FkS&<YoYrzyMi-+14V2QSn_wOzoM%(*;aSvAO9
z$h`*Z)M_rZ8mIN0)Y3G5`T;(-lxXXm+s|Pe^d_;Cd<!}d50Vw;8M7ax_po4=*LP_Y
z8>+3PUnk-oYFy}aDYp*5WU*O4G*0uxWWh(@IU9|QYQ*B9gxG=tVdmU)?FKsMhT%$G
z{bAjG{#KqD93o3Z<_}+yy`9pxnjf)=&QJlMi_f3DUUpIuQeb+4)syxy$!^=-Je7%R
z{}$7GvKkpkj2D_8GSDvwCNj2W`U*bz6#i}yPE@I9q&ttaeFpB(>IpG(l#L3~r#@9q
zO1a2e`1o7-9&dacyC31W)B{Ay%#*<?#{%loO6b~WagJ9lHEknf!h8(|0|^U2@0zK|
z>JinO2_a}Hgf~(Uj2>L2L0f^}<tAm{12m@FJ^Q+mM>G6QN`k)~h@TC6TjAO&Fy+~g
z*-4$6--qC}M(UVGC@zF3G=eYFr2$+eo-FD~0KTA=O96?>;b_;kj5s?{Mp>c=zrsP>
zqCu+F&jdF6ET6p6Hr#Hv%1g;)zP`^S+RyG;8%ZX&d-i?CD_SP*0#unhj~M*y^%rdJ
zf}2e5MaMsr3tr+*SS3_8TqV#NC<BA#1-~&=6!i4^)JnS0q2|m)rMAgArY7HmHu8D~
zOp2X~B)0Hk*5z;R;Uvt1z7aaL!s)J;iBWe=gif(u0I9wB;sTaW%fnGOWvbgY;~#4p
zL1>J{^+s}V4k<gIez2T#X$Pl8I7A?5@^Y)S>)R>{<A^4|_J;iE%Sdw4XiHoo1=yuo
zwqg~1%-uv~{}7R(EMnBk{(E{eW)|i#=JQA{AtY$oiFvMwI?|ns4EJ2Z##4$3T42gG
zWyyl552AX~M#{zbSsIJxRWmY?!xz)wFB&RM3mMQ&WILzp_J2Bq1r)>;Ud5ih?64Qp
z(IFpb?&JV>a<p`G1;U-3;Fiv=ww5j(ZC51PMEarKJ^ZRD-qY$`sxV-iU`dxC<TX@4
zMXg(92rF@=rxQxh$8B)=o?_nZ(3f$ZZMTtZ{RF(phSTBskBHJMz*434{KC(`0~MLM
zqH#q3(x#JP-8o_!98BFU9gmvYUt4yrUxjU*fQKDC@Tjx?*Unt*zp6M=2l(DbA9+QH
zlYwPH#<ovx@?+bkY3!+1`v0mD?&NULVGZfRA_s)X>$de0!|awTj81DlRPi#;ibwI9
zRo`Zja0|U;AqAs&{{n<a5`7EMqTtW$>H;}QuUn0S2PI4Cq@QH)mF)|S-@8F~m)D(~
z5!A7xegorNf;Nf1kUH5`B@09vyU*w6!`-M5rEL}vG%B8nP)8togdn?`K2l>>cCu0V
zV?UfWvro@L@s1p`&oF&VNE4hjN0>pEo9d<Blys&_M#2Mshrvk!7rEfFf~eW<*exJ5
ztD&0s`5J|u0AZ!2Vj7qWwaZ+8Ey}0`mtM-E{~A=a#}f%ofh4|P*qvU-yAsotGrBp8
z`9=pZoM2c{I1wQkB1ZI_+T1LnQ3xM$3K>LVyAZyY)M3ebuWfF3PP8xwhh%ob0O*$b
z;b8%hePj-!m^Qo5JS7mOu39GcLG9LuOjO(h$IOy@8?w&Lu0aBK>2nfEZ444F$VYbG
zCzkE1hEp^~Y-N+ryZZ!BazC_Nl_%$`yG&Dt=k}1pm#cgd>3|#7g)dYZRic^S8oSY9
zOEXQZLz%f+m-Z6f1s@G#NJTe+AgPI?X`7BV21aS1w9l)<5~}?gimLq}kNLCKm>YXV
z{3|1aUH%_112-PGea@q12Trwwc9^l|PObEuYcNUJPy@#8o&~F50;$wKzgD*}p?&r!
zK(Jy{;l?AA5LMz;<}F^gEK)81Ysr{PF*B><v|%jI*b-DfLYTsz2Mm#<Vm?EK7YyFt
zr<jQS(vynx#r@}LE7zNY!4DgJ!PrY4d;PSJe!n$-j_ZRUJl_7=?pL~?0EmDpOj9La
zXB8#@?ZRl0o`>nK@^xto3F!%y6^V#dh=}OH-APC_g+zoz-a`c21p%vS#a*4Rp*;d^
zys&<Lf<-|Hw6m=ZHVYBpYg2=&0Z;Jx5iQM5=OkMo;<9LItY_!mGA=S0E}mkTXIMP7
zd*KwG*G@3}1U6BeI7yBBXHpV7OY9)WS&=<>9!>Zd_Ir}@K=@!}`txA#N3g$9md6@?
zO*;ov;^8<j+=PAoPAvY}(?kCcAP0cyL%<Qy_-EV!)p$4#aKtD6PEa1L+xPVLXB})m
zRD8F6`Hwn|^kFmGpS2xOk%!~JBj5j^?MJr!q4W3D<PWWx{*73j-!b2b%41)CPfs1=
zwy>*mi2EB^^)viu^5Gb+hvmDD+25m&f&I8g?}CR@(fb`0@w1_y8=qrC3fN%yZ-&%<
z*9QG;=;u;?Y-ki)O8@$hzbov=ihd37gCcx5$Z_`fZ<7CQi~K0bKbG@X@Ig^N1}FRq
z{(T<$H-8R_^s&m3|Elt6<&H}B53he;w0{`M^ao(6&!enxIOX4a{j-U`O8D_)4#W26
j%zSLAgzEoc={QeoK=H8wd_dV!;P7G_?wEtWVsQQkTl8lG

literal 0
HcmV?d00001

diff --git a/log4j/waterfall-log4j.iml b/log4j/waterfall-log4j.iml
new file mode 100644
index 00000000..b5cd277d
--- /dev/null
+++ b/log4j/waterfall-log4j.iml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <output-test url="file://$MODULE_DIR$/target/test-classes" />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="Maven: org.apache.logging.log4j:log4j-core:2.17.2" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.logging.log4j:log4j-api:2.17.2" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.logging.log4j:log4j-iostreams:2.17.2" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.logging.log4j:log4j-jul:2.17.2" level="project" />
+    <orderEntry type="library" scope="RUNTIME" name="Maven: org.apache.logging.log4j:log4j-slf4j-impl:2.17.2" level="project" />
+    <orderEntry type="library" scope="RUNTIME" name="Maven: org.slf4j:slf4j-api:1.7.25" level="project" />
+    <orderEntry type="library" scope="RUNTIME" name="Maven: com.lmax:disruptor:3.4.4" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.13.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.hamcrest:hamcrest-core:1.3" level="project" />
+    <orderEntry type="library" name="Maven: com.google.guava:guava:31.0.1-jre" level="project" />
+    <orderEntry type="library" name="Maven: com.google.guava:failureaccess:1.0.1" level="project" />
+    <orderEntry type="library" name="Maven: com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava" level="project" />
+    <orderEntry type="library" name="Maven: com.google.code.findbugs:jsr305:3.0.2" level="project" />
+    <orderEntry type="library" name="Maven: org.checkerframework:checker-qual:3.12.0" level="project" />
+    <orderEntry type="library" name="Maven: com.google.errorprone:error_prone_annotations:2.7.1" level="project" />
+    <orderEntry type="library" name="Maven: com.google.j2objc:j2objc-annotations:1.3" level="project" />
+    <orderEntry type="library" scope="PROVIDED" name="Maven: com.google.code.findbugs:findbugs-annotations:3.0.1" level="project" />
+    <orderEntry type="library" scope="PROVIDED" name="Maven: org.projectlombok:lombok:1.18.22" level="project" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index fad424b6..2b544c23 100644
--- a/pom.xml
+++ b/pom.xml
@@ -56,11 +56,12 @@
         <module>config</module>
         <module>event</module>
         <module>log</module>
+        <module>log4j</module>
         <module>module</module>
         <module>protocol</module>
         <module>proxy</module>
         <module>query</module>
-        <module>slf4j</module>
+        <!--<module>slf4j</module>-->
         <module>native</module>
     </modules>
 
diff --git a/proxy/pom.xml b/proxy/pom.xml
index 8506b681..205162db 100644
--- a/proxy/pom.xml
+++ b/proxy/pom.xml
@@ -71,7 +71,7 @@
         </dependency>
         <dependency>
             <groupId>io.github.waterfallmc</groupId>
-            <artifactId>waterfall-log</artifactId>
+            <artifactId>waterfall-log4j</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
@@ -93,12 +93,13 @@
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
+        <!-- // Waterfall - We already bundle an slf4j impl
         <dependency>
             <groupId>net.md-5</groupId>
             <artifactId>bungeecord-slf4j</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
-        </dependency>
+        </dependency> // Waterfall - We already bundle an slf4j impl -->
         <dependency>
             <groupId>net.sf.jopt-simple</groupId>
             <artifactId>jopt-simple</artifactId>
@@ -130,6 +131,25 @@
             <version>1.8.0</version>
             <scope>runtime</scope>
         </dependency>
+        <!-- Waterfall start - Console improvements - bring back slf4j-->
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-jdk14</artifactId>
+            <version>1.7.36</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>net.minecrell</groupId>
+            <artifactId>terminalconsoleappender</artifactId>
+            <version>1.3.0</version>
+        </dependency>
+        <dependency>
+            <groupId>org.jline</groupId>
+            <artifactId>jline-terminal-jansi</artifactId>
+            <version>3.21.0</version>
+            <scope>runtime</scope>
+        </dependency>
+        <!-- Waterfall end -->
     </dependencies>
 
     <!-- Waterfall start - copy license files into jar -->
diff --git a/proxy/src/main/java/io/github/waterfallmc/waterfall/console/WaterfallConsole.java b/proxy/src/main/java/io/github/waterfallmc/waterfall/console/WaterfallConsole.java
new file mode 100644
index 00000000..765d24bc
--- /dev/null
+++ b/proxy/src/main/java/io/github/waterfallmc/waterfall/console/WaterfallConsole.java
@@ -0,0 +1,39 @@
+package io.github.waterfallmc.waterfall.console;
+
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.minecrell.terminalconsole.SimpleTerminalConsole;
+import org.jline.reader.LineReader;
+import org.jline.reader.LineReaderBuilder;
+
+public final class WaterfallConsole extends SimpleTerminalConsole {
+
+    @Override
+    protected LineReader buildReader(LineReaderBuilder builder) {
+        ProxyServer proxy = ProxyServer.getInstance();
+        return super.buildReader(builder
+                .appName(proxy.getName())
+        );
+    }
+
+    @Override
+    protected boolean isRunning() {
+        return BungeeCord.getInstance().isRunning;
+    }
+
+    @Override
+    protected void runCommand(String command) {
+        ProxyServer proxy = ProxyServer.getInstance();
+        if (!proxy.getPluginManager().dispatchCommand(proxy.getConsole(), command)) {
+            proxy.getConsole().sendMessage(new ComponentBuilder("Command not found").color(ChatColor.RED).create());
+        }
+    }
+
+    @Override
+    protected void shutdown() {
+        ProxyServer.getInstance().stop();
+    }
+
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 1db22fc6..66d38b40 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -46,7 +46,6 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.logging.Handler;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import jline.console.ConsoleReader;
 import lombok.Getter;
 import lombok.Setter;
 import lombok.Synchronized;
@@ -79,14 +78,11 @@ import net.md_5.bungee.command.CommandEnd;
 import net.md_5.bungee.command.CommandIP;
 import net.md_5.bungee.command.CommandPerms;
 import net.md_5.bungee.command.CommandReload;
-import net.md_5.bungee.command.ConsoleCommandCompleter;
 import net.md_5.bungee.command.ConsoleCommandSender;
 import net.md_5.bungee.compress.CompressFactory;
 import net.md_5.bungee.conf.Configuration;
 import net.md_5.bungee.conf.YamlConfig;
 import net.md_5.bungee.forge.ForgeConstants;
-import net.md_5.bungee.log.BungeeLogger;
-import net.md_5.bungee.log.LoggingOutputStream;
 import net.md_5.bungee.module.ModuleManager;
 import net.md_5.bungee.netty.PipelineUtils;
 import net.md_5.bungee.protocol.DefinedPacket;
@@ -95,8 +91,6 @@ import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.query.RemoteQuery;
 import net.md_5.bungee.scheduler.BungeeScheduler;
 import net.md_5.bungee.util.CaseInsensitiveMap;
-import org.fusesource.jansi.AnsiConsole;
-import org.slf4j.impl.JDK14LoggerFactory;
 
 /**
  * Main BungeeCord proxy class.
@@ -157,8 +151,12 @@ public class BungeeCord extends ProxyServer
     private final File pluginsFolder = new File( "plugins" );
     @Getter
     private final BungeeScheduler scheduler = new BungeeScheduler();
+    // Waterfall start - Remove ConsoleReader for JLine 3 update
+    /*
     @Getter
     private final ConsoleReader consoleReader;
+    */
+    // Waterfall end
     @Getter
     private final Logger logger;
     public final Gson gson = new GsonBuilder()
@@ -209,6 +207,8 @@ public class BungeeCord extends ProxyServer
         // BungeeCord. This version is only used when extracting the libraries to their temp folder.
         System.setProperty( "library.jansi.version", "BungeeCord" );
 
+        // Waterfall start - Use TerminalConsoleAppender and Log4J
+        /*
         AnsiConsole.systemInstall();
         consoleReader = new ConsoleReader();
         consoleReader.setExpandEvents( false );
@@ -218,6 +218,9 @@ public class BungeeCord extends ProxyServer
         JDK14LoggerFactory.LOGGER = logger;
         System.setErr( new PrintStream( new LoggingOutputStream( logger, Level.SEVERE ), true ) );
         System.setOut( new PrintStream( new LoggingOutputStream( logger, Level.INFO ), true ) );
+        */
+        logger = io.github.waterfallmc.waterfall.log4j.WaterfallLogger.create();
+        // Waterfall end
 
         pluginManager = new PluginManager( this );
         getPluginManager().registerCommand( null, new CommandReload() );
@@ -494,10 +497,7 @@ public class BungeeCord extends ProxyServer
 
         getLogger().info( "Thank you and goodbye" );
         // Need to close loggers after last message!
-        for ( Handler handler : getLogger().getHandlers() )
-        {
-            handler.close();
-        }
+        org.apache.logging.log4j.LogManager.shutdown(); // Waterfall
 
         // Unlock the thread before optionally calling system exit, which might invoke this function again.
         // If that happens, the system will obtain the lock, and then see that isRunning == false and return without doing anything.
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
index c2512dd5..0db3d76a 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
@@ -68,6 +68,9 @@ public class BungeeCordLauncher
 
         if ( !options.has( "noconsole" ) )
         {
+            // Waterfall start - Use TerminalConsoleAppender
+            new io.github.waterfallmc.waterfall.console.WaterfallConsole().start();
+            /*
             String line;
             while ( bungee.isRunning && ( line = bungee.getConsoleReader().readLine( ">" ) ) != null )
             {
@@ -76,6 +79,8 @@ public class BungeeCordLauncher
                     bungee.getConsole().sendMessage( new ComponentBuilder( "Command not found" ).color( ChatColor.RED ).create() );
                 }
             }
+            */
+            // Waterfall end
         }
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandCompleter.java b/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandCompleter.java
deleted file mode 100644
index 3e5ca394..00000000
--- a/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandCompleter.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package net.md_5.bungee.command;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.stream.Collectors;
-import jline.console.completer.Completer;
-import lombok.RequiredArgsConstructor;
-import net.md_5.bungee.api.ProxyServer;
-
-@RequiredArgsConstructor
-public class ConsoleCommandCompleter implements Completer
-{
-
-    private final ProxyServer proxy;
-
-    @Override
-    public int complete(String buffer, int cursor, List<CharSequence> candidates)
-    {
-        int lastSpace = buffer.lastIndexOf( ' ' );
-        if ( lastSpace == -1 )
-        {
-            String lowerCase = buffer.toLowerCase( Locale.ROOT );
-            candidates.addAll( proxy.getPluginManager().getCommands().stream()
-                    .map( Map.Entry::getKey )
-                    .filter( (name) -> name.toLowerCase( Locale.ROOT ).startsWith( lowerCase ) )
-                    .collect( Collectors.toList() ) );
-        } else
-        {
-            List<String> suggestions = new ArrayList<>();
-            proxy.getPluginManager().dispatchCommand( proxy.getConsole(), buffer, suggestions );
-            candidates.addAll( suggestions );
-        }
-
-        return ( lastSpace == -1 ) ? cursor - buffer.length() : cursor - ( buffer.length() - lastSpace - 1 );
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java b/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
index 9ec4920e..d3abee44 100644
--- a/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
+++ b/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
@@ -44,7 +44,7 @@ public class ModuleManager
         ModuleVersion bungeeVersion = ModuleVersion.parse( proxy.getVersion() );
         if ( bungeeVersion == null )
         {
-            System.out.println( "Couldn't detect bungee version. Custom build?" );
+            proxy.getLogger().warning( "Couldn't detect bungee version. Custom build?" ); // Waterfall - Use logger
             return;
         }
 
diff --git a/slf4j/nb-configuration.xml b/slf4j/nb-configuration.xml
deleted file mode 100644
index 7e465924..00000000
--- a/slf4j/nb-configuration.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project-shared-configuration>
-    <!--
-    This file contains additional configuration written by modules in the NetBeans IDE.
-    The configuration is intended to be shared among all the users of project and
-    therefore it is assumed to be part of version control checkout.
-    Without this configuration present, some functionality in the IDE may be limited or fail altogether.
-    -->
-    <properties xmlns="http://www.netbeans.org/ns/maven-properties-data/1">
-        <!--
-        Properties that influence various parts of the IDE, especially code formatting and the like. 
-        You can copy and paste the single properties, into the pom.xml file and the IDE will pick them up.
-        That way multiple projects can share the same settings (useful for formatting rules for example).
-        Any value defined here will override the pom.xml file value but is only applicable to the current project.
-        -->
-        <org-netbeans-modules-editor-indent.CodeStyle.usedProfile>project</org-netbeans-modules-editor-indent.CodeStyle.usedProfile>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.classDeclBracePlacement>NEW_LINE</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.classDeclBracePlacement>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.otherBracePlacement>NEW_LINE</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.otherBracePlacement>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.methodDeclBracePlacement>NEW_LINE</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.methodDeclBracePlacement>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinMethodCallParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinMethodCallParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSwitchParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSwitchParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinCatchParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinCatchParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinTryParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinTryParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSynchronizedParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSynchronizedParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinArrayInitBrackets>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinArrayInitBrackets>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinWhileParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinWhileParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinIfParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinIfParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinForParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinForParens>
-    </properties>
-</project-shared-configuration>
diff --git a/slf4j/pom.xml b/slf4j/pom.xml
deleted file mode 100644
index b995ba85..00000000
--- a/slf4j/pom.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>net.md-5</groupId>
-        <artifactId>bungeecord-parent</artifactId>
-        <version>1.19-R0.1-SNAPSHOT</version>
-        <relativePath>../pom.xml</relativePath>
-    </parent>
-
-    <groupId>net.md-5</groupId>
-    <artifactId>bungeecord-slf4j</artifactId>
-    <version>1.19-R0.1-SNAPSHOT</version>
-    <packaging>jar</packaging>
-
-    <name>BungeeCord-SLF4J</name>
-    <description>Wrapper over SLF4J for BungeeCord purposes.</description>
-
-    <properties>
-        <checkstyle.skip>true</checkstyle.skip>
-        <maven.deploy.skip>true</maven.deploy.skip>
-        <maven.javadoc.skip>true</maven.javadoc.skip>
-    </properties>
-
-    <dependencies>
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>1.7.32</version>
-            <scope>compile</scope>
-        </dependency>
-    </dependencies>
-</project>
diff --git a/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerAdapter.java b/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerAdapter.java
deleted file mode 100644
index 49589454..00000000
--- a/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerAdapter.java
+++ /dev/null
@@ -1,700 +0,0 @@
-/**
- * Copyright (c) 2004-2011 QOS.ch
- * All rights reserved.
- *
- * Permission is hereby granted, free  of charge, to any person obtaining
- * a  copy  of this  software  and  associated  documentation files  (the
- * "Software"), to  deal in  the Software without  restriction, including
- * without limitation  the rights to  use, copy, modify,  merge, publish,
- * distribute,  sublicense, and/or sell  copies of  the Software,  and to
- * permit persons to whom the Software  is furnished to do so, subject to
- * the following conditions:
- *
- * The  above  copyright  notice  and  this permission  notice  shall  be
- * included in all copies or substantial portions of the Software.
- *
- * THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
- * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
- * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- *
- */
-package org.slf4j.impl;
-
-import java.util.logging.Level;
-import java.util.logging.LogRecord;
-
-import org.slf4j.Logger;
-import org.slf4j.Marker;
-import org.slf4j.event.EventConstants;
-import org.slf4j.event.LoggingEvent;
-import org.slf4j.helpers.FormattingTuple;
-import org.slf4j.helpers.MarkerIgnoringBase;
-import org.slf4j.helpers.MessageFormatter;
-import org.slf4j.spi.LocationAwareLogger;
-
-/**
- * A wrapper over {@link java.util.logging.Logger java.util.logging.Logger} in
- * conformity with the {@link Logger} interface. Note that the logging levels
- * mentioned in this class refer to those defined in the java.util.logging
- * package.
- * 
- * @author Ceki G&uuml;lc&uuml;
- * @author Peter Royal
- */
-public final class JDK14LoggerAdapter extends MarkerIgnoringBase implements LocationAwareLogger {
-
-    private static final long serialVersionUID = -8053026990503422791L;
-
-    transient final java.util.logging.Logger logger;
-
-    // WARN: JDK14LoggerAdapter constructor should have only package access so
-    // that only JDK14LoggerFactory be able to create one.
-    JDK14LoggerAdapter(java.util.logging.Logger logger) {
-        this.logger = logger;
-        this.name = logger.getName();
-    }
-
-    /**
-     * Is this logger instance enabled for the FINEST level?
-     * 
-     * @return True if this Logger is enabled for level FINEST, false otherwise.
-     */
-    public boolean isTraceEnabled() {
-        return logger.isLoggable(Level.FINEST);
-    }
-
-    /**
-     * Log a message object at level FINEST.
-     * 
-     * @param msg
-     *          - the message object to be logged
-     */
-    public void trace(String msg) {
-        if (logger.isLoggable(Level.FINEST)) {
-            log(SELF, Level.FINEST, msg, null);
-        }
-    }
-
-    /**
-     * Log a message at level FINEST according to the specified format and
-     * argument.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for level FINEST.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg
-     *          the argument
-     */
-    public void trace(String format, Object arg) {
-        if (logger.isLoggable(Level.FINEST)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg);
-            log(SELF, Level.FINEST, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level FINEST according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the FINEST level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg1
-     *          the first argument
-     * @param arg2
-     *          the second argument
-     */
-    public void trace(String format, Object arg1, Object arg2) {
-        if (logger.isLoggable(Level.FINEST)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);
-            log(SELF, Level.FINEST, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level FINEST according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the FINEST level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param argArray
-     *          an array of arguments
-     */
-    public void trace(String format, Object... argArray) {
-        if (logger.isLoggable(Level.FINEST)) {
-            FormattingTuple ft = MessageFormatter.arrayFormat(format, argArray);
-            log(SELF, Level.FINEST, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log an exception (throwable) at level FINEST with an accompanying message.
-     * 
-     * @param msg
-     *          the message accompanying the exception
-     * @param t
-     *          the exception (throwable) to log
-     */
-    public void trace(String msg, Throwable t) {
-        if (logger.isLoggable(Level.FINEST)) {
-            log(SELF, Level.FINEST, msg, t);
-        }
-    }
-
-    /**
-     * Is this logger instance enabled for the FINE level?
-     * 
-     * @return True if this Logger is enabled for level FINE, false otherwise.
-     */
-    public boolean isDebugEnabled() {
-        return logger.isLoggable(Level.FINE);
-    }
-
-    /**
-     * Log a message object at level FINE.
-     * 
-     * @param msg
-     *          - the message object to be logged
-     */
-    public void debug(String msg) {
-        if (logger.isLoggable(Level.FINE)) {
-            log(SELF, Level.FINE, msg, null);
-        }
-    }
-
-    /**
-     * Log a message at level FINE according to the specified format and argument.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for level FINE.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg
-     *          the argument
-     */
-    public void debug(String format, Object arg) {
-        if (logger.isLoggable(Level.FINE)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg);
-            log(SELF, Level.FINE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level FINE according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the FINE level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg1
-     *          the first argument
-     * @param arg2
-     *          the second argument
-     */
-    public void debug(String format, Object arg1, Object arg2) {
-        if (logger.isLoggable(Level.FINE)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);
-            log(SELF, Level.FINE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level FINE according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the FINE level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param argArray
-     *          an array of arguments
-     */
-    public void debug(String format, Object... argArray) {
-        if (logger.isLoggable(Level.FINE)) {
-            FormattingTuple ft = MessageFormatter.arrayFormat(format, argArray);
-            log(SELF, Level.FINE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log an exception (throwable) at level FINE with an accompanying message.
-     * 
-     * @param msg
-     *          the message accompanying the exception
-     * @param t
-     *          the exception (throwable) to log
-     */
-    public void debug(String msg, Throwable t) {
-        if (logger.isLoggable(Level.FINE)) {
-            log(SELF, Level.FINE, msg, t);
-        }
-    }
-
-    /**
-     * Is this logger instance enabled for the INFO level?
-     * 
-     * @return True if this Logger is enabled for the INFO level, false otherwise.
-     */
-    public boolean isInfoEnabled() {
-        return logger.isLoggable(Level.INFO);
-    }
-
-    /**
-     * Log a message object at the INFO level.
-     * 
-     * @param msg
-     *          - the message object to be logged
-     */
-    public void info(String msg) {
-        if (logger.isLoggable(Level.INFO)) {
-            log(SELF, Level.INFO, msg, null);
-        }
-    }
-
-    /**
-     * Log a message at level INFO according to the specified format and argument.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the INFO level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg
-     *          the argument
-     */
-    public void info(String format, Object arg) {
-        if (logger.isLoggable(Level.INFO)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg);
-            log(SELF, Level.INFO, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at the INFO level according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the INFO level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg1
-     *          the first argument
-     * @param arg2
-     *          the second argument
-     */
-    public void info(String format, Object arg1, Object arg2) {
-        if (logger.isLoggable(Level.INFO)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);
-            log(SELF, Level.INFO, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level INFO according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the INFO level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param argArray
-     *          an array of arguments
-     */
-    public void info(String format, Object... argArray) {
-        if (logger.isLoggable(Level.INFO)) {
-            FormattingTuple ft = MessageFormatter.arrayFormat(format, argArray);
-            log(SELF, Level.INFO, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log an exception (throwable) at the INFO level with an accompanying
-     * message.
-     * 
-     * @param msg
-     *          the message accompanying the exception
-     * @param t
-     *          the exception (throwable) to log
-     */
-    public void info(String msg, Throwable t) {
-        if (logger.isLoggable(Level.INFO)) {
-            log(SELF, Level.INFO, msg, t);
-        }
-    }
-
-    /**
-     * Is this logger instance enabled for the WARNING level?
-     * 
-     * @return True if this Logger is enabled for the WARNING level, false
-     *         otherwise.
-     */
-    public boolean isWarnEnabled() {
-        return logger.isLoggable(Level.WARNING);
-    }
-
-    /**
-     * Log a message object at the WARNING level.
-     * 
-     * @param msg
-     *          - the message object to be logged
-     */
-    public void warn(String msg) {
-        if (logger.isLoggable(Level.WARNING)) {
-            log(SELF, Level.WARNING, msg, null);
-        }
-    }
-
-    /**
-     * Log a message at the WARNING level according to the specified format and
-     * argument.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the WARNING level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg
-     *          the argument
-     */
-    public void warn(String format, Object arg) {
-        if (logger.isLoggable(Level.WARNING)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg);
-            log(SELF, Level.WARNING, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at the WARNING level according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the WARNING level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg1
-     *          the first argument
-     * @param arg2
-     *          the second argument
-     */
-    public void warn(String format, Object arg1, Object arg2) {
-        if (logger.isLoggable(Level.WARNING)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);
-            log(SELF, Level.WARNING, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level WARNING according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the WARNING level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param argArray
-     *          an array of arguments
-     */
-    public void warn(String format, Object... argArray) {
-        if (logger.isLoggable(Level.WARNING)) {
-            FormattingTuple ft = MessageFormatter.arrayFormat(format, argArray);
-            log(SELF, Level.WARNING, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log an exception (throwable) at the WARNING level with an accompanying
-     * message.
-     * 
-     * @param msg
-     *          the message accompanying the exception
-     * @param t
-     *          the exception (throwable) to log
-     */
-    public void warn(String msg, Throwable t) {
-        if (logger.isLoggable(Level.WARNING)) {
-            log(SELF, Level.WARNING, msg, t);
-        }
-    }
-
-    /**
-     * Is this logger instance enabled for level SEVERE?
-     * 
-     * @return True if this Logger is enabled for level SEVERE, false otherwise.
-     */
-    public boolean isErrorEnabled() {
-        return logger.isLoggable(Level.SEVERE);
-    }
-
-    /**
-     * Log a message object at the SEVERE level.
-     * 
-     * @param msg
-     *          - the message object to be logged
-     */
-    public void error(String msg) {
-        if (logger.isLoggable(Level.SEVERE)) {
-            log(SELF, Level.SEVERE, msg, null);
-        }
-    }
-
-    /**
-     * Log a message at the SEVERE level according to the specified format and
-     * argument.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the SEVERE level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg
-     *          the argument
-     */
-    public void error(String format, Object arg) {
-        if (logger.isLoggable(Level.SEVERE)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg);
-            log(SELF, Level.SEVERE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at the SEVERE level according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the SEVERE level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg1
-     *          the first argument
-     * @param arg2
-     *          the second argument
-     */
-    public void error(String format, Object arg1, Object arg2) {
-        if (logger.isLoggable(Level.SEVERE)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);
-            log(SELF, Level.SEVERE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level SEVERE according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the SEVERE level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arguments
-     *          an array of arguments
-     */
-    public void error(String format, Object... arguments) {
-        if (logger.isLoggable(Level.SEVERE)) {
-            FormattingTuple ft = MessageFormatter.arrayFormat(format, arguments);
-            log(SELF, Level.SEVERE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log an exception (throwable) at the SEVERE level with an accompanying
-     * message.
-     * 
-     * @param msg
-     *          the message accompanying the exception
-     * @param t
-     *          the exception (throwable) to log
-     */
-    public void error(String msg, Throwable t) {
-        if (logger.isLoggable(Level.SEVERE)) {
-            log(SELF, Level.SEVERE, msg, t);
-        }
-    }
-
-    /**
-     * Log the message at the specified level with the specified throwable if any.
-     * This method creates a LogRecord and fills in caller date before calling
-     * this instance's JDK14 logger.
-     * 
-     * See bug report #13 for more details.
-     * 
-     * @param level
-     * @param msg
-     * @param t
-     */
-    private void log(String callerFQCN, Level level, String msg, Throwable t) {
-        // millis and thread are filled by the constructor
-        LogRecord record = new LogRecord(level, msg);
-        record.setLoggerName(getName());
-        record.setThrown(t);
-        // Note: parameters in record are not set because SLF4J only
-        // supports a single formatting style
-        fillCallerData(callerFQCN, record);
-        logger.log(record);
-    }
-
-    static String SELF = JDK14LoggerAdapter.class.getName();
-    static String SUPER = MarkerIgnoringBase.class.getName();
-
-    private static final boolean FILL_CALLER_DATA = Boolean.getBoolean( "net.md_5.bungee.slf4j-caller-data" );
-
-    /**
-     * Fill in caller data if possible.
-     * 
-     * @param record
-     *          The record to update
-     */
-    final private void fillCallerData(String callerFQCN, LogRecord record) {
-        if ( !FILL_CALLER_DATA )
-        {
-            return;
-        }
-        StackTraceElement[] steArray = new Throwable().getStackTrace();
-
-        int selfIndex = -1;
-        for (int i = 0; i < steArray.length; i++) {
-            final String className = steArray[i].getClassName();
-            if (className.equals(callerFQCN) || className.equals(SUPER)) {
-                selfIndex = i;
-                break;
-            }
-        }
-
-        int found = -1;
-        for (int i = selfIndex + 1; i < steArray.length; i++) {
-            final String className = steArray[i].getClassName();
-            if (!(className.equals(callerFQCN) || className.equals(SUPER))) {
-                found = i;
-                break;
-            }
-        }
-
-        if (found != -1) {
-            StackTraceElement ste = steArray[found];
-            // setting the class name has the side effect of setting
-            // the needToInferCaller variable to false.
-            record.setSourceClassName(ste.getClassName());
-            record.setSourceMethodName(ste.getMethodName());
-        }
-    }
-
-    public void log(Marker marker, String callerFQCN, int level, String message, Object[] argArray, Throwable t) {
-        Level julLevel = slf4jLevelIntToJULLevel(level);
-        // the logger.isLoggable check avoids the unconditional
-        // construction of location data for disabled log
-        // statements. As of 2008-07-31, callers of this method
-        // do not perform this check. See also
-        // http://jira.qos.ch/browse/SLF4J-81
-        if (logger.isLoggable(julLevel)) {
-            log(callerFQCN, julLevel, message, t);
-        }
-    }
-
-    private Level slf4jLevelIntToJULLevel(int slf4jLevelInt) {
-        Level julLevel;
-        switch (slf4jLevelInt) {
-        case LocationAwareLogger.TRACE_INT:
-            julLevel = Level.FINEST;
-            break;
-        case LocationAwareLogger.DEBUG_INT:
-            julLevel = Level.FINE;
-            break;
-        case LocationAwareLogger.INFO_INT:
-            julLevel = Level.INFO;
-            break;
-        case LocationAwareLogger.WARN_INT:
-            julLevel = Level.WARNING;
-            break;
-        case LocationAwareLogger.ERROR_INT:
-            julLevel = Level.SEVERE;
-            break;
-        default:
-            throw new IllegalStateException("Level number " + slf4jLevelInt + " is not recognized.");
-        }
-        return julLevel;
-    }
-
-    /**
-     * @since 1.7.15
-     */
-    public void log(LoggingEvent event) {
-        Level julLevel = slf4jLevelIntToJULLevel(event.getLevel().toInt());
-        if (logger.isLoggable(julLevel)) {
-            LogRecord record = eventToRecord(event, julLevel);
-            logger.log(record);
-        }
-    }
-
-    private LogRecord eventToRecord(LoggingEvent event, Level julLevel) {
-        String format = event.getMessage();
-        Object[] arguments = event.getArgumentArray();
-        FormattingTuple ft = MessageFormatter.arrayFormat(format, arguments);
-        if (ft.getThrowable() != null && event.getThrowable() != null) {
-            throw new IllegalArgumentException("both last element in argument array and last argument are of type Throwable");
-        }
-
-        Throwable t = event.getThrowable();
-        if (ft.getThrowable() != null) {
-            t = ft.getThrowable();
-            throw new IllegalStateException("fix above code");
-        }
-
-        LogRecord record = new LogRecord(julLevel, ft.getMessage());
-        record.setLoggerName(event.getLoggerName());
-        record.setMillis(event.getTimeStamp());
-        record.setSourceClassName(EventConstants.NA_SUBST);
-        record.setSourceMethodName(EventConstants.NA_SUBST);
-
-        record.setThrown(t);
-        return record;
-    }
-}
diff --git a/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerFactory.java b/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerFactory.java
deleted file mode 100644
index 2d6eaaf8..00000000
--- a/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerFactory.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/**
- * Copyright (c) 2004-2011 QOS.ch
- * All rights reserved.
- *
- * Permission is hereby granted, free  of charge, to any person obtaining
- * a  copy  of this  software  and  associated  documentation files  (the
- * "Software"), to  deal in  the Software without  restriction, including
- * without limitation  the rights to  use, copy, modify,  merge, publish,
- * distribute,  sublicense, and/or sell  copies of  the Software,  and to
- * permit persons to whom the Software  is furnished to do so, subject to
- * the following conditions:
- *
- * The  above  copyright  notice  and  this permission  notice  shall  be
- * included in all copies or substantial portions of the Software.
- *
- * THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
- * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
- * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- *
- */
-package org.slf4j.impl;
-
-import org.slf4j.Logger;
-import org.slf4j.ILoggerFactory;
-
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-
-/**
- * JDK14LoggerFactory is an implementation of {@link ILoggerFactory} returning
- * the appropriately named {@link JDK14LoggerAdapter} instance.
- * 
- * @author Ceki G&uuml;lc&uuml;
- */
-public class JDK14LoggerFactory implements ILoggerFactory {
-
-    // key: name (String), value: a JDK14LoggerAdapter;
-    ConcurrentMap<String, Logger> loggerMap;
-    public static java.util.logging.Logger LOGGER; // BungeeCord
-
-    public JDK14LoggerFactory() {
-        loggerMap = new ConcurrentHashMap<String, Logger>();
-        // ensure jul initialization. see SLF4J-359 
-        // note that call to java.util.logging.LogManager.getLogManager() fails on the Google App Engine platform. See SLF4J-363
-        java.util.logging.Logger.getLogger("");
-    }
-
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.slf4j.ILoggerFactory#getLogger(java.lang.String)
-     */
-    public Logger getLogger(String name) {
-        // the root logger is called "" in JUL
-        if (name.equalsIgnoreCase(Logger.ROOT_LOGGER_NAME)) {
-            name = "";
-        }
-
-        Logger slf4jLogger = loggerMap.get(name);
-        if (slf4jLogger != null)
-            return slf4jLogger;
-        else {
-            java.util.logging.Logger julLogger = LOGGER; // BungeeCord - TODO: per-plugin loggers
-            Logger newInstance = new JDK14LoggerAdapter(julLogger);
-            Logger oldInstance = loggerMap.putIfAbsent(name, newInstance);
-            return oldInstance == null ? newInstance : oldInstance;
-        }
-    }
-}
diff --git a/slf4j/src/main/java/org/slf4j/impl/StaticLoggerBinder.java b/slf4j/src/main/java/org/slf4j/impl/StaticLoggerBinder.java
deleted file mode 100644
index ebf8ae11..00000000
--- a/slf4j/src/main/java/org/slf4j/impl/StaticLoggerBinder.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/**
- * Copyright (c) 2004-2011 QOS.ch
- * All rights reserved.
- *
- * Permission is hereby granted, free  of charge, to any person obtaining
- * a  copy  of this  software  and  associated  documentation files  (the
- * "Software"), to  deal in  the Software without  restriction, including
- * without limitation  the rights to  use, copy, modify,  merge, publish,
- * distribute,  sublicense, and/or sell  copies of  the Software,  and to
- * permit persons to whom the Software  is furnished to do so, subject to
- * the following conditions:
- *
- * The  above  copyright  notice  and  this permission  notice  shall  be
- * included in all copies or substantial portions of the Software.
- *
- * THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
- * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
- * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- *
- */
-package org.slf4j.impl;
-
-import org.slf4j.ILoggerFactory;
-import org.slf4j.LoggerFactory;
-import org.slf4j.spi.LoggerFactoryBinder;
-
-/**
- * The binding of {@link LoggerFactory} class with an actual instance of 
- * {@link ILoggerFactory} is performed using information returned by this class. 
- * 
- * @author Ceki G&uuml;lc&uuml;
- */
-public class StaticLoggerBinder implements LoggerFactoryBinder {
-
-    /**
-     * The unique instance of this class.
-     * 
-     */
-    private static final StaticLoggerBinder SINGLETON = new StaticLoggerBinder();
-
-    /**
-     * Return the singleton of this class.
-     * 
-     * @return the StaticLoggerBinder singleton
-     */
-    public static final StaticLoggerBinder getSingleton() {
-        return SINGLETON;
-    }
-
-    /**
-     * Declare the version of the SLF4J API this implementation is compiled against. 
-     * The value of this field is modified with each major release. 
-     */
-    // to avoid constant folding by the compiler, this field must *not* be final
-    public static String REQUESTED_API_VERSION = "1.6.99"; // !final
-
-    private static final String loggerFactoryClassStr = org.slf4j.impl.JDK14LoggerFactory.class.getName();
-
-    /** The ILoggerFactory instance returned by the {@link #getLoggerFactory} method
-     * should always be the same object
-     */
-    private final ILoggerFactory loggerFactory;
-
-    private StaticLoggerBinder() {
-        // Note: JCL gets substituted at build time by an appropriate Ant task
-        loggerFactory = new org.slf4j.impl.JDK14LoggerFactory();
-    }
-
-    public ILoggerFactory getLoggerFactory() {
-        return loggerFactory;
-    }
-
-    public String getLoggerFactoryClassStr() {
-        return loggerFactoryClassStr;
-    }
-}
diff --git a/slf4j/src/main/java/org/slf4j/impl/StaticMDCBinder.java b/slf4j/src/main/java/org/slf4j/impl/StaticMDCBinder.java
deleted file mode 100644
index 0a1dcb4c..00000000
--- a/slf4j/src/main/java/org/slf4j/impl/StaticMDCBinder.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/**
- * Copyright (c) 2004-2011 QOS.ch
- * All rights reserved.
- *
- * Permission is hereby granted, free  of charge, to any person obtaining
- * a  copy  of this  software  and  associated  documentation files  (the
- * "Software"), to  deal in  the Software without  restriction, including
- * without limitation  the rights to  use, copy, modify,  merge, publish,
- * distribute,  sublicense, and/or sell  copies of  the Software,  and to
- * permit persons to whom the Software  is furnished to do so, subject to
- * the following conditions:
- *
- * The  above  copyright  notice  and  this permission  notice  shall  be
- * included in all copies or substantial portions of the Software.
- *
- * THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
- * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
- * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- *
- */
-package org.slf4j.impl;
-
-import org.slf4j.helpers.BasicMDCAdapter;
-import org.slf4j.spi.MDCAdapter;
-
-/**
- * This implementation is bound to {@link BasicMDCAdapter}.
- *
- * @author Ceki G&uuml;lc&uuml;
- */
-public class StaticMDCBinder {
-
-    /**
-     * The unique instance of this class.
-     */
-    public static final StaticMDCBinder SINGLETON = new StaticMDCBinder();
-
-    private StaticMDCBinder() {
-    }
-
-    /**
-     * Return the singleton of this class.
-     * 
-     * @return the StaticMDCBinder singleton
-     * @since 1.7.14
-     */
-    public static final StaticMDCBinder getSingleton() {
-        return SINGLETON;
-    }
-
-    /**
-     * Currently this method always returns an instance of 
-     * {@link BasicMDCAdapter}.
-     */
-    public MDCAdapter getMDCA() {
-        // note that this method is invoked only from within the static initializer of
-        // the org.slf4j.MDC class.
-        return new BasicMDCAdapter();
-    }
-
-    public String getMDCAdapterClassStr() {
-        return BasicMDCAdapter.class.getName();
-    }
-}
diff --git a/slf4j/src/main/java/org/slf4j/impl/StaticMarkerBinder.java b/slf4j/src/main/java/org/slf4j/impl/StaticMarkerBinder.java
deleted file mode 100644
index 21a48df6..00000000
--- a/slf4j/src/main/java/org/slf4j/impl/StaticMarkerBinder.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/**
- * Copyright (c) 2004-2011 QOS.ch
- * All rights reserved.
- *
- * Permission is hereby granted, free  of charge, to any person obtaining
- * a  copy  of this  software  and  associated  documentation files  (the
- * "Software"), to  deal in  the Software without  restriction, including
- * without limitation  the rights to  use, copy, modify,  merge, publish,
- * distribute,  sublicense, and/or sell  copies of  the Software,  and to
- * permit persons to whom the Software  is furnished to do so, subject to
- * the following conditions:
- *
- * The  above  copyright  notice  and  this permission  notice  shall  be
- * included in all copies or substantial portions of the Software.
- *
- * THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
- * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
- * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- *
- */
-package org.slf4j.impl;
-
-import org.slf4j.IMarkerFactory;
-import org.slf4j.MarkerFactory;
-import org.slf4j.helpers.BasicMarkerFactory;
-import org.slf4j.spi.MarkerFactoryBinder;
-
-/**
- * 
- * The binding of {@link MarkerFactory} class with an actual instance of 
- * {@link IMarkerFactory} is performed using information returned by this class. 
- * 
- * @author Ceki G&uuml;lc&uuml;
- */
-public class StaticMarkerBinder implements MarkerFactoryBinder {
-
-    /**
-     * The unique instance of this class.
-     */
-    public static final StaticMarkerBinder SINGLETON = new StaticMarkerBinder();
-
-    final IMarkerFactory markerFactory = new BasicMarkerFactory();
-
-    private StaticMarkerBinder() {
-    }
-
-    /**
-     * Return the singleton of this class.
-     * 
-     * @return the StaticMarkerBinder singleton
-     * @since 1.7.14
-     */
-    public static StaticMarkerBinder getSingleton() {
-        return SINGLETON;
-    }
-
-    /**
-     * Currently this method always returns an instance of 
-     * {@link BasicMarkerFactory}.
-     */
-    public IMarkerFactory getMarkerFactory() {
-        return markerFactory;
-    }
-
-    /**
-     * Currently, this method returns the class name of
-     * {@link BasicMarkerFactory}.
-     */
-    public String getMarkerFactoryClassStr() {
-        return BasicMarkerFactory.class.getName();
-    }
-
-}
-- 
2.35.3

