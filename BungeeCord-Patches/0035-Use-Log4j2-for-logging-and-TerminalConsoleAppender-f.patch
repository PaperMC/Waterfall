From 6fc97a975ad60d87355e86db978659976d798327 Mon Sep 17 00:00:00 2001
From: Minecrell <minecrell@minecrell.net>
Date: Fri, 22 Sep 2017 12:46:47 +0200
Subject: [PATCH] Use Log4j2 for logging and TerminalConsoleAppender for
 console


diff --git a/bootstrap/pom.xml b/bootstrap/pom.xml
index cf7ef042..688f1b99 100644
--- a/bootstrap/pom.xml
+++ b/bootstrap/pom.xml
@@ -49,6 +49,9 @@
                             <Main-Class>net.md_5.bungee.Bootstrap</Main-Class>
                             <Implementation-Version>${describe}</Implementation-Version>
                             <Specification-Version>${maven.build.timestamp}</Specification-Version>
+
+                            <!-- Log4j includes custom classes for Java 9+ (#293) -->
+                            <Multi-Release>true</Multi-Release>
                         </manifestEntries>
                     </archive>
                 </configuration>
@@ -76,7 +79,17 @@
                             </excludes>
                         </filter>
                     </filters>
+                    <transformers>
+                        <transformer implementation="com.github.edwgiz.maven_shade_plugin.log4j2_cache_transformer.PluginsCacheFileTransformer" />
+                    </transformers>
                 </configuration>
+                <dependencies>
+                    <dependency>
+                        <groupId>com.github.edwgiz</groupId>
+                        <artifactId>maven-shade-plugin.log4j2-cachefile-transformer</artifactId>
+                        <version>2.13.2</version>
+                    </dependency>
+                </dependencies>
             </plugin>
         </plugins>
     </build>
diff --git a/log4j/pom.xml b/log4j/pom.xml
new file mode 100644
index 00000000..44bf7f91
--- /dev/null
+++ b/log4j/pom.xml
@@ -0,0 +1,48 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>io.github.waterfallmc</groupId>
+        <artifactId>waterfall-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>
+
+    <groupId>io.github.waterfallmc</groupId>
+    <artifactId>waterfall-log4j</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
+    <packaging>jar</packaging>
+
+    <name>Waterfall-Log</name>
+    <description>Simplistic and performant Log4j2 based logger and console API designed for use with Waterfall and Minecraft related applications.</description>
+
+    <properties>
+        <log4j2.version>2.17.2</log4j2.version>
+    </properties>
+
+    <dependencies>
+        <!-- Log4j -->
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-core</artifactId>
+            <version>${log4j2.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-iostreams</artifactId>
+            <version>${log4j2.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-jul</artifactId>
+            <version>${log4j2.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>com.lmax</groupId>
+            <artifactId>disruptor</artifactId>
+            <version>3.4.4</version>
+            <scope>runtime</scope>
+        </dependency>
+    </dependencies>
+</project>
diff --git a/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/Log4JLogHandler.java b/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/Log4JLogHandler.java
new file mode 100644
index 00000000..63f66d3c
--- /dev/null
+++ b/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/Log4JLogHandler.java
@@ -0,0 +1,59 @@
+package io.github.waterfallmc.waterfall.log4j;
+
+import com.google.common.base.Strings;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.jul.LevelTranslator;
+import org.apache.logging.log4j.message.MessageFormatMessage;
+
+import java.util.Map;
+import java.util.MissingResourceException;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.logging.Handler;
+import java.util.logging.LogRecord;
+
+/**
+ * A {@link Handler} that forwards all log messages to the Log4J logger.
+ *
+ * <p>We don't use Log4J's custom JUL LogManager currently, because it breaks
+ * adding custom handlers to JUL loggers. Some plugins may depend on that
+ * functionality...</p>
+ */
+class Log4JLogHandler extends Handler {
+
+    private final Map<String, Logger> cache = new ConcurrentHashMap<>();
+
+    @Override
+    public void publish(LogRecord record) {
+        if (!isLoggable(record)) {
+            return;
+        }
+
+        Logger logger = cache.computeIfAbsent(Strings.nullToEmpty(record.getLoggerName()), LogManager::getLogger);
+
+        String message = record.getMessage();
+        if (record.getResourceBundle() != null) {
+            try {
+                message = record.getResourceBundle().getString(message);
+            } catch (MissingResourceException ignored) {
+            }
+        }
+
+        final Level level = LevelTranslator.toLevel(record.getLevel());
+        if (record.getParameters() != null && record.getParameters().length > 0) {
+            logger.log(level, new MessageFormatMessage(message, record.getParameters()), record.getThrown());
+        } else {
+            logger.log(level, message, record.getThrown());
+        }
+    }
+
+    @Override
+    public void flush() {
+    }
+
+    @Override
+    public void close() {
+    }
+
+}
diff --git a/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.java b/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.java
new file mode 100644
index 00000000..e046897a
--- /dev/null
+++ b/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.java
@@ -0,0 +1,34 @@
+package io.github.waterfallmc.waterfall.log4j;
+
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.io.IoBuilder;
+import java.util.logging.Handler;
+import java.util.logging.Logger;
+
+public final class WaterfallLogger {
+
+    private WaterfallLogger() {
+    }
+
+    public static Logger create() {
+        org.apache.logging.log4j.Logger redirect = LogManager.getRootLogger();
+        System.setOut(IoBuilder.forLogger(redirect).setLevel(Level.INFO).buildPrintStream());
+        System.setErr(IoBuilder.forLogger(redirect).setLevel(Level.ERROR).buildPrintStream());
+
+        Logger root = Logger.getLogger("");
+        root.setUseParentHandlers(false);
+
+        // Remove existing handlers
+        for (Handler handler : root.getHandlers()) {
+            root.removeHandler(handler);
+        }
+
+        // Setup forward log handler
+        root.setLevel(java.util.logging.Level.ALL); // Log4j will handle filtering the log
+        root.addHandler(new Log4JLogHandler());
+
+        return Logger.getLogger("BungeeCord");
+    }
+
+}
diff --git a/log4j/src/main/resources/log4j2.component.properties b/log4j/src/main/resources/log4j2.component.properties
new file mode 100644
index 00000000..e43f5dac
--- /dev/null
+++ b/log4j/src/main/resources/log4j2.component.properties
@@ -0,0 +1,2 @@
+log4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
+log4j.skipJansi=true
diff --git a/log4j/src/main/resources/log4j2.xml b/log4j/src/main/resources/log4j2.xml
new file mode 100644
index 00000000..cfd039cd
--- /dev/null
+++ b/log4j/src/main/resources/log4j2.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="warn" shutdownHook="disable">
+    <Appenders>
+        <TerminalConsole name="TerminalConsole">
+            <PatternLayout pattern="%highlightError{[%d{HH:mm:ss} %level]: %minecraftFormatting{%msg}%n%xEx}" />
+        </TerminalConsole>
+        <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz" immediateFlush="false">
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %minecraftFormatting{%msg}{strip}%n" />
+            <Policies>
+                <TimeBasedTriggeringPolicy />
+                <OnStartupTriggeringPolicy />
+            </Policies>
+        </RollingRandomAccessFile>
+    </Appenders>
+
+    <Loggers>
+        <Root level="info">
+            <AppenderRef ref="TerminalConsole" />
+            <AppenderRef ref="File" />
+        </Root>
+    </Loggers>
+</Configuration>
diff --git a/log4j/target/classes/io/github/waterfallmc/waterfall/log4j/Log4JLogHandler.class b/log4j/target/classes/io/github/waterfallmc/waterfall/log4j/Log4JLogHandler.class
new file mode 100644
index 0000000000000000000000000000000000000000..20c55d8a1db4bbb0c69798c0b3adaca184d6700d
GIT binary patch
literal 3100
zcmbVO*;m|D9R4oMkTRq~vDji)y1)$E)JoT>XiGs_2U-iFZQU{<%mgyYm}F?H)_wmI
zeDJl;Jx9Bq)8kVgJpM@@^}9)!36uekFUh^X`&+-?a_=91KY9XS1V5$Fgk}W^6-l%R
zbT4YlTDIz&R@QQgMbj>3CpCNCGF*X{Gp23&qXNz8%$$NP0=;!^-Ldtm>l(J79jh%T
zHLo<KRZ>vU+=@1+3bv|v4($TROeb43{Zh4%y`lMryP#QCS+B39`H{tJp5Kf7)SO7_
znqD#l+VgeWG?7bD{WcYycwQi7dK4*Y1&fUP(=kpe4PxT)6+?I2`CR5&3SD?X!44HW
z(Jip6uJ;*kfvrWum%0siS}Rlg_H-sxZ)t>T#&?Mrec6TG3ihbji+uunb*G#yI!@6t
zvRsxOJ6q5^BjWZ1+U%-j%{t@dihqlsMh?d{u4AN=`Rh?}00#w<TBTx9bl-|MK>`=5
zw(gs>HW4jyZ8(fx1$`>g$S|0CsDzN1(z{C4H!dukEqKhNz*yXuONB*4_j55gpS2Ko
zG~!n<K+hbvnAIvWceTPIykUlkrcA<+ieZ_76fvGMJWnecl6*wPOE@a9jpQqa=Tu$Y
zI9HW5DX@E0z^hN0h7lZ7a9qU+nTDP9Xjd}|v{H4LI|Zi%4%9iPOwVIVR|Ljy>PAIk
zDjmzIID=ONw#b?=mJN%=v&x@Z{m4VQ^D16ba8|`Rj0p@jL}amQWdnV)u4a3d<~wXY
z#djhbxpfOVFp<eOR2m4=hc1k(n852{DPPuHmNDCpRoIozT#waqEqfQ(tPRzc!#ri9
zd`&oRS*s^+5^u=4k{3wF3n^-ob*yFPq=(ZgF5z;Rmf4c)+^_|9tRNe-ML?DP&64iN
z6%{j><y<1*0)_NuC^SA_6HZj?YfNV5q|rHP^lgEQo0|*DDc;U8nCp>b<{0seS+q63
z>aw=a#~O|8c_t<l0oXW>a75)sa{`GmXP(;H^QLV~SIY&%oec+LXWr2@Yff`bxsQkm
zzhtr&PUQdBc&0g}QY~1fSK55=GTat77{UU3VzJh`rZ%I=D2eh8>e)1Ax)5bipz~SG
zI4rHOSNCtAD(EJ*$c(S)O9VeaN5PUn$J%5nD09R&Y>=pFlM7Z=f|ArN$74EDGr=62
zFy$26&UD3ZxnXI8rp`Hz@A<A)nKJy6Gw-#xz)zuyWd%1>+yp0nII4o$GVNt&$;jrl
za$#PhgtnmR935n8V~f{!f5uxe5(*83m#lXv?>I}<O1$`23a%dfD#6)X6(i36-w#8R
z8_UM;lt}X!Ukfv)Z{#}g$(kE8np<(9h(!2qr|=m*SMY_3FY%SY!Nz%Wic^}+D~LrW
zuZOUsI11zFMX+o%c7wX5n>40gux-N~voy~$JO$qg9BzQ;>O?5`ffcqfD_bPY8us%c
z)Wo*|t6#pf_<x7HCR{~=e?Ia^xyIEfnz;fx`tL*ZKZbJkK3ac6>TbY&onQGh1a?ra
z8}D+ZhWvOB?{g>c0X__MiD7C@l6Jd);2t`DM&fS&uSjvd{Q+KlM3?Xohnn#_`lm=7
zoaQI{6x-x)=pJ64zJuiH1b3$&U^G~qe~Mo2&p-JEdk4D{k1=_5Nbc|BB7aj4@n!;d
z(7_`~=Kie&?$ViIUiGJOlA*}}j$<pod$5J?uvYZQw-Wkrh+MtoOOvyYH~0X?F^E|V
z!9f<E^06U<9SH-9f@NsXP@sha)U0Ek(DY#r1{P>*oED2H5h#<AJxI3xgCj^NXj9Oo
zpkKivgo2aeFC0~1NgVB39tJ2P^C0TL%M<~}VxWr}=+5SXr`8c{MujSy@DW`8r3W4z
U|Cr%^jc-Uvk@79R$B*d#7q?+y00000

literal 0
HcmV?d00001

diff --git a/log4j/target/classes/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.class b/log4j/target/classes/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.class
new file mode 100644
index 0000000000000000000000000000000000000000..128532ec6dbe11cc417d4af9b40669a217ed883c
GIT binary patch
literal 1923
zcma)7ZC4XV6n=(m*d#6m5eg_E7H#uFSya@PSgKG`!G+L7W7WP*vcqQSlJyK5diuS;
zq+j~A^+V*e=lBEqS9<!rpK9-HHX@#oLe635&fJ&h-uuj*KmYyxC4fcLQ|LoXhh`v-
zeukl4e!xwSHypEA-4(Tfq5rnqaD!!rSUOWlA%Uchlz}ra7-oIxnEV;9)rIN#j^mOY
zeHV94%Xc<;gF8Yp3^*bv`F=oqp*)+;SiKBMDWAeS7}POj;4Fq2uAHdv`sTX7(sVsr
zg-Y)DvJ++_{l8Iq;CRz-K8X>G>Uh_{7{(c<Pefyh1K}}f>sy5)!%PnVN-@mxynzdt
zWJv6bATnR?g*-GoEpS!FX#*EAL%pr4Ds4-*5tIWd_#VR;bt3FIW&6ef;d&3VIxZWy
zg7=THqWt52Ajq<x&=#9SkMVR@51ERpS=vBG6)e71Diur0YtF!&a;fasq)cF*0Vyot
zs*Y<0u49p0hLD<p>%Asbr>9AxQfECMMGo0Y84>yNQ9500DW?V8G;j+aF^o|3hx=li
zOVJ4K@rLaQxle6NKT#B4z><MHZZn*ra7V|}>CDr1vd8>K3Sod{1E1m!QC^BY|3E}X
z#Fz+cS3^~+6|Cy`%)lB7)Rry<XcH@T*RmKUx}XTD6Jofh2(`{I*)3*UEmP5PpWz0z
z-Eo6@vuggp10i>~=k3*w)<<`Faf7NJWs|}NVya4828t@#6u0f@EP*dbUTHQQAy$29
z>nNW(%%cv3PJ^{o-xdsmmfH|p&AqCS4|vt1ongzbaj(LqtK?`?3+gWQ@RoJDq~3~_
zCrZ}nQUv6FvU4krb*qhv^z?e0Fbo&E^dTw)=_RDFT^Y{MOFafbI21`;lQbe3&Uf+o
zI`lv};I;2J`Li%*9W{oFC(okLvksL}FWyqa%6?PUM8Q?X9eJxV^NNhPiW0pP>aUM}
z^j3i30ZG^COE(zt><h5p!sCbZUp*_JH$sDf3ayN`5+318l9G6gCy|4{5hG{7?jiL1
z*+UFG$GH|JT9`V-rMCP*N6rp^cnH(V#ag(LYvJR~xtGhao7$*0^)p82Mzw28@!Ukb
zg-?Fc*e|dC%00*37Cz7YfsMy6V70J0yiNAMQnVNp%6UQv3=+yA8dhg<8Rw9tl}Tg1
zfN@y#En$+-PQj)jsxp}&+X5keim#{)8g}qCzM=gr?%-Q|M_F-_#?bc)ONi^J>R8ZW
PGb++Qw9Uvs)zJA5?R^HT

literal 0
HcmV?d00001

diff --git a/log4j/target/classes/log4j2-bungee.xml b/log4j/target/classes/log4j2-bungee.xml
new file mode 100644
index 00000000..1c3265ed
--- /dev/null
+++ b/log4j/target/classes/log4j2-bungee.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Log4j configuration that replicates the old BungeeCord logging setup -->
+<Configuration status="warn">
+    <Appenders>
+        <TerminalConsole name="TerminalConsole">
+            <PatternLayout>
+                <LoggerNamePatternSelector defaultPattern="%highlightError{%d{HH:mm:ss} [%level] [%logger] %paperMinecraftFormatting{%msg}%n%ex}">
+                    <!-- Log root and BungeeCord loggers without prefix -->
+                    <PatternMatch key=",BungeeCord" pattern="%highlightError{%d{HH:mm:ss} [%level] %paperMinecraftFormatting{%msg}%n%ex}" />
+                </LoggerNamePatternSelector>
+            </PatternLayout>
+        </TerminalConsole>
+        <RollingRandomAccessFile name="File" fileName="proxy.log.0" filePattern="proxy.log.%i" immediateFlush="false">
+            <PatternLayout>
+                <LoggerNamePatternSelector defaultPattern="%d{HH:mm:ss} [%level] [%logger] %paperMinecraftFormatting{%msg}{strip}%n%ex">
+                    <!-- Log root and BungeeCord loggers without prefix -->
+                    <PatternMatch key=",BungeeCord" pattern="%d{HH:mm:ss} [%level] %paperMinecraftFormatting{%msg}{strip}%n%ex" />
+                </LoggerNamePatternSelector>
+            </PatternLayout>
+            <Policies>
+                <OnStartupTriggeringPolicy />
+                <SizeBasedTriggeringPolicy size="8 MB" />
+            </Policies>
+            <DefaultRolloverStrategy fileIndex="min" max="8" />
+        </RollingRandomAccessFile>
+    </Appenders>
+
+    <Loggers>
+        <Root level="info">
+            <AppenderRef ref="TerminalConsole" />
+            <AppenderRef ref="File" />
+        </Root>
+    </Loggers>
+</Configuration>
diff --git a/log4j/target/classes/log4j2.component.properties b/log4j/target/classes/log4j2.component.properties
new file mode 100644
index 00000000..e43f5dac
--- /dev/null
+++ b/log4j/target/classes/log4j2.component.properties
@@ -0,0 +1,2 @@
+log4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
+log4j.skipJansi=true
diff --git a/log4j/target/classes/log4j2.xml b/log4j/target/classes/log4j2.xml
new file mode 100644
index 00000000..a42d63fa
--- /dev/null
+++ b/log4j/target/classes/log4j2.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="warn">
+    <Appenders>
+        <TerminalConsole name="TerminalConsole">
+            <PatternLayout>
+                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level] [%logger]: %paperMinecraftFormatting{%msg}%n%xEx}">
+                    <!-- Log root and BungeeCord loggers without prefix -->
+                    <PatternMatch key=",BungeeCord" pattern="%highlightError{[%d{HH:mm:ss} %level]: %paperMinecraftFormatting{%msg}%n%xEx}" />
+                </LoggerNamePatternSelector>
+            </PatternLayout>
+        </TerminalConsole>
+        <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz" immediateFlush="false">
+            <PatternLayout>
+                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level] [%logger]: %paperMinecraftFormatting{%msg}{strip}%n">
+                    <!-- Log root and BungeeCord loggers without prefix -->
+                    <PatternMatch key=",BungeeCord" pattern="[%d{HH:mm:ss}] [%t/%level]: %paperMinecraftFormatting{%msg}{strip}%n" />
+                </LoggerNamePatternSelector>
+            </PatternLayout>
+            <Policies>
+                <TimeBasedTriggeringPolicy />
+                <OnStartupTriggeringPolicy />
+            </Policies>
+        </RollingRandomAccessFile>
+    </Appenders>
+
+    <Loggers>
+        <Root level="info">
+            <AppenderRef ref="TerminalConsole" />
+            <AppenderRef ref="File" />
+        </Root>
+    </Loggers>
+</Configuration>
diff --git a/log4j/target/maven-archiver/pom.properties b/log4j/target/maven-archiver/pom.properties
new file mode 100644
index 00000000..23184eeb
--- /dev/null
+++ b/log4j/target/maven-archiver/pom.properties
@@ -0,0 +1,5 @@
+#Generated by Maven
+#Thu Dec 23 18:28:21 CET 2021
+groupId=io.github.waterfallmc
+artifactId=waterfall-log4j
+version=1.18-R0.1-SNAPSHOT
diff --git a/log4j/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst b/log4j/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst
new file mode 100644
index 00000000..f6589c02
--- /dev/null
+++ b/log4j/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst
@@ -0,0 +1,2 @@
+io/github/waterfallmc/waterfall/log4j/WaterfallLogger.class
+io/github/waterfallmc/waterfall/log4j/Log4JLogHandler.class
diff --git a/log4j/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst b/log4j/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst
new file mode 100644
index 00000000..ba7fac50
--- /dev/null
+++ b/log4j/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst
@@ -0,0 +1,2 @@
+/Users/noah/Documents/Waterfall/Waterfall-Proxy/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.java
+/Users/noah/Documents/Waterfall/Waterfall-Proxy/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/Log4JLogHandler.java
diff --git a/log4j/target/waterfall-log4j-1.18-R0.1-SNAPSHOT.jar b/log4j/target/waterfall-log4j-1.18-R0.1-SNAPSHOT.jar
new file mode 100644
index 0000000000000000000000000000000000000000..65fc1bda22d864cd07d11000d1d3a95979aea8ef
GIT binary patch
literal 6589
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
F{{TZ1VZ#6b

literal 0
HcmV?d00001

diff --git a/log4j/waterfall-log4j.iml b/log4j/waterfall-log4j.iml
new file mode 100644
index 00000000..712199a4
--- /dev/null
+++ b/log4j/waterfall-log4j.iml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8">
+    <output url="file://$MODULE_DIR$/../target/classes" />
+    <output-test url="file://$MODULE_DIR$/../target/test-classes" />
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/target" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index 2e3d92ce..85a8a945 100644
--- a/pom.xml
+++ b/pom.xml
@@ -56,11 +56,12 @@
         <module>config</module>
         <module>event</module>
         <module>log</module>
+        <module>log4j</module>
         <module>module</module>
         <module>protocol</module>
         <module>proxy</module>
         <module>query</module>
-        <module>slf4j</module>
+        <!--<module>slf4j</module>-->
         <module>native</module>
     </modules>
 
diff --git a/proxy/pom.xml b/proxy/pom.xml
index 8506b681..205162db 100644
--- a/proxy/pom.xml
+++ b/proxy/pom.xml
@@ -71,7 +71,7 @@
         </dependency>
         <dependency>
             <groupId>io.github.waterfallmc</groupId>
-            <artifactId>waterfall-log</artifactId>
+            <artifactId>waterfall-log4j</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
@@ -93,12 +93,13 @@
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
+        <!-- // Waterfall - We already bundle an slf4j impl
         <dependency>
             <groupId>net.md-5</groupId>
             <artifactId>bungeecord-slf4j</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
-        </dependency>
+        </dependency> // Waterfall - We already bundle an slf4j impl -->
         <dependency>
             <groupId>net.sf.jopt-simple</groupId>
             <artifactId>jopt-simple</artifactId>
@@ -130,6 +131,25 @@
             <version>1.8.0</version>
             <scope>runtime</scope>
         </dependency>
+        <!-- Waterfall start - Console improvements - bring back slf4j-->
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-jdk14</artifactId>
+            <version>1.7.36</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>net.minecrell</groupId>
+            <artifactId>terminalconsoleappender</artifactId>
+            <version>1.3.0</version>
+        </dependency>
+        <dependency>
+            <groupId>org.jline</groupId>
+            <artifactId>jline-terminal-jansi</artifactId>
+            <version>3.21.0</version>
+            <scope>runtime</scope>
+        </dependency>
+        <!-- Waterfall end -->
     </dependencies>
 
     <!-- Waterfall start - copy license files into jar -->
diff --git a/proxy/src/main/java/io/github/waterfallmc/waterfall/console/WaterfallConsole.java b/proxy/src/main/java/io/github/waterfallmc/waterfall/console/WaterfallConsole.java
new file mode 100644
index 00000000..765d24bc
--- /dev/null
+++ b/proxy/src/main/java/io/github/waterfallmc/waterfall/console/WaterfallConsole.java
@@ -0,0 +1,39 @@
+package io.github.waterfallmc.waterfall.console;
+
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.minecrell.terminalconsole.SimpleTerminalConsole;
+import org.jline.reader.LineReader;
+import org.jline.reader.LineReaderBuilder;
+
+public final class WaterfallConsole extends SimpleTerminalConsole {
+
+    @Override
+    protected LineReader buildReader(LineReaderBuilder builder) {
+        ProxyServer proxy = ProxyServer.getInstance();
+        return super.buildReader(builder
+                .appName(proxy.getName())
+        );
+    }
+
+    @Override
+    protected boolean isRunning() {
+        return BungeeCord.getInstance().isRunning;
+    }
+
+    @Override
+    protected void runCommand(String command) {
+        ProxyServer proxy = ProxyServer.getInstance();
+        if (!proxy.getPluginManager().dispatchCommand(proxy.getConsole(), command)) {
+            proxy.getConsole().sendMessage(new ComponentBuilder("Command not found").color(ChatColor.RED).create());
+        }
+    }
+
+    @Override
+    protected void shutdown() {
+        ProxyServer.getInstance().stop();
+    }
+
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 1db22fc6..66d38b40 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -46,7 +46,6 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.logging.Handler;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import jline.console.ConsoleReader;
 import lombok.Getter;
 import lombok.Setter;
 import lombok.Synchronized;
@@ -79,14 +78,11 @@ import net.md_5.bungee.command.CommandEnd;
 import net.md_5.bungee.command.CommandIP;
 import net.md_5.bungee.command.CommandPerms;
 import net.md_5.bungee.command.CommandReload;
-import net.md_5.bungee.command.ConsoleCommandCompleter;
 import net.md_5.bungee.command.ConsoleCommandSender;
 import net.md_5.bungee.compress.CompressFactory;
 import net.md_5.bungee.conf.Configuration;
 import net.md_5.bungee.conf.YamlConfig;
 import net.md_5.bungee.forge.ForgeConstants;
-import net.md_5.bungee.log.BungeeLogger;
-import net.md_5.bungee.log.LoggingOutputStream;
 import net.md_5.bungee.module.ModuleManager;
 import net.md_5.bungee.netty.PipelineUtils;
 import net.md_5.bungee.protocol.DefinedPacket;
@@ -95,8 +91,6 @@ import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.query.RemoteQuery;
 import net.md_5.bungee.scheduler.BungeeScheduler;
 import net.md_5.bungee.util.CaseInsensitiveMap;
-import org.fusesource.jansi.AnsiConsole;
-import org.slf4j.impl.JDK14LoggerFactory;
 
 /**
  * Main BungeeCord proxy class.
@@ -157,8 +151,12 @@ public class BungeeCord extends ProxyServer
     private final File pluginsFolder = new File( "plugins" );
     @Getter
     private final BungeeScheduler scheduler = new BungeeScheduler();
+    // Waterfall start - Remove ConsoleReader for JLine 3 update
+    /*
     @Getter
     private final ConsoleReader consoleReader;
+    */
+    // Waterfall end
     @Getter
     private final Logger logger;
     public final Gson gson = new GsonBuilder()
@@ -209,6 +207,8 @@ public class BungeeCord extends ProxyServer
         // BungeeCord. This version is only used when extracting the libraries to their temp folder.
         System.setProperty( "library.jansi.version", "BungeeCord" );
 
+        // Waterfall start - Use TerminalConsoleAppender and Log4J
+        /*
         AnsiConsole.systemInstall();
         consoleReader = new ConsoleReader();
         consoleReader.setExpandEvents( false );
@@ -218,6 +218,9 @@ public class BungeeCord extends ProxyServer
         JDK14LoggerFactory.LOGGER = logger;
         System.setErr( new PrintStream( new LoggingOutputStream( logger, Level.SEVERE ), true ) );
         System.setOut( new PrintStream( new LoggingOutputStream( logger, Level.INFO ), true ) );
+        */
+        logger = io.github.waterfallmc.waterfall.log4j.WaterfallLogger.create();
+        // Waterfall end
 
         pluginManager = new PluginManager( this );
         getPluginManager().registerCommand( null, new CommandReload() );
@@ -494,10 +497,7 @@ public class BungeeCord extends ProxyServer
 
         getLogger().info( "Thank you and goodbye" );
         // Need to close loggers after last message!
-        for ( Handler handler : getLogger().getHandlers() )
-        {
-            handler.close();
-        }
+        org.apache.logging.log4j.LogManager.shutdown(); // Waterfall
 
         // Unlock the thread before optionally calling system exit, which might invoke this function again.
         // If that happens, the system will obtain the lock, and then see that isRunning == false and return without doing anything.
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
index c2512dd5..0db3d76a 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
@@ -68,6 +68,9 @@ public class BungeeCordLauncher
 
         if ( !options.has( "noconsole" ) )
         {
+            // Waterfall start - Use TerminalConsoleAppender
+            new io.github.waterfallmc.waterfall.console.WaterfallConsole().start();
+            /*
             String line;
             while ( bungee.isRunning && ( line = bungee.getConsoleReader().readLine( ">" ) ) != null )
             {
@@ -76,6 +79,8 @@ public class BungeeCordLauncher
                     bungee.getConsole().sendMessage( new ComponentBuilder( "Command not found" ).color( ChatColor.RED ).create() );
                 }
             }
+            */
+            // Waterfall end
         }
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandCompleter.java b/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandCompleter.java
deleted file mode 100644
index 3e5ca394..00000000
--- a/proxy/src/main/java/net/md_5/bungee/command/ConsoleCommandCompleter.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package net.md_5.bungee.command;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.stream.Collectors;
-import jline.console.completer.Completer;
-import lombok.RequiredArgsConstructor;
-import net.md_5.bungee.api.ProxyServer;
-
-@RequiredArgsConstructor
-public class ConsoleCommandCompleter implements Completer
-{
-
-    private final ProxyServer proxy;
-
-    @Override
-    public int complete(String buffer, int cursor, List<CharSequence> candidates)
-    {
-        int lastSpace = buffer.lastIndexOf( ' ' );
-        if ( lastSpace == -1 )
-        {
-            String lowerCase = buffer.toLowerCase( Locale.ROOT );
-            candidates.addAll( proxy.getPluginManager().getCommands().stream()
-                    .map( Map.Entry::getKey )
-                    .filter( (name) -> name.toLowerCase( Locale.ROOT ).startsWith( lowerCase ) )
-                    .collect( Collectors.toList() ) );
-        } else
-        {
-            List<String> suggestions = new ArrayList<>();
-            proxy.getPluginManager().dispatchCommand( proxy.getConsole(), buffer, suggestions );
-            candidates.addAll( suggestions );
-        }
-
-        return ( lastSpace == -1 ) ? cursor - buffer.length() : cursor - ( buffer.length() - lastSpace - 1 );
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java b/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
index 9ec4920e..d3abee44 100644
--- a/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
+++ b/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
@@ -44,7 +44,7 @@ public class ModuleManager
         ModuleVersion bungeeVersion = ModuleVersion.parse( proxy.getVersion() );
         if ( bungeeVersion == null )
         {
-            System.out.println( "Couldn't detect bungee version. Custom build?" );
+            proxy.getLogger().warning( "Couldn't detect bungee version. Custom build?" ); // Waterfall - Use logger
             return;
         }
 
diff --git a/slf4j/nb-configuration.xml b/slf4j/nb-configuration.xml
deleted file mode 100644
index 7e465924..00000000
--- a/slf4j/nb-configuration.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project-shared-configuration>
-    <!--
-    This file contains additional configuration written by modules in the NetBeans IDE.
-    The configuration is intended to be shared among all the users of project and
-    therefore it is assumed to be part of version control checkout.
-    Without this configuration present, some functionality in the IDE may be limited or fail altogether.
-    -->
-    <properties xmlns="http://www.netbeans.org/ns/maven-properties-data/1">
-        <!--
-        Properties that influence various parts of the IDE, especially code formatting and the like. 
-        You can copy and paste the single properties, into the pom.xml file and the IDE will pick them up.
-        That way multiple projects can share the same settings (useful for formatting rules for example).
-        Any value defined here will override the pom.xml file value but is only applicable to the current project.
-        -->
-        <org-netbeans-modules-editor-indent.CodeStyle.usedProfile>project</org-netbeans-modules-editor-indent.CodeStyle.usedProfile>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.classDeclBracePlacement>NEW_LINE</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.classDeclBracePlacement>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.otherBracePlacement>NEW_LINE</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.otherBracePlacement>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.methodDeclBracePlacement>NEW_LINE</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.methodDeclBracePlacement>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinMethodCallParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinMethodCallParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSwitchParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSwitchParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinCatchParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinCatchParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinTryParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinTryParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSynchronizedParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSynchronizedParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinArrayInitBrackets>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinArrayInitBrackets>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinWhileParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinWhileParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinIfParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinIfParens>
-        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinForParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinForParens>
-    </properties>
-</project-shared-configuration>
diff --git a/slf4j/pom.xml b/slf4j/pom.xml
deleted file mode 100644
index b995ba85..00000000
--- a/slf4j/pom.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>net.md-5</groupId>
-        <artifactId>bungeecord-parent</artifactId>
-        <version>1.19-R0.1-SNAPSHOT</version>
-        <relativePath>../pom.xml</relativePath>
-    </parent>
-
-    <groupId>net.md-5</groupId>
-    <artifactId>bungeecord-slf4j</artifactId>
-    <version>1.19-R0.1-SNAPSHOT</version>
-    <packaging>jar</packaging>
-
-    <name>BungeeCord-SLF4J</name>
-    <description>Wrapper over SLF4J for BungeeCord purposes.</description>
-
-    <properties>
-        <checkstyle.skip>true</checkstyle.skip>
-        <maven.deploy.skip>true</maven.deploy.skip>
-        <maven.javadoc.skip>true</maven.javadoc.skip>
-    </properties>
-
-    <dependencies>
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>1.7.32</version>
-            <scope>compile</scope>
-        </dependency>
-    </dependencies>
-</project>
diff --git a/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerAdapter.java b/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerAdapter.java
deleted file mode 100644
index 49589454..00000000
--- a/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerAdapter.java
+++ /dev/null
@@ -1,700 +0,0 @@
-/**
- * Copyright (c) 2004-2011 QOS.ch
- * All rights reserved.
- *
- * Permission is hereby granted, free  of charge, to any person obtaining
- * a  copy  of this  software  and  associated  documentation files  (the
- * "Software"), to  deal in  the Software without  restriction, including
- * without limitation  the rights to  use, copy, modify,  merge, publish,
- * distribute,  sublicense, and/or sell  copies of  the Software,  and to
- * permit persons to whom the Software  is furnished to do so, subject to
- * the following conditions:
- *
- * The  above  copyright  notice  and  this permission  notice  shall  be
- * included in all copies or substantial portions of the Software.
- *
- * THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
- * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
- * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- *
- */
-package org.slf4j.impl;
-
-import java.util.logging.Level;
-import java.util.logging.LogRecord;
-
-import org.slf4j.Logger;
-import org.slf4j.Marker;
-import org.slf4j.event.EventConstants;
-import org.slf4j.event.LoggingEvent;
-import org.slf4j.helpers.FormattingTuple;
-import org.slf4j.helpers.MarkerIgnoringBase;
-import org.slf4j.helpers.MessageFormatter;
-import org.slf4j.spi.LocationAwareLogger;
-
-/**
- * A wrapper over {@link java.util.logging.Logger java.util.logging.Logger} in
- * conformity with the {@link Logger} interface. Note that the logging levels
- * mentioned in this class refer to those defined in the java.util.logging
- * package.
- * 
- * @author Ceki G&uuml;lc&uuml;
- * @author Peter Royal
- */
-public final class JDK14LoggerAdapter extends MarkerIgnoringBase implements LocationAwareLogger {
-
-    private static final long serialVersionUID = -8053026990503422791L;
-
-    transient final java.util.logging.Logger logger;
-
-    // WARN: JDK14LoggerAdapter constructor should have only package access so
-    // that only JDK14LoggerFactory be able to create one.
-    JDK14LoggerAdapter(java.util.logging.Logger logger) {
-        this.logger = logger;
-        this.name = logger.getName();
-    }
-
-    /**
-     * Is this logger instance enabled for the FINEST level?
-     * 
-     * @return True if this Logger is enabled for level FINEST, false otherwise.
-     */
-    public boolean isTraceEnabled() {
-        return logger.isLoggable(Level.FINEST);
-    }
-
-    /**
-     * Log a message object at level FINEST.
-     * 
-     * @param msg
-     *          - the message object to be logged
-     */
-    public void trace(String msg) {
-        if (logger.isLoggable(Level.FINEST)) {
-            log(SELF, Level.FINEST, msg, null);
-        }
-    }
-
-    /**
-     * Log a message at level FINEST according to the specified format and
-     * argument.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for level FINEST.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg
-     *          the argument
-     */
-    public void trace(String format, Object arg) {
-        if (logger.isLoggable(Level.FINEST)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg);
-            log(SELF, Level.FINEST, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level FINEST according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the FINEST level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg1
-     *          the first argument
-     * @param arg2
-     *          the second argument
-     */
-    public void trace(String format, Object arg1, Object arg2) {
-        if (logger.isLoggable(Level.FINEST)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);
-            log(SELF, Level.FINEST, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level FINEST according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the FINEST level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param argArray
-     *          an array of arguments
-     */
-    public void trace(String format, Object... argArray) {
-        if (logger.isLoggable(Level.FINEST)) {
-            FormattingTuple ft = MessageFormatter.arrayFormat(format, argArray);
-            log(SELF, Level.FINEST, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log an exception (throwable) at level FINEST with an accompanying message.
-     * 
-     * @param msg
-     *          the message accompanying the exception
-     * @param t
-     *          the exception (throwable) to log
-     */
-    public void trace(String msg, Throwable t) {
-        if (logger.isLoggable(Level.FINEST)) {
-            log(SELF, Level.FINEST, msg, t);
-        }
-    }
-
-    /**
-     * Is this logger instance enabled for the FINE level?
-     * 
-     * @return True if this Logger is enabled for level FINE, false otherwise.
-     */
-    public boolean isDebugEnabled() {
-        return logger.isLoggable(Level.FINE);
-    }
-
-    /**
-     * Log a message object at level FINE.
-     * 
-     * @param msg
-     *          - the message object to be logged
-     */
-    public void debug(String msg) {
-        if (logger.isLoggable(Level.FINE)) {
-            log(SELF, Level.FINE, msg, null);
-        }
-    }
-
-    /**
-     * Log a message at level FINE according to the specified format and argument.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for level FINE.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg
-     *          the argument
-     */
-    public void debug(String format, Object arg) {
-        if (logger.isLoggable(Level.FINE)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg);
-            log(SELF, Level.FINE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level FINE according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the FINE level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg1
-     *          the first argument
-     * @param arg2
-     *          the second argument
-     */
-    public void debug(String format, Object arg1, Object arg2) {
-        if (logger.isLoggable(Level.FINE)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);
-            log(SELF, Level.FINE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level FINE according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the FINE level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param argArray
-     *          an array of arguments
-     */
-    public void debug(String format, Object... argArray) {
-        if (logger.isLoggable(Level.FINE)) {
-            FormattingTuple ft = MessageFormatter.arrayFormat(format, argArray);
-            log(SELF, Level.FINE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log an exception (throwable) at level FINE with an accompanying message.
-     * 
-     * @param msg
-     *          the message accompanying the exception
-     * @param t
-     *          the exception (throwable) to log
-     */
-    public void debug(String msg, Throwable t) {
-        if (logger.isLoggable(Level.FINE)) {
-            log(SELF, Level.FINE, msg, t);
-        }
-    }
-
-    /**
-     * Is this logger instance enabled for the INFO level?
-     * 
-     * @return True if this Logger is enabled for the INFO level, false otherwise.
-     */
-    public boolean isInfoEnabled() {
-        return logger.isLoggable(Level.INFO);
-    }
-
-    /**
-     * Log a message object at the INFO level.
-     * 
-     * @param msg
-     *          - the message object to be logged
-     */
-    public void info(String msg) {
-        if (logger.isLoggable(Level.INFO)) {
-            log(SELF, Level.INFO, msg, null);
-        }
-    }
-
-    /**
-     * Log a message at level INFO according to the specified format and argument.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the INFO level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg
-     *          the argument
-     */
-    public void info(String format, Object arg) {
-        if (logger.isLoggable(Level.INFO)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg);
-            log(SELF, Level.INFO, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at the INFO level according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the INFO level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg1
-     *          the first argument
-     * @param arg2
-     *          the second argument
-     */
-    public void info(String format, Object arg1, Object arg2) {
-        if (logger.isLoggable(Level.INFO)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);
-            log(SELF, Level.INFO, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level INFO according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the INFO level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param argArray
-     *          an array of arguments
-     */
-    public void info(String format, Object... argArray) {
-        if (logger.isLoggable(Level.INFO)) {
-            FormattingTuple ft = MessageFormatter.arrayFormat(format, argArray);
-            log(SELF, Level.INFO, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log an exception (throwable) at the INFO level with an accompanying
-     * message.
-     * 
-     * @param msg
-     *          the message accompanying the exception
-     * @param t
-     *          the exception (throwable) to log
-     */
-    public void info(String msg, Throwable t) {
-        if (logger.isLoggable(Level.INFO)) {
-            log(SELF, Level.INFO, msg, t);
-        }
-    }
-
-    /**
-     * Is this logger instance enabled for the WARNING level?
-     * 
-     * @return True if this Logger is enabled for the WARNING level, false
-     *         otherwise.
-     */
-    public boolean isWarnEnabled() {
-        return logger.isLoggable(Level.WARNING);
-    }
-
-    /**
-     * Log a message object at the WARNING level.
-     * 
-     * @param msg
-     *          - the message object to be logged
-     */
-    public void warn(String msg) {
-        if (logger.isLoggable(Level.WARNING)) {
-            log(SELF, Level.WARNING, msg, null);
-        }
-    }
-
-    /**
-     * Log a message at the WARNING level according to the specified format and
-     * argument.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the WARNING level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg
-     *          the argument
-     */
-    public void warn(String format, Object arg) {
-        if (logger.isLoggable(Level.WARNING)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg);
-            log(SELF, Level.WARNING, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at the WARNING level according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the WARNING level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg1
-     *          the first argument
-     * @param arg2
-     *          the second argument
-     */
-    public void warn(String format, Object arg1, Object arg2) {
-        if (logger.isLoggable(Level.WARNING)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);
-            log(SELF, Level.WARNING, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level WARNING according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the WARNING level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param argArray
-     *          an array of arguments
-     */
-    public void warn(String format, Object... argArray) {
-        if (logger.isLoggable(Level.WARNING)) {
-            FormattingTuple ft = MessageFormatter.arrayFormat(format, argArray);
-            log(SELF, Level.WARNING, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log an exception (throwable) at the WARNING level with an accompanying
-     * message.
-     * 
-     * @param msg
-     *          the message accompanying the exception
-     * @param t
-     *          the exception (throwable) to log
-     */
-    public void warn(String msg, Throwable t) {
-        if (logger.isLoggable(Level.WARNING)) {
-            log(SELF, Level.WARNING, msg, t);
-        }
-    }
-
-    /**
-     * Is this logger instance enabled for level SEVERE?
-     * 
-     * @return True if this Logger is enabled for level SEVERE, false otherwise.
-     */
-    public boolean isErrorEnabled() {
-        return logger.isLoggable(Level.SEVERE);
-    }
-
-    /**
-     * Log a message object at the SEVERE level.
-     * 
-     * @param msg
-     *          - the message object to be logged
-     */
-    public void error(String msg) {
-        if (logger.isLoggable(Level.SEVERE)) {
-            log(SELF, Level.SEVERE, msg, null);
-        }
-    }
-
-    /**
-     * Log a message at the SEVERE level according to the specified format and
-     * argument.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the SEVERE level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg
-     *          the argument
-     */
-    public void error(String format, Object arg) {
-        if (logger.isLoggable(Level.SEVERE)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg);
-            log(SELF, Level.SEVERE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at the SEVERE level according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the SEVERE level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arg1
-     *          the first argument
-     * @param arg2
-     *          the second argument
-     */
-    public void error(String format, Object arg1, Object arg2) {
-        if (logger.isLoggable(Level.SEVERE)) {
-            FormattingTuple ft = MessageFormatter.format(format, arg1, arg2);
-            log(SELF, Level.SEVERE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log a message at level SEVERE according to the specified format and
-     * arguments.
-     * 
-     * <p>
-     * This form avoids superfluous object creation when the logger is disabled
-     * for the SEVERE level.
-     * </p>
-     * 
-     * @param format
-     *          the format string
-     * @param arguments
-     *          an array of arguments
-     */
-    public void error(String format, Object... arguments) {
-        if (logger.isLoggable(Level.SEVERE)) {
-            FormattingTuple ft = MessageFormatter.arrayFormat(format, arguments);
-            log(SELF, Level.SEVERE, ft.getMessage(), ft.getThrowable());
-        }
-    }
-
-    /**
-     * Log an exception (throwable) at the SEVERE level with an accompanying
-     * message.
-     * 
-     * @param msg
-     *          the message accompanying the exception
-     * @param t
-     *          the exception (throwable) to log
-     */
-    public void error(String msg, Throwable t) {
-        if (logger.isLoggable(Level.SEVERE)) {
-            log(SELF, Level.SEVERE, msg, t);
-        }
-    }
-
-    /**
-     * Log the message at the specified level with the specified throwable if any.
-     * This method creates a LogRecord and fills in caller date before calling
-     * this instance's JDK14 logger.
-     * 
-     * See bug report #13 for more details.
-     * 
-     * @param level
-     * @param msg
-     * @param t
-     */
-    private void log(String callerFQCN, Level level, String msg, Throwable t) {
-        // millis and thread are filled by the constructor
-        LogRecord record = new LogRecord(level, msg);
-        record.setLoggerName(getName());
-        record.setThrown(t);
-        // Note: parameters in record are not set because SLF4J only
-        // supports a single formatting style
-        fillCallerData(callerFQCN, record);
-        logger.log(record);
-    }
-
-    static String SELF = JDK14LoggerAdapter.class.getName();
-    static String SUPER = MarkerIgnoringBase.class.getName();
-
-    private static final boolean FILL_CALLER_DATA = Boolean.getBoolean( "net.md_5.bungee.slf4j-caller-data" );
-
-    /**
-     * Fill in caller data if possible.
-     * 
-     * @param record
-     *          The record to update
-     */
-    final private void fillCallerData(String callerFQCN, LogRecord record) {
-        if ( !FILL_CALLER_DATA )
-        {
-            return;
-        }
-        StackTraceElement[] steArray = new Throwable().getStackTrace();
-
-        int selfIndex = -1;
-        for (int i = 0; i < steArray.length; i++) {
-            final String className = steArray[i].getClassName();
-            if (className.equals(callerFQCN) || className.equals(SUPER)) {
-                selfIndex = i;
-                break;
-            }
-        }
-
-        int found = -1;
-        for (int i = selfIndex + 1; i < steArray.length; i++) {
-            final String className = steArray[i].getClassName();
-            if (!(className.equals(callerFQCN) || className.equals(SUPER))) {
-                found = i;
-                break;
-            }
-        }
-
-        if (found != -1) {
-            StackTraceElement ste = steArray[found];
-            // setting the class name has the side effect of setting
-            // the needToInferCaller variable to false.
-            record.setSourceClassName(ste.getClassName());
-            record.setSourceMethodName(ste.getMethodName());
-        }
-    }
-
-    public void log(Marker marker, String callerFQCN, int level, String message, Object[] argArray, Throwable t) {
-        Level julLevel = slf4jLevelIntToJULLevel(level);
-        // the logger.isLoggable check avoids the unconditional
-        // construction of location data for disabled log
-        // statements. As of 2008-07-31, callers of this method
-        // do not perform this check. See also
-        // http://jira.qos.ch/browse/SLF4J-81
-        if (logger.isLoggable(julLevel)) {
-            log(callerFQCN, julLevel, message, t);
-        }
-    }
-
-    private Level slf4jLevelIntToJULLevel(int slf4jLevelInt) {
-        Level julLevel;
-        switch (slf4jLevelInt) {
-        case LocationAwareLogger.TRACE_INT:
-            julLevel = Level.FINEST;
-            break;
-        case LocationAwareLogger.DEBUG_INT:
-            julLevel = Level.FINE;
-            break;
-        case LocationAwareLogger.INFO_INT:
-            julLevel = Level.INFO;
-            break;
-        case LocationAwareLogger.WARN_INT:
-            julLevel = Level.WARNING;
-            break;
-        case LocationAwareLogger.ERROR_INT:
-            julLevel = Level.SEVERE;
-            break;
-        default:
-            throw new IllegalStateException("Level number " + slf4jLevelInt + " is not recognized.");
-        }
-        return julLevel;
-    }
-
-    /**
-     * @since 1.7.15
-     */
-    public void log(LoggingEvent event) {
-        Level julLevel = slf4jLevelIntToJULLevel(event.getLevel().toInt());
-        if (logger.isLoggable(julLevel)) {
-            LogRecord record = eventToRecord(event, julLevel);
-            logger.log(record);
-        }
-    }
-
-    private LogRecord eventToRecord(LoggingEvent event, Level julLevel) {
-        String format = event.getMessage();
-        Object[] arguments = event.getArgumentArray();
-        FormattingTuple ft = MessageFormatter.arrayFormat(format, arguments);
-        if (ft.getThrowable() != null && event.getThrowable() != null) {
-            throw new IllegalArgumentException("both last element in argument array and last argument are of type Throwable");
-        }
-
-        Throwable t = event.getThrowable();
-        if (ft.getThrowable() != null) {
-            t = ft.getThrowable();
-            throw new IllegalStateException("fix above code");
-        }
-
-        LogRecord record = new LogRecord(julLevel, ft.getMessage());
-        record.setLoggerName(event.getLoggerName());
-        record.setMillis(event.getTimeStamp());
-        record.setSourceClassName(EventConstants.NA_SUBST);
-        record.setSourceMethodName(EventConstants.NA_SUBST);
-
-        record.setThrown(t);
-        return record;
-    }
-}
diff --git a/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerFactory.java b/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerFactory.java
deleted file mode 100644
index 2d6eaaf8..00000000
--- a/slf4j/src/main/java/org/slf4j/impl/JDK14LoggerFactory.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/**
- * Copyright (c) 2004-2011 QOS.ch
- * All rights reserved.
- *
- * Permission is hereby granted, free  of charge, to any person obtaining
- * a  copy  of this  software  and  associated  documentation files  (the
- * "Software"), to  deal in  the Software without  restriction, including
- * without limitation  the rights to  use, copy, modify,  merge, publish,
- * distribute,  sublicense, and/or sell  copies of  the Software,  and to
- * permit persons to whom the Software  is furnished to do so, subject to
- * the following conditions:
- *
- * The  above  copyright  notice  and  this permission  notice  shall  be
- * included in all copies or substantial portions of the Software.
- *
- * THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
- * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
- * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- *
- */
-package org.slf4j.impl;
-
-import org.slf4j.Logger;
-import org.slf4j.ILoggerFactory;
-
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-
-/**
- * JDK14LoggerFactory is an implementation of {@link ILoggerFactory} returning
- * the appropriately named {@link JDK14LoggerAdapter} instance.
- * 
- * @author Ceki G&uuml;lc&uuml;
- */
-public class JDK14LoggerFactory implements ILoggerFactory {
-
-    // key: name (String), value: a JDK14LoggerAdapter;
-    ConcurrentMap<String, Logger> loggerMap;
-    public static java.util.logging.Logger LOGGER; // BungeeCord
-
-    public JDK14LoggerFactory() {
-        loggerMap = new ConcurrentHashMap<String, Logger>();
-        // ensure jul initialization. see SLF4J-359 
-        // note that call to java.util.logging.LogManager.getLogManager() fails on the Google App Engine platform. See SLF4J-363
-        java.util.logging.Logger.getLogger("");
-    }
-
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.slf4j.ILoggerFactory#getLogger(java.lang.String)
-     */
-    public Logger getLogger(String name) {
-        // the root logger is called "" in JUL
-        if (name.equalsIgnoreCase(Logger.ROOT_LOGGER_NAME)) {
-            name = "";
-        }
-
-        Logger slf4jLogger = loggerMap.get(name);
-        if (slf4jLogger != null)
-            return slf4jLogger;
-        else {
-            java.util.logging.Logger julLogger = LOGGER; // BungeeCord - TODO: per-plugin loggers
-            Logger newInstance = new JDK14LoggerAdapter(julLogger);
-            Logger oldInstance = loggerMap.putIfAbsent(name, newInstance);
-            return oldInstance == null ? newInstance : oldInstance;
-        }
-    }
-}
diff --git a/slf4j/src/main/java/org/slf4j/impl/StaticLoggerBinder.java b/slf4j/src/main/java/org/slf4j/impl/StaticLoggerBinder.java
deleted file mode 100644
index ebf8ae11..00000000
--- a/slf4j/src/main/java/org/slf4j/impl/StaticLoggerBinder.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/**
- * Copyright (c) 2004-2011 QOS.ch
- * All rights reserved.
- *
- * Permission is hereby granted, free  of charge, to any person obtaining
- * a  copy  of this  software  and  associated  documentation files  (the
- * "Software"), to  deal in  the Software without  restriction, including
- * without limitation  the rights to  use, copy, modify,  merge, publish,
- * distribute,  sublicense, and/or sell  copies of  the Software,  and to
- * permit persons to whom the Software  is furnished to do so, subject to
- * the following conditions:
- *
- * The  above  copyright  notice  and  this permission  notice  shall  be
- * included in all copies or substantial portions of the Software.
- *
- * THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
- * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
- * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- *
- */
-package org.slf4j.impl;
-
-import org.slf4j.ILoggerFactory;
-import org.slf4j.LoggerFactory;
-import org.slf4j.spi.LoggerFactoryBinder;
-
-/**
- * The binding of {@link LoggerFactory} class with an actual instance of 
- * {@link ILoggerFactory} is performed using information returned by this class. 
- * 
- * @author Ceki G&uuml;lc&uuml;
- */
-public class StaticLoggerBinder implements LoggerFactoryBinder {
-
-    /**
-     * The unique instance of this class.
-     * 
-     */
-    private static final StaticLoggerBinder SINGLETON = new StaticLoggerBinder();
-
-    /**
-     * Return the singleton of this class.
-     * 
-     * @return the StaticLoggerBinder singleton
-     */
-    public static final StaticLoggerBinder getSingleton() {
-        return SINGLETON;
-    }
-
-    /**
-     * Declare the version of the SLF4J API this implementation is compiled against. 
-     * The value of this field is modified with each major release. 
-     */
-    // to avoid constant folding by the compiler, this field must *not* be final
-    public static String REQUESTED_API_VERSION = "1.6.99"; // !final
-
-    private static final String loggerFactoryClassStr = org.slf4j.impl.JDK14LoggerFactory.class.getName();
-
-    /** The ILoggerFactory instance returned by the {@link #getLoggerFactory} method
-     * should always be the same object
-     */
-    private final ILoggerFactory loggerFactory;
-
-    private StaticLoggerBinder() {
-        // Note: JCL gets substituted at build time by an appropriate Ant task
-        loggerFactory = new org.slf4j.impl.JDK14LoggerFactory();
-    }
-
-    public ILoggerFactory getLoggerFactory() {
-        return loggerFactory;
-    }
-
-    public String getLoggerFactoryClassStr() {
-        return loggerFactoryClassStr;
-    }
-}
diff --git a/slf4j/src/main/java/org/slf4j/impl/StaticMDCBinder.java b/slf4j/src/main/java/org/slf4j/impl/StaticMDCBinder.java
deleted file mode 100644
index 0a1dcb4c..00000000
--- a/slf4j/src/main/java/org/slf4j/impl/StaticMDCBinder.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/**
- * Copyright (c) 2004-2011 QOS.ch
- * All rights reserved.
- *
- * Permission is hereby granted, free  of charge, to any person obtaining
- * a  copy  of this  software  and  associated  documentation files  (the
- * "Software"), to  deal in  the Software without  restriction, including
- * without limitation  the rights to  use, copy, modify,  merge, publish,
- * distribute,  sublicense, and/or sell  copies of  the Software,  and to
- * permit persons to whom the Software  is furnished to do so, subject to
- * the following conditions:
- *
- * The  above  copyright  notice  and  this permission  notice  shall  be
- * included in all copies or substantial portions of the Software.
- *
- * THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
- * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
- * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- *
- */
-package org.slf4j.impl;
-
-import org.slf4j.helpers.BasicMDCAdapter;
-import org.slf4j.spi.MDCAdapter;
-
-/**
- * This implementation is bound to {@link BasicMDCAdapter}.
- *
- * @author Ceki G&uuml;lc&uuml;
- */
-public class StaticMDCBinder {
-
-    /**
-     * The unique instance of this class.
-     */
-    public static final StaticMDCBinder SINGLETON = new StaticMDCBinder();
-
-    private StaticMDCBinder() {
-    }
-
-    /**
-     * Return the singleton of this class.
-     * 
-     * @return the StaticMDCBinder singleton
-     * @since 1.7.14
-     */
-    public static final StaticMDCBinder getSingleton() {
-        return SINGLETON;
-    }
-
-    /**
-     * Currently this method always returns an instance of 
-     * {@link BasicMDCAdapter}.
-     */
-    public MDCAdapter getMDCA() {
-        // note that this method is invoked only from within the static initializer of
-        // the org.slf4j.MDC class.
-        return new BasicMDCAdapter();
-    }
-
-    public String getMDCAdapterClassStr() {
-        return BasicMDCAdapter.class.getName();
-    }
-}
diff --git a/slf4j/src/main/java/org/slf4j/impl/StaticMarkerBinder.java b/slf4j/src/main/java/org/slf4j/impl/StaticMarkerBinder.java
deleted file mode 100644
index 21a48df6..00000000
--- a/slf4j/src/main/java/org/slf4j/impl/StaticMarkerBinder.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/**
- * Copyright (c) 2004-2011 QOS.ch
- * All rights reserved.
- *
- * Permission is hereby granted, free  of charge, to any person obtaining
- * a  copy  of this  software  and  associated  documentation files  (the
- * "Software"), to  deal in  the Software without  restriction, including
- * without limitation  the rights to  use, copy, modify,  merge, publish,
- * distribute,  sublicense, and/or sell  copies of  the Software,  and to
- * permit persons to whom the Software  is furnished to do so, subject to
- * the following conditions:
- *
- * The  above  copyright  notice  and  this permission  notice  shall  be
- * included in all copies or substantial portions of the Software.
- *
- * THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
- * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
- * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- *
- */
-package org.slf4j.impl;
-
-import org.slf4j.IMarkerFactory;
-import org.slf4j.MarkerFactory;
-import org.slf4j.helpers.BasicMarkerFactory;
-import org.slf4j.spi.MarkerFactoryBinder;
-
-/**
- * 
- * The binding of {@link MarkerFactory} class with an actual instance of 
- * {@link IMarkerFactory} is performed using information returned by this class. 
- * 
- * @author Ceki G&uuml;lc&uuml;
- */
-public class StaticMarkerBinder implements MarkerFactoryBinder {
-
-    /**
-     * The unique instance of this class.
-     */
-    public static final StaticMarkerBinder SINGLETON = new StaticMarkerBinder();
-
-    final IMarkerFactory markerFactory = new BasicMarkerFactory();
-
-    private StaticMarkerBinder() {
-    }
-
-    /**
-     * Return the singleton of this class.
-     * 
-     * @return the StaticMarkerBinder singleton
-     * @since 1.7.14
-     */
-    public static StaticMarkerBinder getSingleton() {
-        return SINGLETON;
-    }
-
-    /**
-     * Currently this method always returns an instance of 
-     * {@link BasicMarkerFactory}.
-     */
-    public IMarkerFactory getMarkerFactory() {
-        return markerFactory;
-    }
-
-    /**
-     * Currently, this method returns the class name of
-     * {@link BasicMarkerFactory}.
-     */
-    public String getMarkerFactoryClassStr() {
-        return BasicMarkerFactory.class.getName();
-    }
-
-}
-- 
2.35.3

