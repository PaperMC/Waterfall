From 57c17912d44f13473ef78771ada30eb6cedb4d48 Mon Sep 17 00:00:00 2001
From: abhiram <abhithegamer2019@gmail.com>
Date: Thu, 3 Jun 2021 01:26:53 +0530
Subject: [PATCH] Added an api method to unload plugins


diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index 90031156..af068763 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -25,6 +25,7 @@ import java.util.Set;
 import java.util.Stack;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
+import java.util.logging.Handler;
 import java.util.logging.Level;
 import io.github.waterfallmc.waterfall.event.ProxyExceptionEvent; // Waterfall
 import io.github.waterfallmc.waterfall.exception.ProxyCommandException; // Waterfall
@@ -63,6 +64,7 @@ public final class PluginManager
     private Map<String, PluginDescription> toLoad = new HashMap<>();
     private final Multimap<Plugin, Command> commandsByPlugin = ArrayListMultimap.create();
     private final Multimap<Plugin, Listener> listenersByPlugin = ArrayListMultimap.create();
+    private final HashMap<String,URLClassLoader> pluginloaders = new HashMap<>();
 
     @SuppressWarnings("unchecked")
     public PluginManager(ProxyServer proxy)
@@ -270,6 +272,43 @@ public final class PluginManager
     }
     // Waterfall end
 
+    /**
+     * This will unload the given plugin
+     * @param plugin to unload
+     */
+    // Waterfall start - Added a method to unload plugins fully
+    public void unloadPlugin(Plugin plugin){
+        plugin.onDisable();
+        this.unregisterListeners( plugin );
+        this.unregisterCommands( plugin );
+        this.proxy.getScheduler().cancel( plugin );
+
+        for ( Handler handler : plugin.getLogger().getHandlers() )
+        {
+            handler.close();
+        }
+
+        try
+        {
+            pluginloaders.get( plugin.getDescription().getName() ).close();
+        }catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+
+        if( plugins.containsKey( plugin.getDescription().getName() ) )
+        {
+            plugins.remove( plugin.getDescription().getName() );
+        }
+
+        if ( pluginloaders.containsKey( plugin.getDescription().getName() ) )
+        {
+            pluginloaders.remove( plugin.getDescription().getName() );
+        }
+    }
+    // Waterfall end
+
+
     /**
      * Returns the {@link Plugin} objects corresponding to all loaded plugins.
      *
@@ -395,6 +434,9 @@ public final class PluginManager
                 Plugin clazz = (Plugin) main.getDeclaredConstructor().newInstance();
 
                 plugins.put( plugin.getName(), clazz );
+                // Waterfall start - cache plugin loaders to unload them later
+                pluginloaders.put( plugin.getName(), loader );
+                // Waterfall end
                 clazz.onLoad();
                 ProxyServer.getInstance().getLogger().log( Level.INFO, "Loaded plugin {0} version {1} by {2}", new Object[]
                 {
-- 
2.26.2.windows.1

